[
    {
        "id": 0,
        "name": "locale.ALT_DIGITS()",
        "describe": "Get a representation of up to 100 values used to represent the values0 to 99."
    },
    {
        "id": 1,
        "name": "modulefinder.AddPackagePath()",
        "describe": "Record that the package named pkg_name can be found in the specified path."
    },
    {
        "id": 2,
        "name": "multiprocessing.Array()",
        "describe": "Return a ctypes array allocated from shared memory.  By default the returnvalue is actually a synchronized wrapper for the array."
    },
    {
        "id": 3,
        "name": "winsound.Beep()",
        "describe": "Beep the PC\u2019s speaker. The frequency parameter specifies frequency, in hertz,of the sound, and must be in the range 37 through 32,767. The durationparameter specifies the number of milliseconds the sound should last.  If thesystem is not able to beep the speaker, RuntimeError is raised."
    },
    {
        "id": 4,
        "name": "ctypes.CFUNCTYPE()",
        "describe": "The returned function prototype creates functions that use the standard Ccalling convention.  The function will release the GIL during the call.  Ifuse_errno is set to true, the ctypes private copy of the systemerrno variable is exchanged with the real errno value beforeand after the call; use_last_error does the same for the Windows errorcode."
    },
    {
        "id": 5,
        "name": "socket.CMSG_LEN()",
        "describe": "Return the total length, without trailing padding, of an ancillarydata item with associated data of the given length.  This valuecan often be used as the buffer size for recvmsg() toreceive a single item of ancillary data, but RFC 3542 requiresportable applications to use CMSG_SPACE() and thus includespace for padding, even when the item will be the last in thebuffer.  Raises OverflowError if length is outside thepermissible range of values."
    },
    {
        "id": 6,
        "name": "socket.CMSG_SPACE()",
        "describe": "Return the buffer size needed for recvmsg() toreceive an ancillary data item with associated data of the givenlength, along with any trailing padding.  The buffer space neededto receive multiple items is the sum of the CMSG_SPACE()values for their associated data lengths.  RaisesOverflowError if length is outside the permissible rangeof values."
    },
    {
        "id": 7,
        "name": "locale.CODESET()",
        "describe": "Get a string with the name of the character encoding used in theselected locale."
    },
    {
        "id": 8,
        "name": "locale.CRNCYSTR()",
        "describe": "Get the currency symbol, preceded by \u201c-\u201d if the symbol should appear beforethe value, \u201c+\u201d if the symbol should appear after the value, or \u201c.\u201d if thesymbol should replace the radix character."
    },
    {
        "id": 9,
        "name": "winreg.CloseKey()",
        "describe": "Closes a previously opened registry key.  The hkey argument specifies apreviously opened key."
    },
    {
        "id": 10,
        "name": "winreg.ConnectRegistry()",
        "describe": "Establishes a connection to a predefined registry handle on another computer,and returns a handle object."
    },
    {
        "id": 11,
        "name": "winreg.CreateKey()",
        "describe": "Creates or opens the specified key, returning ahandle object."
    },
    {
        "id": 12,
        "name": "winreg.CreateKeyEx()",
        "describe": "Creates or opens the specified key, returning ahandle object."
    },
    {
        "id": 13,
        "name": "msilib.CreateRecord()",
        "describe": "Return a new record object by calling MSICreateRecord(). count is thenumber of fields of the record."
    },
    {
        "id": 14,
        "name": "ssl.DER_cert_to_PEM_cert()",
        "describe": "Given a certificate as a DER-encoded blob of bytes, returns a PEM-encodedstring version of the same certificate."
    },
    {
        "id": 15,
        "name": "locale.D_FMT()",
        "describe": "Get a string that can be used as a format string for time.strftime() torepresent a date in a locale-specific way."
    },
    {
        "id": 16,
        "name": "locale.D_T_FMT()",
        "describe": "Get a string that can be used as a format string for time.strftime() torepresent date and time in a locale-specific way."
    },
    {
        "id": 17,
        "name": "winreg.DeleteKey()",
        "describe": "Deletes the specified key."
    },
    {
        "id": 18,
        "name": "winreg.DeleteKeyEx()",
        "describe": "Deletes the specified key."
    },
    {
        "id": 19,
        "name": "winreg.DeleteValue()",
        "describe": "Removes a named value from a registry key."
    },
    {
        "id": 20,
        "name": "winreg.DisableReflectionKey()",
        "describe": "Disables registry reflection for 32-bit processes running on a 64-bitoperating system."
    },
    {
        "id": 21,
        "name": "ctypes.DllCanUnloadNow()",
        "describe": "Windows only: This function is a hook which allows implementing in-processCOM servers with ctypes.  It is called from the DllCanUnloadNow function thatthe _ctypes extension dll exports."
    },
    {
        "id": 22,
        "name": "ctypes.DllGetClassObject()",
        "describe": "Windows only: This function is a hook which allows implementing in-processCOM servers with ctypes.  It is called from the DllGetClassObject functionthat the _ctypes extension dll exports."
    },
    {
        "id": 23,
        "name": "doctest.DocFileSuite()",
        "describe": "Convert doctest tests from one or more text files to aunittest.TestSuite."
    },
    {
        "id": 24,
        "name": "doctest.DocTestSuite()",
        "describe": "Convert doctest tests for a module to a unittest.TestSuite."
    },
    {
        "id": 25,
        "name": "types.DynamicClassAttribute()",
        "describe": "Route attribute access on a class to __getattr__."
    },
    {
        "id": 26,
        "name": "locale.ERA()",
        "describe": "Get a string that represents the era used in the current locale."
    },
    {
        "id": 27,
        "name": "locale.ERA_D_FMT()",
        "describe": "Get a format string for time.strftime() to represent a date in alocale-specific era-based way."
    },
    {
        "id": 28,
        "name": "locale.ERA_D_T_FMT()",
        "describe": "Get a format string for time.strftime() to represent date and time in alocale-specific era-based way."
    },
    {
        "id": 29,
        "name": "locale.ERA_T_FMT()",
        "describe": "Get a format string for time.strftime() to represent a time in alocale-specific era-based way."
    },
    {
        "id": 30,
        "name": "winreg.EnableReflectionKey()",
        "describe": "Restores registry reflection for the specified disabled key."
    },
    {
        "id": 31,
        "name": "codecs.EncodedFile()",
        "describe": "Return a StreamRecoder instance, a wrapped version of filewhich provides transparent transcoding. The original file is closedwhen the wrapped version is closed."
    },
    {
        "id": 32,
        "name": "winreg.EnumKey()",
        "describe": "Enumerates subkeys of an open registry key, returning a string."
    },
    {
        "id": 33,
        "name": "winreg.EnumValue()",
        "describe": "Enumerates values of an open registry key, returning a tuple."
    },
    {
        "id": 34,
        "name": "winreg.ExpandEnvironmentStrings()",
        "describe": "Expands environment variable placeholders %NAME% in strings likeREG_EXPAND_SZ:"
    },
    {
        "id": 35,
        "name": "msilib.FCICreate()",
        "describe": "Create a new CAB file named cabname. files must be a list of tuples, eachcontaining the name of the file on disk, and the name of the file inside the CABfile."
    },
    {
        "id": 36,
        "name": "winreg.FlushKey()",
        "describe": "Writes all the attributes of a key to the registry."
    },
    {
        "id": 37,
        "name": "ctypes.FormatError()",
        "describe": "Windows only: Returns a textual description of the error code code.  If noerror code is specified, the last error code is used by calling the Windowsapi function GetLastError."
    },
    {
        "id": 38,
        "name": "ctypes.GetLastError()",
        "describe": "Windows only: Returns the last error code set by Windows in the calling thread.This function calls the Windows GetLastError() function directly,it does not return the ctypes-private copy of the error code."
    },
    {
        "id": 39,
        "name": "token.ISEOF()",
        "describe": "Return True if x is the marker indicating the end of input."
    },
    {
        "id": 40,
        "name": "token.ISNONTERMINAL()",
        "describe": "Return True for non-terminal token values."
    },
    {
        "id": 41,
        "name": "token.ISTERMINAL()",
        "describe": "Return True for terminal token values."
    },
    {
        "id": 42,
        "name": "difflib.IS_CHARACTER_JUNK()",
        "describe": "Return True for ignorable characters.  The character ch is ignorable if chis a space or tab, otherwise it is not ignorable.  Used as a default forparameter charjunk in ndiff()."
    },
    {
        "id": 43,
        "name": "difflib.IS_LINE_JUNK()",
        "describe": "Return True for ignorable lines.  The line line is ignorable if line isblank or contains a single '#', otherwise it is not ignorable.  Used as adefault for parameter linejunk in ndiff() in older versions."
    },
    {
        "id": 44,
        "name": "imaplib.Int2AP()",
        "describe": "Converts an integer into a bytes representation using characters from the set[A .. P]."
    },
    {
        "id": 45,
        "name": "imaplib.Internaldate2tuple()",
        "describe": "Parse an IMAP4 INTERNALDATE string and return corresponding localtime.  The return value is a time.struct_time tuple orNone if the string has wrong format."
    },
    {
        "id": 46,
        "name": "winreg.LoadKey()",
        "describe": "Creates a subkey under the specified key and stores registration informationfrom a specified file into that subkey."
    },
    {
        "id": 47,
        "name": "winsound.MessageBeep()",
        "describe": "Call the underlying MessageBeep() function from the Platform API.  Thisplays a sound as specified in the registry.  The type argument specifies whichsound to play; possible values are -1, MB_ICONASTERISK,MB_ICONEXCLAMATION, MB_ICONHAND, MB_ICONQUESTION, and MB_OK, alldescribed below.  The value -1 produces a \u201csimple beep\u201d; this is the finalfallback if a sound cannot be played otherwise.  If the system indicates anerror, RuntimeError is raised."
    },
    {
        "id": 48,
        "name": "locale.NOEXPR()",
        "describe": "Get a regular expression that can be used with the regex(3) function torecognize a negative response to a yes/no question."
    },
    {
        "id": 49,
        "name": "tempfile.NamedTemporaryFile()",
        "describe": "This function operates exactly as TemporaryFile() does, except thatthe file is guaranteed to have a visible name in the file system (onUnix, the directory entry is not unlinked).  That name can be retrievedfrom the name attribute of the returnedfile-like object.  Whether the name can beused to open the file a second time, while the named temporary file isstill open, varies across platforms (it can be so used on Unix; it cannoton Windows NT or later).  If delete is true (the default), the file isdeleted as soon as it is closed.The returned object is always a file-like object whose fileattribute is the underlying true file object. This file-like object canbe used in a with statement, just like a normal file."
    },
    {
        "id": 50,
        "name": "typing.NewType()",
        "describe": "A helper function to indicate a distinct type to a typechecker,see NewType. At runtime it returns a function that returnsits argument. Usage:"
    },
    {
        "id": 51,
        "name": "msilib.OpenDatabase()",
        "describe": "Return a new database object by calling MsiOpenDatabase.   path is the filename of the MSI file; persist can be one of the constantsMSIDBOPEN_CREATEDIRECT, MSIDBOPEN_CREATE, MSIDBOPEN_DIRECT,MSIDBOPEN_READONLY, or MSIDBOPEN_TRANSACT, and may include the flagMSIDBOPEN_PATCHFILE. See the Microsoft documentation for the meaning ofthese flags; depending on the flags, an existing database is opened, or a newone created."
    },
    {
        "id": 52,
        "name": "winreg.OpenKey()",
        "describe": "Opens the specified key, returning a handle object."
    },
    {
        "id": 53,
        "name": "winreg.OpenKeyEx()",
        "describe": "Opens the specified key, returning a handle object."
    },
    {
        "id": 54,
        "name": "ssl.PEM_cert_to_DER_cert()",
        "describe": "Given a certificate as an ASCII PEM string, returns a DER-encoded sequence ofbytes for that same certificate."
    },
    {
        "id": 55,
        "name": "ctypes.POINTER()",
        "describe": "This factory function creates and returns a new ctypes pointer type. Pointertypes are cached and reused internally, so calling this function repeatedly ischeap. type must be a ctypes type."
    },
    {
        "id": 56,
        "name": "os.POSIX_SPAWN_CLOSE()",
        "describe": "(os.POSIX_SPAWN_CLOSE, fd)"
    },
    {
        "id": 57,
        "name": "os.POSIX_SPAWN_DUP2()",
        "describe": "(os.POSIX_SPAWN_DUP2, fd, new_fd)"
    },
    {
        "id": 58,
        "name": "os.POSIX_SPAWN_OPEN()",
        "describe": "(os.POSIX_SPAWN_OPEN, fd, path, flags, mode)"
    },
    {
        "id": 59,
        "name": "ctypes.PYFUNCTYPE()",
        "describe": "The returned function prototype creates functions that use the Python callingconvention.  The function will not release the GIL during the call."
    },
    {
        "id": 60,
        "name": "imaplib.ParseFlags()",
        "describe": "Converts an IMAP4 FLAGS response to a tuple of individual flags."
    },
    {
        "id": 61,
        "name": "multiprocessing.Pipe()",
        "describe": "Returns a pair (conn1, conn2) ofConnection objects representing theends of a pipe."
    },
    {
        "id": 62,
        "name": "winsound.PlaySound()",
        "describe": "Call the underlying PlaySound() function from the Platform API.  Thesound parameter may be a filename, a system sound alias, audio data as abytes-like object, or None.  Itsinterpretation depends on the value of flags, which can be a bitwise ORedcombination of the constants described below. If the sound parameter isNone, any currently playing waveform sound is stopped. If the systemindicates an error, RuntimeError is raised."
    },
    {
        "id": 63,
        "name": "winreg.QueryInfoKey()",
        "describe": "Returns information about a key, as a tuple."
    },
    {
        "id": 64,
        "name": "winreg.QueryReflectionKey()",
        "describe": "Determines the reflection state for the specified key."
    },
    {
        "id": 65,
        "name": "winreg.QueryValue()",
        "describe": "Retrieves the unnamed value for a key, as a string."
    },
    {
        "id": 66,
        "name": "winreg.QueryValueEx()",
        "describe": "Retrieves the type and data for a specified value name associated withan open registry key."
    },
    {
        "id": 67,
        "name": "locale.RADIXCHAR()",
        "describe": "Get the radix character (decimal dot, decimal comma, etc.)."
    },
    {
        "id": 68,
        "name": "ssl.RAND_add()",
        "describe": "Mix the given bytes into the SSL pseudo-random number generator.  Theparameter entropy (a float) is a lower bound on the entropy contained instring (so you can always use 0.0).  See RFC 1750 for moreinformation on sources of entropy."
    },
    {
        "id": 69,
        "name": "ssl.RAND_bytes()",
        "describe": "Return num cryptographically strong pseudo-random bytes. Raises anSSLError if the PRNG has not been seeded with enough data or if theoperation is not supported by the current RAND method. RAND_status()can be used to check the status of the PRNG and RAND_add() can be usedto seed the PRNG."
    },
    {
        "id": 70,
        "name": "ssl.RAND_egd()",
        "describe": "If you are running an entropy-gathering daemon (EGD) somewhere, and pathis the pathname of a socket connection open to it, this will read 256 bytesof randomness from the socket, and add it to the SSL pseudo-random numbergenerator to increase the security of generated secret keys.  This istypically only necessary on systems without better sources of randomness."
    },
    {
        "id": 71,
        "name": "ssl.RAND_pseudo_bytes()",
        "describe": "Return (bytes, is_cryptographic): bytes are num pseudo-random bytes,is_cryptographic is True if the bytes generated are cryptographicallystrong. Raises an SSLError if the operation is not supported by thecurrent RAND method."
    },
    {
        "id": 72,
        "name": "ssl.RAND_status()",
        "describe": "Return True if the SSL pseudo-random number generator has been seededwith \u2018enough\u2019 randomness, and False otherwise.  You can usessl.RAND_egd() and ssl.RAND_add() to increase the randomness ofthe pseudo-random number generator."
    },
    {
        "id": 73,
        "name": "modulefinder.ReplacePackage()",
        "describe": "Allows specifying that the module named oldname is in fact the package namednewname."
    },
    {
        "id": 74,
        "name": "stat.S_IFMT()",
        "describe": "Return the portion of the file\u2019s mode that describes the file type (used by theS_IS*() functions above)."
    },
    {
        "id": 75,
        "name": "stat.S_IMODE()",
        "describe": "Return the portion of the file\u2019s mode that can be set byos.chmod()\u2014that is, the file\u2019s permission bits, plus the stickybit, set-group-id, and set-user-id bits (on systems that support them)."
    },
    {
        "id": 76,
        "name": "stat.S_ISBLK()",
        "describe": "Return non-zero if the mode is from a block special device file."
    },
    {
        "id": 77,
        "name": "stat.S_ISCHR()",
        "describe": "Return non-zero if the mode is from a character special device file."
    },
    {
        "id": 78,
        "name": "stat.S_ISDIR()",
        "describe": "Return non-zero if the mode is from a directory."
    },
    {
        "id": 79,
        "name": "stat.S_ISDOOR()",
        "describe": "Return non-zero if the mode is from a door."
    },
    {
        "id": 80,
        "name": "stat.S_ISFIFO()",
        "describe": "Return non-zero if the mode is from a FIFO (named pipe)."
    },
    {
        "id": 81,
        "name": "stat.S_ISLNK()",
        "describe": "Return non-zero if the mode is from a symbolic link."
    },
    {
        "id": 82,
        "name": "stat.S_ISPORT()",
        "describe": "Return non-zero if the mode is from an event port."
    },
    {
        "id": 83,
        "name": "stat.S_ISREG()",
        "describe": "Return non-zero if the mode is from a regular file."
    },
    {
        "id": 84,
        "name": "stat.S_ISSOCK()",
        "describe": "Return non-zero if the mode is from a socket."
    },
    {
        "id": 85,
        "name": "stat.S_ISWHT()",
        "describe": "Return non-zero if the mode is from a whiteout."
    },
    {
        "id": 86,
        "name": "winreg.SaveKey()",
        "describe": "Saves the specified key, and all its subkeys to the specified file."
    },
    {
        "id": 87,
        "name": "winreg.SetValue()",
        "describe": "Associates a value with a specified key."
    },
    {
        "id": 88,
        "name": "winreg.SetValueEx()",
        "describe": "Stores data in the value field of an open registry key."
    },
    {
        "id": 89,
        "name": "tempfile.SpooledTemporaryFile()",
        "describe": "This function operates exactly as TemporaryFile() does, except thatdata is spooled in memory until the file size exceeds max_size, oruntil the file\u2019s fileno() method is called, at which point thecontents are written to disk and operation proceeds as withTemporaryFile()."
    },
    {
        "id": 90,
        "name": "locale.THOUSEP()",
        "describe": "Get the separator character for thousands (groups of three digits)."
    },
    {
        "id": 91,
        "name": "locale.T_FMT()",
        "describe": "Get a string that can be used as a format string for time.strftime() torepresent a time in a locale-specific way."
    },
    {
        "id": 92,
        "name": "locale.T_FMT_AMPM()",
        "describe": "Get a format string for time.strftime() to represent time in the am/pmformat."
    },
    {
        "id": 93,
        "name": "tkinter.Tcl()",
        "describe": "The Tcl() function is a factory function which creates an object much likethat created by the Tk class, except that it does not initialize the Tksubsystem.  This is most often useful when driving the Tcl interpreter in anenvironment where one doesn\u2019t want to create extraneous toplevel windows, orwhere one cannot (such as Unix/Linux systems without an X server).  An objectcreated by the Tcl() object can have a Toplevel window created (and the Tksubsystem initialized) by calling its loadtk() method."
    },
    {
        "id": 94,
        "name": "tempfile.TemporaryDirectory()",
        "describe": "This function securely creates a temporary directory using the same rules as mkdtemp().The resulting object can be used as a context manager (seeExamples).  On completion of the context or destructionof the temporary directory object the newly created temporary directoryand all its contents are removed from the filesystem."
    },
    {
        "id": 95,
        "name": "tempfile.TemporaryFile()",
        "describe": "Return a file-like object that can be used as a temporary storage area.The file is created securely, using the same rules as mkstemp(). It will be destroyed as soonas it is closed (including an implicit close when the object is garbagecollected).  Under Unix, the directory entry for the file is either not created at all or is removedimmediately after the file is created.  Other platforms do not supportthis; your code should not rely on a temporary file created using thisfunction having or not having a visible name in the file system."
    },
    {
        "id": 96,
        "name": "imaplib.Time2Internaldate()",
        "describe": "Convert date_time to an IMAP4 INTERNALDATE representation.The return value is a string in the form: \"DD-Mmm-YYYY HH:MM:SS+HHMM\" (including double-quotes).  The date_time argument canbe a number (int or float) representing seconds since epoch (asreturned by time.time()), a 9-tuple representing local timean instance of time.struct_time (as returned bytime.localtime()), an aware instance ofdatetime.datetime, or a double-quoted string.  In the lastcase, it is assumed to already be in the correct format."
    },
    {
        "id": 97,
        "name": "msilib.UuidCreate()",
        "describe": "Return the string representation of a new unique identifier. This wraps theWindows API functions UuidCreate() and UuidToString()."
    },
    {
        "id": 98,
        "name": "multiprocessing.Value()",
        "describe": "Return a ctypes object allocated from shared memory.  By default thereturn value is actually a synchronized wrapper for the object.  The objectitself can be accessed via the value attribute of a Value."
    },
    {
        "id": 99,
        "name": "os.WCOREDUMP()",
        "describe": "Return True if a core dump was generated for the process, otherwisereturn False."
    },
    {
        "id": 100,
        "name": "os.WEXITSTATUS()",
        "describe": "Return the process exit status."
    },
    {
        "id": 101,
        "name": "os.WIFCONTINUED()",
        "describe": "Return True if a stopped child has been resumed by delivery ofSIGCONT (if the process has been continued from a jobcontrol stop), otherwise return False."
    },
    {
        "id": 102,
        "name": "os.WIFEXITED()",
        "describe": "Return True if the process exited terminated normally, that is,by calling exit() or _exit(), or by returning from main();otherwise return False."
    },
    {
        "id": 103,
        "name": "os.WIFSIGNALED()",
        "describe": "Return True if the process was terminated by a signal, otherwise returnFalse."
    },
    {
        "id": 104,
        "name": "os.WIFSTOPPED()",
        "describe": "Return True if the process was stopped by delivery of a signal,otherwise return False."
    },
    {
        "id": 105,
        "name": "ctypes.WINFUNCTYPE()",
        "describe": "Windows only: The returned function prototype creates functions that use thestdcall calling convention, except on Windows CE whereWINFUNCTYPE() is the same as CFUNCTYPE().  The function willrelease the GIL during the call.  use_errno and use_last_error have thesame meaning as above."
    },
    {
        "id": 106,
        "name": "os.WSTOPSIG()",
        "describe": "Return the signal which caused the process to stop."
    },
    {
        "id": 107,
        "name": "os.WTERMSIG()",
        "describe": "Return the number of the signal that caused the process to terminate."
    },
    {
        "id": 108,
        "name": "ctypes.WinError()",
        "describe": "Windows only: this function is probably the worst-named thing in ctypes. Itcreates an instance of OSError.  If code is not specified,GetLastError is called to determine the error code. If descr is notspecified, FormatError() is called to get a textual description of theerror."
    },
    {
        "id": 109,
        "name": "locale.YESEXPR()",
        "describe": "Get a regular expression that can be used with the regex function torecognize a positive response to a yes/no question."
    },
    {
        "id": 110,
        "name": "binascii.a2b_base64()",
        "describe": "Convert a block of base64 data back to binary and return the binary data. Morethan one line may be passed at a time."
    },
    {
        "id": 111,
        "name": "binascii.a2b_hex()",
        "describe": "Return the binary data represented by the hexadecimal string hexstr.  Thisfunction is the inverse of b2a_hex(). hexstr must contain an even numberof hexadecimal digits (which can be upper or lower case), otherwise anError exception is raised."
    },
    {
        "id": 112,
        "name": "binascii.a2b_hqx()",
        "describe": "Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression.The string should contain a complete number of binary bytes, or (in case of thelast portion of the binhex4 data) have the remaining bits zero."
    },
    {
        "id": 113,
        "name": "binascii.a2b_qp()",
        "describe": "Convert a block of quoted-printable data back to binary and return the binarydata. More than one line may be passed at a time. If the optional argumentheader is present and true, underscores will be decoded as spaces."
    },
    {
        "id": 114,
        "name": "binascii.a2b_uu()",
        "describe": "Convert a single line of uuencoded data back to binary and return the binarydata. Lines normally contain 45 (binary) bytes, except for the last line. Linedata may be followed by whitespace."
    },
    {
        "id": 115,
        "name": "base64.a85decode()",
        "describe": "Decode the Ascii85 encoded bytes-like object or ASCII string b andreturn the decoded bytes."
    },
    {
        "id": 116,
        "name": "base64.a85encode()",
        "describe": "Encode the bytes-like object b using Ascii85 and return theencoded bytes."
    },
    {
        "id": 117,
        "name": "os.abort()",
        "describe": "Generate a SIGABRT signal to the current process.  On Unix, the defaultbehavior is to produce a core dump; on Windows, the process immediately returnsan exit code of 3.  Be aware that calling this function will not call thePython signal handler registered for SIGABRT withsignal.signal()."
    },
    {
        "id": 118,
        "name": "os.access()",
        "describe": "Use the real uid/gid to test for access to path.  Note that most operationswill use the effective uid/gid, therefore this routine can be used in asuid/sgid environment to test if the invoking user has the specified access topath.  mode should be F_OK to test the existence of path, or itcan be the inclusive OR of one or more of R_OK, W_OK, andX_OK to test permissions.  Return True if access is allowed,False if not. See the Unix man page access(2) for moreinformation."
    },
    {
        "id": 119,
        "name": "itertools.accumulate()",
        "describe": "Make an iterator that returns accumulated sums, or accumulatedresults of other binary functions (specified via the optionalfunc argument)."
    },
    {
        "id": 120,
        "name": "math.acos()",
        "describe": "Return the arc cosine of x, in radians. The result is between 0 andpi."
    },
    {
        "id": 121,
        "name": "math.acosh()",
        "describe": "Return the inverse hyperbolic cosine of x."
    },
    {
        "id": 122,
        "name": "imp.acquire_lock()",
        "describe": "Acquire the interpreter\u2019s global import lock for the current thread.This lock should be used by import hooks to ensure thread-safety whenimporting modules."
    },
    {
        "id": 123,
        "name": "multiprocessing.active_children()",
        "describe": "Return list of all live children of the current process."
    },
    {
        "id": 124,
        "name": "threading.active_count()",
        "describe": "Return the number of Thread objects currently alive.  The returnedcount is equal to the length of the list returned by enumerate()."
    },
    {
        "id": 125,
        "name": "operator.add()",
        "describe": "Return a + b, for a and b numbers."
    },
    {
        "id": 126,
        "name": "logging.addLevelName()",
        "describe": "Associates level level with text levelName in an internal dictionary, which isused to map numeric levels to a textual representation, for example when aFormatter formats a message. This function can also be used to defineyour own levels. The only constraints are that all levels used must beregistered using this function, levels should be positive integers and theyshould increase in increasing order of severity."
    },
    {
        "id": 127,
        "name": "unittest.addModuleCleanup()",
        "describe": "Add a function to be called after tearDownModule() to cleanupresources used during the test class. Functions will be called in reverseorder to the order they are added (LIFO).They are called with any arguments and keyword arguments passed intoaddModuleCleanup() when they are added."
    },
    {
        "id": 128,
        "name": "msilib.add_data()",
        "describe": "Add all records to the table named table in database."
    },
    {
        "id": 129,
        "name": "os.add_dll_directory()",
        "describe": "Add a path to the DLL search path."
    },
    {
        "id": 130,
        "name": "readline.add_history()",
        "describe": "Append line to the history buffer, as if it was the last line typed.This calls add_history() in the underlying library."
    },
    {
        "id": 131,
        "name": "OptionParser.add_option()",
        "describe": "To define an option with only a short option string:"
    },
    {
        "id": 132,
        "name": "msilib.add_stream()",
        "describe": "Add the file path into the _Stream table of database, with the streamname name."
    },
    {
        "id": 133,
        "name": "msilib.add_tables()",
        "describe": "Add all table content from module to database. module must contain anattribute tables listing all tables for which content should be added, and oneattribute per table that has the actual content."
    },
    {
        "id": 134,
        "name": "mimetypes.add_type()",
        "describe": "Add a mapping from the MIME type type to the extension ext. When theextension is already known, the new type will replace the old one. When the typeis already known the extension will be added to the list of known extensions."
    },
    {
        "id": 135,
        "name": "sys.addaudithook()",
        "describe": "Append the callable hook to the list of active auditing hooks for thecurrent interpreter."
    },
    {
        "id": 136,
        "name": "window.addch()",
        "describe": "Paint character ch at (y, x) with attributes attr, overwriting anycharacter previously painted at that location.  By default, the characterposition and attributes are the current settings for the window object."
    },
    {
        "id": 137,
        "name": "window.addnstr()",
        "describe": "Paint at most n characters of the character string str at(y, x) with attributesattr, overwriting anything previously on the display."
    },
    {
        "id": 138,
        "name": "ctypes.addressof()",
        "describe": "Returns the address of the memory buffer as integer.  obj must be aninstance of a ctypes type."
    },
    {
        "id": 139,
        "name": "turtle.addshape()",
        "describe": "There are three different ways to call this function:"
    },
    {
        "id": 140,
        "name": "site.addsitedir()",
        "describe": "Add a directory to sys.path and process its .pth files.  Typicallyused in sitecustomize or usercustomize (see above)."
    },
    {
        "id": 141,
        "name": "window.addstr()",
        "describe": "Paint the character string str at (y, x) with attributesattr, overwriting anything previously on the display."
    },
    {
        "id": 142,
        "name": "zlib.adler32()",
        "describe": "Computes an Adler-32 checksum of data.  (An Adler-32 checksum is almost asreliable as a CRC32 but can be computed much more quickly.)  The resultis an unsigned 32-bit integer.  If value is present, it is used asthe starting value of the checksum; otherwise, a default value of 1is used.  Passing in value allows computing a running checksum over theconcatenation of several inputs.  The algorithm is not cryptographicallystrong, and should not be used for authentication or digital signatures.  Sincethe algorithm is designed for use as a checksum algorithm, it is not suitablefor use as a general hash algorithm."
    },
    {
        "id": 143,
        "name": "audioop.adpcm2lin()",
        "describe": "Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See thedescription of lin2adpcm() for details on ADPCM coding. Return a tuple(sample, newstate) where the sample has the width specified in width."
    },
    {
        "id": 144,
        "name": "signal.alarm()",
        "describe": "If time is non-zero, this function requests that a SIGALRM signal besent to the process in time seconds. Any previously scheduled alarm iscanceled (only one alarm can be scheduled at any time).  The returned value isthen the number of seconds before any previously set alarm was to have beendelivered. If time is zero, no alarm is scheduled, and any scheduled alarm iscanceled.  If the return value is zero, no alarm is currently scheduled."
    },
    {
        "id": 145,
        "name": "audioop.alaw2lin()",
        "describe": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments.a-LAW encoding always uses 8 bits samples, so width refers only to the samplewidth of the output fragment here."
    },
    {
        "id": 146,
        "name": "ctypes.alignment()",
        "describe": "Returns the alignment requirements of a ctypes type. obj_or_type must be actypes type or instance."
    },
    {
        "id": 147,
        "name": "asyncio.all_tasks()",
        "describe": "Return a set of not yet finished Task objects run bythe loop."
    },
    {
        "id": 148,
        "name": "_thread.allocate_lock()",
        "describe": "Return a new lock object.  Methods of locks are described below.  The lock isinitially unlocked."
    },
    {
        "id": 149,
        "name": "operator.and_()",
        "describe": "Return the bitwise and of a and b."
    },
    {
        "id": 150,
        "name": "readline.append_history_file()",
        "describe": "Append the last nelements items of history to a file.  The default filename is~/.history.  The file must already exist.  This callsappend_history() in the underlying library.  This functiononly exists if Python was compiled for a version of the librarythat supports it."
    },
    {
        "id": 151,
        "name": "platform.architecture()",
        "describe": "Queries the given executable (defaults to the Python interpreter binary) forvarious architecture information."
    },
    {
        "id": 152,
        "name": "asyncio.as_completed()",
        "describe": "Run awaitable objects in the awsiterable concurrently.  Return an iterator of coroutines.Each coroutine returned can be awaited to get the earliest nextresult from the iterable of the remaining awaitables."
    },
    {
        "id": 153,
        "name": "int.as_integer_ratio()",
        "describe": "Return a pair of integers whose ratio is exactly equal to the originalinteger and with a positive denominator. The integer ratio of integers(whole numbers) is always the integer as the numerator and 1 as thedenominator."
    },
    {
        "id": 154,
        "name": "time.asctime()",
        "describe": "Convert a tuple or struct_time representing a time as returned bygmtime() or localtime() to a string of the followingform: 'Sun Jun 20 23:21:05 1993'. The day field is two characters longand is space padded if the day is a single digit,e.g.: 'Wed Jun  9 04:26:40 1993'."
    },
    {
        "id": 155,
        "name": "dataclasses.asdict()",
        "describe": "Converts the dataclass instance to a dict (by using thefactory function dict_factory).  Each dataclass is convertedto a dict of its fields, as name: value pairs.  dataclasses, dicts,lists, and tuples are recursed into.  For example:"
    },
    {
        "id": 156,
        "name": "math.asin()",
        "describe": "Return the arc sine of x, in radians. The result is between -pi/2 andpi/2."
    },
    {
        "id": 157,
        "name": "math.asinh()",
        "describe": "Return the inverse hyperbolic sine of x."
    },
    {
        "id": 158,
        "name": "dataclasses.astuple()",
        "describe": "Converts the dataclass instance to a tuple (by using thefactory function tuple_factory).  Each dataclass is convertedto a tuple of its field values.  dataclasses, dicts, lists, andtuples are recursed into."
    },
    {
        "id": 159,
        "name": "contextlib.asynccontextmanager()",
        "describe": "Similar to contextmanager(), but creates anasynchronous context manager."
    },
    {
        "id": 160,
        "name": "math.atan()",
        "describe": "Return the arc tangent of x, in radians. The result is between -pi/2 andpi/2."
    },
    {
        "id": 161,
        "name": "math.atan2()",
        "describe": "Return atan(y / x), in radians. The result is between -pi and pi.The vector in the plane from the origin to point (x, y) makes this anglewith the positive X axis. The point of atan2() is that the signs of bothinputs are known to it, so it can compute the correct quadrant for the angle.For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1,-1) is -3*pi/4."
    },
    {
        "id": 162,
        "name": "math.atanh()",
        "describe": "Return the inverse hyperbolic tangent of x."
    },
    {
        "id": 163,
        "name": "locale.atof()",
        "describe": "Converts a string to a floating point number, following the LC_NUMERICsettings."
    },
    {
        "id": 164,
        "name": "locale.atoi()",
        "describe": "Converts a string to an integer, following the LC_NUMERIC conventions."
    },
    {
        "id": 165,
        "name": "operator.attrgetter()",
        "describe": "Return a callable object that fetches attr from its operand.If more than one attribute is requested, returns a tuple of attributes.The attribute names can also contain dots. For example:"
    },
    {
        "id": 166,
        "name": "sys.audit()",
        "describe": "Raise an auditing event and trigger any active auditing hooks.event is a string identifying the event, and args may containoptional arguments with more information about the event.  Thenumber and types of arguments for a given event are considered apublic and stable API and should not be modified between releases."
    },
    {
        "id": 167,
        "name": "zoneinfo.available_timezones()",
        "describe": "Get a set containing all the valid keys for IANA time zones availableanywhere on the time zone path. This is recalculated on every call to thefunction."
    },
    {
        "id": 168,
        "name": "audioop.avg()",
        "describe": "Return the average over all samples in the fragment."
    },
    {
        "id": 169,
        "name": "audioop.avgpp()",
        "describe": "Return the average peak-peak value over all samples in the fragment. Nofiltering is done, so the usefulness of this routine is questionable."
    },
    {
        "id": 170,
        "name": "base64.b16decode()",
        "describe": "Decode the Base16 encoded bytes-like object or ASCII string s andreturn the decoded bytes."
    },
    {
        "id": 171,
        "name": "base64.b16encode()",
        "describe": "Encode the bytes-like object s using Base16 and return theencoded bytes."
    },
    {
        "id": 172,
        "name": "binascii.b2a_base64()",
        "describe": "Convert binary data to a line of ASCII characters in base64 coding. The returnvalue is the converted line, including a newline char if newline istrue.  The output of this function conforms to RFC 3548."
    },
    {
        "id": 173,
        "name": "binascii.b2a_hex()",
        "describe": "Return the hexadecimal representation of the binary data.  Every byte ofdata is converted into the corresponding 2-digit hex representation.  Thereturned bytes object is therefore twice as long as the length of data."
    },
    {
        "id": 174,
        "name": "binascii.b2a_hqx()",
        "describe": "Perform hexbin4 binary-to-ASCII translation and return the resulting string. Theargument should already be RLE-coded, and have a length divisible by 3 (exceptpossibly the last fragment)."
    },
    {
        "id": 175,
        "name": "binascii.b2a_qp()",
        "describe": "Convert binary data to a line(s) of ASCII characters in quoted-printableencoding.  The return value is the converted line(s). If the optional argumentquotetabs is present and true, all tabs and spaces will be encoded.   If theoptional argument istext is present and true, newlines are not encoded buttrailing whitespace will be encoded. If the optional argument header ispresent and true, spaces will be encoded as underscores per RFC 1522. If theoptional argument header is present and false, newline characters will beencoded as well; otherwise linefeed conversion might corrupt the binary datastream."
    },
    {
        "id": 176,
        "name": "binascii.b2a_uu()",
        "describe": "Convert binary data to a line of ASCII characters, the return value is theconverted line, including a newline char. The length of data should be at most45. If backtick is true, zeros are represented by '`' instead of spaces."
    },
    {
        "id": 177,
        "name": "base64.b32decode()",
        "describe": "Decode the Base32 encoded bytes-like object or ASCII string s andreturn the decoded bytes."
    },
    {
        "id": 178,
        "name": "base64.b32encode()",
        "describe": "Encode the bytes-like object s using Base32 and return theencoded bytes."
    },
    {
        "id": 179,
        "name": "base64.b64decode()",
        "describe": "Decode the Base64 encoded bytes-like object or ASCII strings and return the decoded bytes."
    },
    {
        "id": 180,
        "name": "base64.b64encode()",
        "describe": "Encode the bytes-like object s using Base64 and return the encodedbytes."
    },
    {
        "id": 181,
        "name": "base64.b85decode()",
        "describe": "Decode the base85-encoded bytes-like object or ASCII string b andreturn the decoded bytes.  Padding is implicitly removed, ifnecessary."
    },
    {
        "id": 182,
        "name": "base64.b85encode()",
        "describe": "Encode the bytes-like object b using base85 (as used in e.g.git-style binary diffs) and return the encoded bytes."
    },
    {
        "id": 183,
        "name": "turtle.back()",
        "describe": "distance \u2013 a number"
    },
    {
        "id": 184,
        "name": "codecs.backslashreplace_errors()",
        "describe": "Implements the 'backslashreplace' error handling (fortext encodings only): malformed data isreplaced by a backslashed escape sequence."
    },
    {
        "id": 185,
        "name": "turtle.backward()",
        "describe": "distance \u2013 a number"
    },
    {
        "id": 186,
        "name": "logging.basicConfig()",
        "describe": "Does basic configuration for the logging system by creating aStreamHandler with a default Formatter and adding it to theroot logger. The functions debug(), info(), warning(),error() and critical() will call basicConfig() automaticallyif no handlers are defined for the root logger."
    },
    {
        "id": 187,
        "name": "curses.baudrate()",
        "describe": "Return the output speed of the terminal in bits per second.  On softwareterminal emulators it will have a fixed high value. Included for historicalreasons; in former times, it was used to  write output loops for time delays andoccasionally to change interfaces depending on the line speed."
    },
    {
        "id": 188,
        "name": "curses.beep()",
        "describe": "Emit a short attention sound."
    },
    {
        "id": 189,
        "name": "turtle.begin_fill()",
        "describe": "To be called just before drawing a shape to be filled."
    },
    {
        "id": 190,
        "name": "turtle.begin_poly()",
        "describe": "Start recording the vertices of a polygon.  Current turtle position is firstvertex of polygon."
    },
    {
        "id": 191,
        "name": "random.betavariate()",
        "describe": "Beta distribution.  Conditions on the parameters are alpha > 0 andbeta > 0. Returned values range between 0 and 1."
    },
    {
        "id": 192,
        "name": "turtle.bgcolor()",
        "describe": "args \u2013 a color string or three numbers in the range 0..colormode or a3-tuple of such numbers"
    },
    {
        "id": 193,
        "name": "turtle.bgpic()",
        "describe": "picname \u2013 a string, name of a gif-file or \"nopic\", or None"
    },
    {
        "id": 194,
        "name": "audioop.bias()",
        "describe": "Return a fragment that is the original fragment with a bias added to eachsample.  Samples wrap around in case of overflow."
    },
    {
        "id": 195,
        "name": "unicodedata.bidirectional()",
        "describe": "Returns the bidirectional class assigned to the character chr asstring. If no such value is defined, an empty string is returned."
    },
    {
        "id": 196,
        "name": "gettext.bind_textdomain_codeset()",
        "describe": "Bind the domain to codeset, changing the encoding of byte stringsreturned by the lgettext(), ldgettext(), lngettext()and ldngettext() functions.If codeset is omitted, then the current binding is returned."
    },
    {
        "id": 197,
        "name": "gettext.bindtextdomain()",
        "describe": "Bind the domain to the locale directory localedir.  More concretely,gettext will look for binary .mo files for the given domain usingthe path (on Unix): localedir/language/LC_MESSAGES/domain.mo, wherelanguage is searched for in the environment variables LANGUAGE,LC_ALL, LC_MESSAGES, and LANG respectively."
    },
    {
        "id": 198,
        "name": "binhex.binhex()",
        "describe": "Convert a binary file with filename input to binhex file output. Theoutput parameter can either be a filename or a file-like object (any objectsupporting a write() and close() method)."
    },
    {
        "id": 199,
        "name": "bisect.bisect()",
        "describe": "Similar to bisect_left(), but returns an insertion point which comesafter (to the right of) any existing entries of x in a."
    },
    {
        "id": 200,
        "name": "bisect.bisect_left()",
        "describe": "Locate the insertion point for x in a to maintain sorted order.The parameters lo and hi may be used to specify a subset of the listwhich should be considered; by default the entire list is used.  If x isalready present in a, the insertion point will be before (to the left of)any existing entries.  The return value is suitable for use as the firstparameter to list.insert() assuming that a is already sorted."
    },
    {
        "id": 201,
        "name": "bisect.bisect_right()",
        "describe": "Similar to bisect_left(), but returns an insertion point which comesafter (to the right of) any existing entries of x in a."
    },
    {
        "id": 202,
        "name": "int.bit_length()",
        "describe": "Return the number of bits necessary to represent an integer in binary,excluding the sign and leading zeros:"
    },
    {
        "id": 203,
        "name": "turtle.bk()",
        "describe": "distance \u2013 a number"
    },
    {
        "id": 204,
        "name": "ensurepip.bootstrap()",
        "describe": "Bootstraps pip into the current or designated environment."
    },
    {
        "id": 205,
        "name": "sys.breakpointhook()",
        "describe": "This hook function is called by built-in breakpoint().  By default,it drops you into the pdb debugger, but it can be set to any otherfunction so that you can choose which debugger gets used."
    },
    {
        "id": 206,
        "name": "turtle.bye()",
        "describe": "Shut the turtlegraphics window."
    },
    {
        "id": 207,
        "name": "ctypes.byref()",
        "describe": "Returns a light-weight pointer to obj, which must be an instance of actypes type.  offset defaults to zero, and must be an integer that will beadded to the internal pointer value."
    },
    {
        "id": 208,
        "name": "audioop.byteswap()",
        "describe": "\u201cByteswap\u201d all samples in a fragment and returns the modified fragment.Converts big-endian samples to little-endian and vice versa."
    },
    {
        "id": 209,
        "name": "functools.cache()",
        "describe": "Simple lightweight unbounded function cache.  Sometimes called\u201cmemoize\u201d."
    },
    {
        "id": 210,
        "name": "imp.cache_from_source()",
        "describe": "Return the PEP 3147 path to the byte-compiled file associated with thesource path.  For example, if path is /foo/bar/baz.py the returnvalue would be /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2.The cpython-32 string comes from the current magic tag (seeget_tag(); if sys.implementation.cache_tag is not defined thenNotImplementedError will be raised). By passing in True orFalse for debug_override you can override the system\u2019s value for__debug__, leading to optimized bytecode."
    },
    {
        "id": 211,
        "name": "functools.cached_property()",
        "describe": "Transform a method of a class into a property whose value is computed onceand then cached as a normal attribute for the life of the instance. Similarto property(), with the addition of caching. Useful for expensivecomputed properties of instances that are otherwise effectively immutable."
    },
    {
        "id": 212,
        "name": "struct.calcsize()",
        "describe": "Return the size of the struct (and hence of the bytes object produced bypack(format, ...)) corresponding to the format string format."
    },
    {
        "id": 213,
        "name": "calendar.calendar()",
        "describe": "Returns a 3-column calendar for an entire year as a multi-line string usingthe formatyear() of the TextCalendar class."
    },
    {
        "id": 214,
        "name": "subprocess.call()",
        "describe": "Run the command described by args.  Wait for command to complete, thenreturn the returncode attribute."
    },
    {
        "id": 215,
        "name": "sys.call_tracing()",
        "describe": "Call func(*args), while tracing is enabled.  The tracing state is saved,and restored afterwards.  This is intended to be called from a debugger froma checkpoint, to recursively debug some other code."
    },
    {
        "id": 216,
        "name": "curses.can_change_color()",
        "describe": "Return True or False, depending on whether the programmer can change the colorsdisplayed by the terminal."
    },
    {
        "id": 217,
        "name": "faulthandler.cancel_dump_traceback_later()",
        "describe": "Cancel the last call to dump_traceback_later()."
    },
    {
        "id": 218,
        "name": "str.capitalize()",
        "describe": "Return a copy of the string with its first character capitalized and therest lowercased."
    },
    {
        "id": 219,
        "name": "logging.captureWarnings()",
        "describe": "This function is used to turn the capture of warnings by logging on andoff."
    },
    {
        "id": 220,
        "name": "string.capwords()",
        "describe": "Split the argument into words using str.split(), capitalize each wordusing str.capitalize(), and join the capitalized words usingstr.join().  If the optional second argument sep is absentor None, runs of whitespace characters are replaced by a single spaceand leading and trailing whitespace are removed, otherwise sep is used tosplit and join the words."
    },
    {
        "id": 221,
        "name": "str.casefold()",
        "describe": "Return a casefolded copy of the string. Casefolded strings may be used forcaseless matching."
    },
    {
        "id": 222,
        "name": "typing.cast()",
        "describe": "Cast a value to a type."
    },
    {
        "id": 223,
        "name": "nis.cat()",
        "describe": "Return a dictionary mapping key to value such that match(key,mapname)==value. Note that both keys and values of the dictionary arearbitrary arrays of bytes."
    },
    {
        "id": 224,
        "name": "unicodedata.category()",
        "describe": "Returns the general category assigned to the character chr asstring."
    },
    {
        "id": 225,
        "name": "curses.cbreak()",
        "describe": "Enter cbreak mode.  In cbreak mode (sometimes called \u201crare\u201d mode) normal ttyline buffering is turned off and characters are available to be read one by one.However, unlike raw mode, special characters (interrupt, quit, suspend, and flowcontrol) retain their effects on the tty driver and calling program.  Callingfirst raw() then cbreak() leaves the terminal in cbreak mode."
    },
    {
        "id": 226,
        "name": "math.ceil()",
        "describe": "Return the ceiling of x, the smallest integer greater than or equal to x.If x is not a float, delegates to x.__ceil__(), which should return anIntegral value."
    },
    {
        "id": 227,
        "name": "str.center()",
        "describe": "Return centered in a string of length width. Padding is done using thespecified fillchar (default is an ASCII space). The original string isreturned if width is less than or equal to len(s)."
    },
    {
        "id": 228,
        "name": "ssl.cert_time_to_seconds()",
        "describe": "Return the time in seconds since the Epoch, given the cert_timestring representing the \u201cnotBefore\u201d or \u201cnotAfter\u201d date from acertificate in \"%b %d %H:%M:%S %Y %Z\" strptime format (Clocale)."
    },
    {
        "id": 229,
        "name": "itertools.chain()",
        "describe": "Make an iterator that returns elements from the first iterable until it isexhausted, then proceeds to the next iterable, until all of the iterables areexhausted.  Used for treating consecutive sequences as a single sequence.Roughly equivalent to:"
    },
    {
        "id": 230,
        "name": "os.chdir()",
        "describe": "Change the current working directory to path."
    },
    {
        "id": 231,
        "name": "tabnanny.check()",
        "describe": "If file_or_dir is a directory and not a symbolic link, then recursivelydescend the directory tree named by file_or_dir, checking all .pyfiles along the way.  If file_or_dir is an ordinary Python source file, itis checked for whitespace related problems.  The diagnostic messages arewritten to standard output using the print() function."
    },
    {
        "id": 232,
        "name": "subprocess.check_call()",
        "describe": "Run command with arguments.  Wait for command to complete. If the returncode was zero then return, otherwise raise CalledProcessError. TheCalledProcessError object will have the return code in thereturncode attribute."
    },
    {
        "id": 233,
        "name": "subprocess.check_output()",
        "describe": "Run command with arguments and return its output."
    },
    {
        "id": 234,
        "name": "linecache.checkcache()",
        "describe": "Check the cache for validity.  Use this function if files in the cache  may havechanged on disk, and you require the updated version.  If filename is omitted,it will check all the entries in the cache."
    },
    {
        "id": 235,
        "name": "bdb.checkfuncname()",
        "describe": "Check whether we should break here, depending on the way the breakpoint bwas set."
    },
    {
        "id": 236,
        "name": "os.chflags()",
        "describe": "Set the flags of path to the numeric flags. flags may take a combination(bitwise OR) of the following values (as defined in the stat module):"
    },
    {
        "id": 237,
        "name": "window.chgat()",
        "describe": "Set the attributes of num characters at the current cursor position, or atposition (y, x) if supplied. If num is not given or is -1,the attribute will be set on all the characters to the end of the line.  Thisfunction moves cursor to position (y, x) if supplied. The changed linewill be touched using the touchline() method so that the contents willbe redisplayed by the next window refresh."
    },
    {
        "id": 238,
        "name": "os.chmod()",
        "describe": "Change the mode of path to the numeric mode. mode may take one of thefollowing values (as defined in the stat module) or bitwise ORedcombinations of them:"
    },
    {
        "id": 239,
        "name": "random.choice()",
        "describe": "Return a random element from the non-empty sequence seq. If seq is empty,raises IndexError."
    },
    {
        "id": 240,
        "name": "random.choices()",
        "describe": "Return a k sized list of elements chosen from the population with replacement.If the population is empty, raises IndexError."
    },
    {
        "id": 241,
        "name": "shutil.chown()",
        "describe": "Change owner user and/or group of the given path."
    },
    {
        "id": 242,
        "name": "os.chroot()",
        "describe": "Change the root directory of the current process to path."
    },
    {
        "id": 243,
        "name": "turtle.circle()",
        "describe": "radius \u2013 a number"
    },
    {
        "id": 244,
        "name": "inspect.cleandoc()",
        "describe": "Clean up indentation from docstrings that are indented to line up with blocksof code."
    },
    {
        "id": 245,
        "name": "turtle.clear()",
        "describe": "Delete all drawings and all turtles from the TurtleScreen.  Reset the nowempty TurtleScreen to its initial state: white background, no backgroundimage, no event bindings and tracing on."
    },
    {
        "id": 246,
        "name": "filecmp.clear_cache()",
        "describe": "Clear the filecmp cache. This may be useful if a file is compared so quicklyafter it is modified that it is within the mtime resolution ofthe underlying filesystem."
    },
    {
        "id": 247,
        "name": "traceback.clear_frames()",
        "describe": "Clears the local variables of all the stack frames in a traceback tbby calling the clear() method of each frame object."
    },
    {
        "id": 248,
        "name": "readline.clear_history()",
        "describe": "Clear the current history.  This calls clear_history() in theunderlying library.  The Python function only exists if Python wascompiled for a version of the library that supports it."
    },
    {
        "id": 249,
        "name": "linecache.clearcache()",
        "describe": "Clear the cache.  Use this function if you no longer need lines from filespreviously read using getline()."
    },
    {
        "id": 250,
        "name": "turtle.clearscreen()",
        "describe": "Delete all drawings and all turtles from the TurtleScreen.  Reset the nowempty TurtleScreen to its initial state: white background, no backgroundimage, no event bindings and tracing on."
    },
    {
        "id": 251,
        "name": "turtle.clearstamp()",
        "describe": "stampid \u2013 an integer, must be return value of previousstamp() call"
    },
    {
        "id": 252,
        "name": "turtle.clearstamps()",
        "describe": "n \u2013 an integer (or None)"
    },
    {
        "id": 253,
        "name": "time.clock_getres()",
        "describe": "Return the resolution (precision) of the specified clock clk_id.  Refer toClock ID Constants for a list of accepted values for clk_id."
    },
    {
        "id": 254,
        "name": "time.clock_gettime()",
        "describe": "Return the time of the specified clock clk_id.  Refer toClock ID Constants for a list of accepted values for clk_id."
    },
    {
        "id": 255,
        "name": "time.clock_gettime_ns()",
        "describe": "Similar to clock_gettime() but return time as nanoseconds."
    },
    {
        "id": 256,
        "name": "time.clock_settime()",
        "describe": "Set the time of the specified clock clk_id.  Currently,CLOCK_REALTIME is the only accepted value for clk_id."
    },
    {
        "id": 257,
        "name": "time.clock_settime_ns()",
        "describe": "Similar to clock_settime() but set time with nanoseconds."
    },
    {
        "id": 258,
        "name": "turtle.clone()",
        "describe": "Create and return a clone of the turtle with same position, heading andturtle properties."
    },
    {
        "id": 259,
        "name": "syslog.closelog()",
        "describe": "Reset the syslog module values and call the system library closelog()."
    },
    {
        "id": 260,
        "name": "os.closerange()",
        "describe": "Close all file descriptors from fd_low (inclusive) to fd_high (exclusive),ignoring errors. Equivalent to (but much faster than):"
    },
    {
        "id": 261,
        "name": "contextlib.closing()",
        "describe": "Return a context manager that closes thing upon completion of the block.  Thisis basically equivalent to:"
    },
    {
        "id": 262,
        "name": "filecmp.cmp()",
        "describe": "Compare the files named f1 and f2, returning True if they seem equal,False otherwise."
    },
    {
        "id": 263,
        "name": "functools.cmp_to_key()",
        "describe": "Transform an old-style comparison function to a key function.  Usedwith tools that accept key functions (such as sorted(), min(),max(), heapq.nlargest(), heapq.nsmallest(),itertools.groupby()).  This function is primarily used as a transitiontool for programs being converted from Python 2 which supported the use ofcomparison functions."
    },
    {
        "id": 264,
        "name": "filecmp.cmpfiles()",
        "describe": "Compare the files in the two directories dir1 and dir2 whose names aregiven by common."
    },
    {
        "id": 265,
        "name": "dis.code_info()",
        "describe": "Return a formatted multi-line string with detailed code object informationfor the supplied function, generator, asynchronous generator, coroutine,method, source code string or code object."
    },
    {
        "id": 266,
        "name": "ipaddress.collapse_addresses()",
        "describe": "Return an iterator of the collapsed IPv4Network orIPv6Network objects.  addresses is an iterator ofIPv4Network or IPv6Network objects.  A TypeError israised if addresses contains mixed version objects."
    },
    {
        "id": 267,
        "name": "turtle.color()",
        "describe": "Return or set pencolor and fillcolor."
    },
    {
        "id": 268,
        "name": "curses.color_content()",
        "describe": "Return the intensity of the red, green, and blue (RGB) components in the colorcolor_number, which must be between 0 and COLORS - 1.  Return a 3-tuple,containing the R,G,B values for the given color, which will be between0 (no component) and 1000 (maximum amount of component)."
    },
    {
        "id": 269,
        "name": "curses.color_pair()",
        "describe": "Return the attribute value for displaying text in the specified color pair.Only the first 256 color pairs are supported. Thisattribute value can be combined with A_STANDOUT, A_REVERSE,and the other A_* attributes.  pair_number() is the counterpartto this function."
    },
    {
        "id": 270,
        "name": "turtle.colormode()",
        "describe": "cmode \u2013 one of the values 1.0 or 255"
    },
    {
        "id": 271,
        "name": "math.comb()",
        "describe": "Return the number of ways to choose k items from n items without repetitionand without order."
    },
    {
        "id": 272,
        "name": "itertools.combinations()",
        "describe": "Return r length subsequences of elements from the input iterable."
    },
    {
        "id": 273,
        "name": "itertools.combinations_with_replacement()",
        "describe": "Return r length subsequences of elements from the input iterableallowing individual elements to be repeated more than once."
    },
    {
        "id": 274,
        "name": "unicodedata.combining()",
        "describe": "Returns the canonical combining class assigned to the character chras integer. Returns 0 if no combining class is defined."
    },
    {
        "id": 275,
        "name": "re.compile()",
        "describe": "Compile a regular expression pattern into a regular expression object, which can be used for matching using itsmatch(), search() and other methods, describedbelow."
    },
    {
        "id": 276,
        "name": "codeop.compile_command()",
        "describe": "Tries to compile source, which should be a string of Python code and return acode object if source is valid Python code. In that case, the filenameattribute of the code object will be filename, which defaults to'<input>'. Returns None if source is not valid Python code, but is aprefix of valid Python code."
    },
    {
        "id": 277,
        "name": "compileall.compile_dir()",
        "describe": "Recursively descend the directory tree named by dir, compiling all .pyfiles along the way. Return a true value if all the files compiled successfully,and a false value otherwise."
    },
    {
        "id": 278,
        "name": "compileall.compile_file()",
        "describe": "Compile the file with path fullname. Return a true value if the filecompiled successfully, and a false value otherwise."
    },
    {
        "id": 279,
        "name": "compileall.compile_path()",
        "describe": "Byte-compile all the .py files found along sys.path. Return atrue value if all the files compiled successfully, and a false value otherwise."
    },
    {
        "id": 280,
        "name": "parser.compilest()",
        "describe": "The Python byte compiler can be invoked on an ST object to produce code objectswhich can be used as part of a call to the built-in exec() or eval()functions. This function provides the interface to the compiler, passing theinternal parse tree from st to the parser, using the source file namespecified by the filename parameter. The default value supplied for filenameindicates that the source was an ST object."
    },
    {
        "id": 281,
        "name": "sqlite3.complete_statement()",
        "describe": "Returns True if the string sql contains one or more complete SQLstatements terminated by semicolons. It does not verify that the SQL issyntactically correct, only that there are no unclosed string literals and thestatement is terminated by a semicolon."
    },
    {
        "id": 282,
        "name": "gzip.compress()",
        "describe": "Compress the data, returning a bytes object containingthe compressed data.  compresslevel and mtime have the same meaning as inthe GzipFile constructor above."
    },
    {
        "id": 283,
        "name": "zlib.compressobj()",
        "describe": "Returns a compression object, to be used for compressing data streams that won\u2019tfit into memory at once."
    },
    {
        "id": 284,
        "name": "operator.concat()",
        "describe": "Return a + b for a and b sequences."
    },
    {
        "id": 285,
        "name": "os.confstr()",
        "describe": "Return string-valued system configuration values. name specifies theconfiguration value to retrieve; it may be a string which is the name of adefined system value; these names are specified in a number of standards (POSIX,Unix 95, Unix 98, and others).  Some platforms define additional names as well.The names known to the host operating system are given as the keys of theconfstr_names dictionary.  For configuration variables not included in thatmapping, passing an integer for name is also accepted."
    },
    {
        "id": 286,
        "name": "sqlite3.connect()",
        "describe": "Opens a connection to the SQLite database file database. By default returns aConnection object, unless a custom factory is given."
    },
    {
        "id": 287,
        "name": "copyreg.constructor()",
        "describe": "Declares object to be a valid constructor.  If object is not callable (andhence not valid as a constructor), raises TypeError."
    },
    {
        "id": 288,
        "name": "operator.contains()",
        "describe": "Return the outcome of the test b in a. Note the reversed operands."
    },
    {
        "id": 289,
        "name": "difflib.context_diff()",
        "describe": "Compare a and b (lists of strings); return a delta (a generatorgenerating the delta lines) in context diff format."
    },
    {
        "id": 290,
        "name": "contextlib.contextmanager()",
        "describe": "This function is a decorator that can be used to define a factoryfunction for with statement context managers, without needing tocreate a class or separate __enter__() and __exit__() methods."
    },
    {
        "id": 291,
        "name": "shutil.copy2()",
        "describe": "Identical to copy() except that copy2()also attempts to preserve file metadata."
    },
    {
        "id": 292,
        "name": "contextvars.copy_context()",
        "describe": "Returns a copy of the current Context object."
    },
    {
        "id": 293,
        "name": "os.copy_file_range()",
        "describe": "Copy count bytes from file descriptor src, starting from offsetoffset_src, to file descriptor dst, starting from offset offset_dst.If offset_src is None, then src is read from the current position;respectively for offset_dst. The files pointed by src and dstmust reside in the same filesystem, otherwise an OSError israised with errno set to errno.EXDEV."
    },
    {
        "id": 294,
        "name": "ast.copy_location()",
        "describe": "Copy source location (lineno, col_offset, end_lineno,and end_col_offset) from old_node to new_node if possible,and return new_node."
    },
    {
        "id": 295,
        "name": "shutil.copyfile()",
        "describe": "Copy the contents (no metadata) of the file named src to a file nameddst and return dst in the most efficient way possible.src and dst are path-like objects or path names given as strings."
    },
    {
        "id": 296,
        "name": "shutil.copyfileobj()",
        "describe": "Copy the contents of the file-like object fsrc to the file-like object fdst.The integer length, if given, is the buffer size. In particular, a negativelength value means to copy the data without looping over the source data inchunks; by default the data is read in chunks to avoid uncontrolled memoryconsumption. Note that if the current file position of the fsrc object is not0, only the contents from the current file position to the end of the file willbe copied."
    },
    {
        "id": 297,
        "name": "shutil.copymode()",
        "describe": "Copy the permission bits from src to dst.  The file contents, owner, andgroup are unaffected.  src and dst are path-like objects or path namesgiven as strings.If follow_symlinks is false, and both src and dst are symbolic links,copymode() will attempt to modify the mode of dst itself (ratherthan the file it points to).  This functionality is not available on everyplatform; please see copystat() for more information.  Ifcopymode() cannot modify symbolic links on the local platform, and itis asked to do so, it will do nothing and return."
    },
    {
        "id": 298,
        "name": "math.copysign()",
        "describe": "Return a float with the magnitude (absolute value) of x but the sign ofy.  On platforms that support signed zeros, copysign(1.0, -0.0)returns -1.0."
    },
    {
        "id": 299,
        "name": "shutil.copystat()",
        "describe": "Copy the permission bits, last access time, last modification time, andflags from src to dst.  On Linux, copystat() also copies the\u201cextended attributes\u201d where possible.  The file contents, owner, andgroup are unaffected.  src and dst are path-like objects or pathnames given as strings."
    },
    {
        "id": 300,
        "name": "shutil.copytree()",
        "describe": "Recursively copy an entire directory tree rooted at src to a directorynamed dst and return the destination directory. dirs_exist_ok dictateswhether to raise an exception in case dst or any missing parent directoryalready exists."
    },
    {
        "id": 301,
        "name": "asyncio.coroutine()",
        "describe": "Decorator to mark generator-based coroutines."
    },
    {
        "id": 302,
        "name": "math.cos()",
        "describe": "Return the cosine of x radians."
    },
    {
        "id": 303,
        "name": "math.cosh()",
        "describe": "Return the hyperbolic cosine of x."
    },
    {
        "id": 304,
        "name": "itertools.count()",
        "describe": "Make an iterator that returns evenly spaced values starting with number start. Oftenused as an argument to map() to generate consecutive data points.Also, used with zip() to add sequence numbers.  Roughly equivalent to:"
    },
    {
        "id": 305,
        "name": "operator.countOf()",
        "describe": "Return the number of occurrences of b in a."
    },
    {
        "id": 306,
        "name": "multiprocessing.cpu_count()",
        "describe": "Return the number of CPUs in the system."
    },
    {
        "id": 307,
        "name": "binascii.crc32()",
        "describe": "Compute CRC-32, the 32-bit checksum of data, starting with aninitial CRC of value.  The default initial CRC is zero.  The algorithmis consistent with the ZIP file checksum.  Since the algorithm is designed foruse as a checksum algorithm, it is not suitable for use as a general hashalgorithm.  Use as follows:"
    },
    {
        "id": 308,
        "name": "binascii.crc_hqx()",
        "describe": "Compute a 16-bit CRC value of data, starting with value as theinitial CRC, and return the result.  This uses the CRC-CCITT polynomialx16 + x12 + x5 + 1, often represented as0x1021.  This CRC is used in the binhex4 format."
    },
    {
        "id": 309,
        "name": "venv.create()",
        "describe": "Create an EnvBuilder with the given keyword arguments, and call itscreate() method with the env_dir argument."
    },
    {
        "id": 310,
        "name": "zipapp.create_archive()",
        "describe": "Create an application archive from source.  The source can be anyof the following:"
    },
    {
        "id": 311,
        "name": "socket.create_connection()",
        "describe": "Connect to a TCP service listening on the Internet address (a 2-tuple(host, port)), and return the socket object.  This is a higher-levelfunction than socket.connect(): if host is a non-numeric hostname,it will try to resolve it for both AF_INET and AF_INET6,and then try to connect to all possible addresses in turn until aconnection succeeds.  This makes it easy to write clients that arecompatible to both IPv4 and IPv6."
    },
    {
        "id": 312,
        "name": "ssl.create_default_context()",
        "describe": "Return a new SSLContext object with default settings forthe given purpose.  The settings are chosen by the ssl module,and usually represent a higher security level than when calling theSSLContext constructor directly."
    },
    {
        "id": 313,
        "name": "socket.create_server()",
        "describe": "Convenience function which creates a TCP socket bound to address (a 2-tuple(host, port)) and return the socket object."
    },
    {
        "id": 314,
        "name": "ctypes.create_string_buffer()",
        "describe": "This function creates a mutable character buffer. The returned object is actypes array of c_char."
    },
    {
        "id": 315,
        "name": "asyncio.create_subprocess_exec()",
        "describe": "Create a subprocess."
    },
    {
        "id": 316,
        "name": "asyncio.create_subprocess_shell()",
        "describe": "Run the cmd shell command."
    },
    {
        "id": 317,
        "name": "asyncio.create_task()",
        "describe": "Wrap the coro coroutine into a Taskand schedule its execution.  Return the Task object."
    },
    {
        "id": 318,
        "name": "ctypes.create_unicode_buffer()",
        "describe": "This function creates a mutable unicode character buffer. The returned object isa ctypes array of c_wchar."
    },
    {
        "id": 319,
        "name": "logging.critical()",
        "describe": "Logs a message with level CRITICAL on the root logger. The argumentsare interpreted as for debug()."
    },
    {
        "id": 320,
        "name": "audioop.cross()",
        "describe": "Return the number of zero crossings in the fragment passed as an argument."
    },
    {
        "id": 321,
        "name": "crypt.crypt()",
        "describe": "word will usually be a user\u2019s password as typed at a prompt or  in a graphicalinterface.  The optional salt is either a string as returned frommksalt(), one of the crypt.METHOD_* values (though not allmay be available on all platforms), or a full encrypted passwordincluding salt, as returned by this function.  If salt is notprovided, the strongest method will be used (as returned bymethods())."
    },
    {
        "id": 322,
        "name": "os.ctermid()",
        "describe": "Return the filename corresponding to the controlling terminal of the process."
    },
    {
        "id": 323,
        "name": "time.ctime()",
        "describe": "Convert a time expressed in seconds since the epoch to a string of a form:'Sun Jun 20 23:21:05 1993' representing local time. The day fieldis two characters long and is space padded if the day is a single digit,e.g.: 'Wed Jun  9 04:26:40 1993'."
    },
    {
        "id": 324,
        "name": "locale.currency()",
        "describe": "Formats a number val according to the current LC_MONETARY settings."
    },
    {
        "id": 325,
        "name": "multiprocessing.current_process()",
        "describe": "Return the Process object corresponding to the current process."
    },
    {
        "id": 326,
        "name": "asyncio.current_task()",
        "describe": "Return the currently running Task instance, or None ifno task is running."
    },
    {
        "id": 327,
        "name": "threading.current_thread()",
        "describe": "Return the current Thread object, corresponding to the caller\u2019s threadof control.  If the caller\u2019s thread of control was not created through thethreading module, a dummy thread object with limited functionality isreturned."
    },
    {
        "id": 328,
        "name": "inspect.currentframe()",
        "describe": "Return the frame object for the caller\u2019s stack frame."
    },
    {
        "id": 329,
        "name": "curses.curs_set()",
        "describe": "Set the cursor state.  visibility can be set to 0, 1, or 2, for invisible,normal, or very visible.  If the terminal supports the visibility requested, return theprevious cursor state; otherwise raise an exception.  On manyterminals, the \u201cvisible\u201d mode is an underline cursor and the \u201cvery visible\u201d modeis a block cursor."
    },
    {
        "id": 330,
        "name": "itertools.cycle()",
        "describe": "Make an iterator returning elements from the iterable and saving a copy of each.When the iterable is exhausted, return elements from the saved copy.  Repeatsindefinitely.  Roughly equivalent to:"
    },
    {
        "id": 331,
        "name": "dataclasses.dataclass()",
        "describe": "This function is a decorator that is used to add generatedspecial methods to classes, as described below."
    },
    {
        "id": 332,
        "name": "doctest.debug()",
        "describe": "Debug the doctests for an object."
    },
    {
        "id": 333,
        "name": "doctest.debug_src()",
        "describe": "Debug the doctests in a string."
    },
    {
        "id": 334,
        "name": "unicodedata.decimal()",
        "describe": "Returns the decimal value assigned to the character chr as integer.If no such value is defined, default is returned, or, if not given,ValueError is raised."
    },
    {
        "id": 335,
        "name": "nntplib.decode_header()",
        "describe": "Decode a header value, un-escaping any escaped non-ASCII characters.header_str must be a str object.  The unescaped value isreturned.  Using this function is recommended to display some headersin a human readable form:"
    },
    {
        "id": 336,
        "name": "base64.decodebytes()",
        "describe": "Decode the bytes-like object s, which must contain one or morelines of base64 encoded data, and return the decoded bytes."
    },
    {
        "id": 337,
        "name": "quopri.decodestring()",
        "describe": "Like decode(), except that it accepts a source bytes andreturns the corresponding decoded bytes."
    },
    {
        "id": 338,
        "name": "unicodedata.decomposition()",
        "describe": "Returns the character decomposition mapping assigned to the characterchr as string. An empty string is returned in case no such mapping isdefined."
    },
    {
        "id": 339,
        "name": "gzip.decompress()",
        "describe": "Decompress the data, returning a bytes object containing theuncompressed data."
    },
    {
        "id": 340,
        "name": "zlib.decompressobj()",
        "describe": "Returns a decompression object, to be used for decompressing data streams thatwon\u2019t fit into memory at once."
    },
    {
        "id": 341,
        "name": "textwrap.dedent()",
        "describe": "Remove any common leading whitespace from every line in text."
    },
    {
        "id": 342,
        "name": "copy.deepcopy()",
        "describe": "Return a deep copy of x."
    },
    {
        "id": 343,
        "name": "curses.def_prog_mode()",
        "describe": "Save the current terminal mode as the \u201cprogram\u201d mode, the mode when the runningprogram is using curses.  (Its counterpart is the \u201cshell\u201d mode, for when theprogram is not in curses.)  Subsequent calls to reset_prog_mode() willrestore this mode."
    },
    {
        "id": 344,
        "name": "curses.def_shell_mode()",
        "describe": "Save the current terminal mode as the \u201cshell\u201d mode, the mode when the runningprogram is not using curses.  (Its counterpart is the \u201cprogram\u201d mode, when theprogram is using curses capabilities.) Subsequent calls toreset_shell_mode() will restore this mode."
    },
    {
        "id": 345,
        "name": "timeit.default_timer()",
        "describe": "The default timer, which is always time.perf_counter()."
    },
    {
        "id": 346,
        "name": "turtle.degrees()",
        "describe": "fullcircle \u2013 a number"
    },
    {
        "id": 347,
        "name": "turtle.delay()",
        "describe": "delay \u2013 positive integer"
    },
    {
        "id": 348,
        "name": "curses.delay_output()",
        "describe": "Insert an ms millisecond pause in output."
    },
    {
        "id": 349,
        "name": "operator.delitem()",
        "describe": "Remove the value of a at index b."
    },
    {
        "id": 350,
        "name": "locale.delocalize()",
        "describe": "Converts a string into a normalized number string, following theLC_NUMERIC settings."
    },
    {
        "id": 351,
        "name": "window.derwin()",
        "describe": "An abbreviation for \u201cderive window\u201d, derwin() is the same as callingsubwin(), except that begin_y and begin_x are relative to the originof the window, rather than relative to the entire screen.  Return a windowobject for the derived window."
    },
    {
        "id": 352,
        "name": "tokenize.detect_encoding()",
        "describe": "The detect_encoding() function is used to detect the encoding thatshould be used to decode a Python source file. It requires one argument,readline, in the same way as the tokenize() generator."
    },
    {
        "id": 353,
        "name": "os.device_encoding()",
        "describe": "Return a string describing the encoding of the device associated with fdif it is connected to a terminal; else return None."
    },
    {
        "id": 354,
        "name": "select.devpoll()",
        "describe": "(Only supported on Solaris and derivatives.)  Returns a /dev/pollpolling object; see section /dev/poll Polling Objects below for themethods supported by devpoll objects."
    },
    {
        "id": 355,
        "name": "gettext.dgettext()",
        "describe": "Like gettext(), but look the message up in the specified domain."
    },
    {
        "id": 356,
        "name": "difflib.diff_bytes()",
        "describe": "Compare a and b (lists of bytes objects) using dfunc; yield asequence of delta lines (also bytes) in the format returned by dfunc.dfunc must be a callable, typically either unified_diff() orcontext_diff()."
    },
    {
        "id": 357,
        "name": "frozenset.difference()",
        "describe": "Return a new set with elements in the set that are not in the others."
    },
    {
        "id": 358,
        "name": "frozenset.difference_update()",
        "describe": "Update the set, removing elements found in others."
    },
    {
        "id": 359,
        "name": "unicodedata.digit()",
        "describe": "Returns the digit value assigned to the character chr as integer.If no such value is defined, default is returned, or, if not given,ValueError is raised."
    },
    {
        "id": 360,
        "name": "pickletools.dis()",
        "describe": "Outputs a symbolic disassembly of the pickle to the file-likeobject out, defaulting to sys.stdout.  pickle can be astring or a file-like object.  memo can be a Python dictionarythat will be used as the pickle\u2019s memo; it can be used to performdisassemblies across multiple pickles created by the samepickler. Successive levels, indicated by MARK opcodes in thestream, are indented by indentlevel spaces.  If a nonzero valueis given to annotate, each opcode in the output is annotated witha short description.  The value of annotate is used as a hint forthe column where annotation should start."
    },
    {
        "id": 361,
        "name": "dis.disassemble()",
        "describe": "Disassemble a code object, indicating the last instruction if lasti wasprovided.  The output is divided in the following columns:"
    },
    {
        "id": 362,
        "name": "frozenset.discard()",
        "describe": "Remove element elem from the set if it is present."
    },
    {
        "id": 363,
        "name": "dis.disco()",
        "describe": "Disassemble a code object, indicating the last instruction if lasti wasprovided.  The output is divided in the following columns:"
    },
    {
        "id": 364,
        "name": "shutil.disk_usage()",
        "describe": "Return disk usage statistics about the given path as a named tuplewith the attributes total, used and free, which are the amount oftotal, used and free space, in bytes. path may be a file or adirectory."
    },
    {
        "id": 365,
        "name": "sys.displayhook()",
        "describe": "If value is not None, this function prints repr(value) tosys.stdout, and saves value in builtins._. If repr(value) isnot encodable to sys.stdout.encoding with sys.stdout.errors errorhandler (which is probably 'strict'), encode it tosys.stdout.encoding with 'backslashreplace' error handler."
    },
    {
        "id": 366,
        "name": "math.dist()",
        "describe": "Return the Euclidean distance between two points p and q, eachgiven as a sequence (or iterable) of coordinates.  The two pointsmust have the same dimension."
    },
    {
        "id": 367,
        "name": "turtle.distance()",
        "describe": "x \u2013 a number or a pair/vector of numbers or a turtle instance"
    },
    {
        "id": 368,
        "name": "dis.distb()",
        "describe": "Disassemble the top-of-stack function of a traceback, using the lasttraceback if none was passed.  The instruction causing the exception isindicated."
    },
    {
        "id": 369,
        "name": "gettext.dngettext()",
        "describe": "Like ngettext(), but look the message up in the specified domain."
    },
    {
        "id": 370,
        "name": "gettext.dnpgettext()",
        "describe": "Similar to the corresponding functions without the p in the prefix (thatis, gettext(), dgettext(), ngettext(), dngettext()),but the translation is restricted to the given message context."
    },
    {
        "id": 371,
        "name": "unittest.doModuleCleanups()",
        "describe": "This function is called unconditionally after tearDownModule(), orafter setUpModule() if setUpModule() raises an exception."
    },
    {
        "id": 372,
        "name": "turtle.done()",
        "describe": "Starts event loop - calling Tkinter\u2019s mainloop function.Must be the last statement in a turtle graphics program.Must not be used if a script is run from within IDLE in -n mode(No subprocess) - for interactive use of turtle graphics."
    },
    {
        "id": 373,
        "name": "turtle.dot()",
        "describe": "size \u2013 an integer >= 1 (if given)"
    },
    {
        "id": 374,
        "name": "curses.doupdate()",
        "describe": "Update the physical screen.  The curses library keeps two data structures, onerepresenting the current physical screen contents and a virtual screenrepresenting the desired next state.  The doupdate() ground updates thephysical screen to match the virtual screen."
    },
    {
        "id": 375,
        "name": "turtle.down()",
        "describe": "Pull the pen down \u2013 drawing when moving."
    },
    {
        "id": 376,
        "name": "itertools.dropwhile()",
        "describe": "Make an iterator that drops elements from the iterable as long as the predicateis true; afterwards, returns every element.  Note, the iterator does not produceany output until the predicate first becomes false, so it may have a lengthystart-up time.  Roughly equivalent to:"
    },
    {
        "id": 377,
        "name": "faulthandler.dump_traceback()",
        "describe": "Dump the tracebacks of all threads into file. If all_threads isFalse, dump only the current thread."
    },
    {
        "id": 378,
        "name": "faulthandler.dump_traceback_later()",
        "describe": "Dump the tracebacks of all threads, after a timeout of timeout seconds, orevery timeout seconds if repeat is True.  If exit is True, call_exit() with status=1 after dumping the tracebacks.  (Note_exit() exits the process immediately, which means it doesn\u2019t do anycleanup like flushing file buffers.) If the function is called twice, the newcall replaces previous parameters and resets the timeout. The timer has asub-second resolution."
    },
    {
        "id": 379,
        "name": "os.dup()",
        "describe": "Return a duplicate of file descriptor fd. The new file descriptor isnon-inheritable."
    },
    {
        "id": 380,
        "name": "os.dup2()",
        "describe": "Duplicate file descriptor fd to fd2, closing the latter first ifnecessary. Return fd2. The new file descriptor is inheritable by default or non-inheritable if inheritableis False."
    },
    {
        "id": 381,
        "name": "unicodedata.east_asian_width()",
        "describe": "Returns the east asian width assigned to the character chr asstring."
    },
    {
        "id": 382,
        "name": "curses.echo()",
        "describe": "Enter echo mode.  In echo mode, each character input is echoed to the screen asit is entered."
    },
    {
        "id": 383,
        "name": "bdb.effective()",
        "describe": "Determine if there is an effective (active) breakpoint at this line of code.Return a tuple of the breakpoint and a boolean that indicates if it is okto delete a temporary breakpoint.  Return (None, None) if there is nomatching breakpoint."
    },
    {
        "id": 384,
        "name": "sqlite3.enable_callback_tracebacks()",
        "describe": "By default you will not get any tracebacks in user-defined functions,aggregates, converters, authorizer callbacks etc. If you want to debug them,you can call this function with flag set to True. Afterwards, you willget tracebacks from callbacks on sys.stderr. Use False todisable the feature again."
    },
    {
        "id": 385,
        "name": "base64.encodebytes()",
        "describe": "Encode the bytes-like object s, which can contain arbitrary binarydata, and return bytes containing the base64-encoded data, with newlines(b'\\n') inserted after every 76 bytes of output, and ensuring thatthere is a trailing newline, as per RFC 2045 (MIME)."
    },
    {
        "id": 386,
        "name": "quopri.encodestring()",
        "describe": "Like encode(), except that it accepts a source bytes andreturns the corresponding encoded bytes. By default, it sends aFalse value to quotetabs parameter of the encode() function."
    },
    {
        "id": 387,
        "name": "turtle.end_fill()",
        "describe": "Fill the shape drawn after the last call to begin_fill()."
    },
    {
        "id": 388,
        "name": "turtle.end_poly()",
        "describe": "Stop recording the vertices of a polygon.  Current turtle position is lastvertex of polygon.  This will be connected with the first vertex."
    },
    {
        "id": 389,
        "name": "str.endswith()",
        "describe": "Return True if the string ends with the specified suffix, otherwise returnFalse.  suffix can also be a tuple of suffixes to look for.  With optionalstart, test beginning at that position.  With optional end, stop comparingat that position."
    },
    {
        "id": 390,
        "name": "curses.endwin()",
        "describe": "De-initialize the library, and return terminal to normal status."
    },
    {
        "id": 391,
        "name": "asyncio.ensure_future()",
        "describe": "Return:"
    },
    {
        "id": 392,
        "name": "ssl.enum_certificates()",
        "describe": "Retrieve certificates from Windows\u2019 system cert store. store_name may beone of CA, ROOT or MY. Windows may provide additional certstores, too."
    },
    {
        "id": 393,
        "name": "ssl.enum_crls()",
        "describe": "Retrieve CRLs from Windows\u2019 system cert store. store_name may beone of CA, ROOT or MY. Windows may provide additional certstores, too."
    },
    {
        "id": 394,
        "name": "select.epoll()",
        "describe": "(Only supported on Linux 2.5.44 and newer.) Return an edge polling object,which can be used as Edge or Level Triggered interface for I/Oevents."
    },
    {
        "id": 395,
        "name": "operator.eq()",
        "describe": "Perform \u201crich comparisons\u201d between a and b. Specifically, lt(a, b) isequivalent to a < b, le(a, b) is equivalent to a <= b, eq(a,b) is equivalent to a == b, ne(a, b) is equivalent to a != b,gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a>= b.  Note that these functions can return any value, which mayor may not be interpretable as a Boolean value.  SeeComparisons for more information about rich comparisons."
    },
    {
        "id": 396,
        "name": "curses.erasechar()",
        "describe": "Return the user\u2019s current erase character as a one-byte bytes object.  Under Unix operating systems thisis a property of the controlling tty of the curses program, and is not set bythe curses library itself."
    },
    {
        "id": 397,
        "name": "math.erf()",
        "describe": "Return the error function atx."
    },
    {
        "id": 398,
        "name": "math.erfc()",
        "describe": "Return the complementary error function at x.  The complementary errorfunction is defined as1.0 - erf(x).  It is used for large values of x where a subtractionfrom one would cause a loss of significance."
    },
    {
        "id": 399,
        "name": "logging.error()",
        "describe": "Logs a message with level ERROR on the root logger. The arguments areinterpreted as for debug()."
    },
    {
        "id": 400,
        "name": "re.escape()",
        "describe": "Escape special characters in pattern.This is useful if you want to match an arbitrary literal string that mayhave regular expression metacharacters in it.  For example:"
    },
    {
        "id": 401,
        "name": "sys.exc_info()",
        "describe": "This function returns a tuple of three values that give information about theexception that is currently being handled.  The information returned is specificboth to the current thread and to the current stack frame.  If the current stackframe is not handling an exception, the information is taken from the callingstack frame, or its caller, and so on until a stack frame is found that ishandling an exception.  Here, \u201chandling an exception\u201d is defined as \u201cexecutingan except clause.\u201d  For any stack frame, only information about the exceptionbeing currently handled is accessible."
    },
    {
        "id": 402,
        "name": "threading.excepthook()",
        "describe": "Handle uncaught exception raised by Thread.run()."
    },
    {
        "id": 403,
        "name": "logging.exception()",
        "describe": "Logs a message with level ERROR on the root logger. The arguments areinterpreted as for debug(). Exception info is added to the loggingmessage. This function should only be called from an exception handler."
    },
    {
        "id": 404,
        "name": "os.execl()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 405,
        "name": "os.execle()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 406,
        "name": "os.execlp()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 407,
        "name": "os.execlpe()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 408,
        "name": "os.execv()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 409,
        "name": "os.execve()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 410,
        "name": "os.execvp()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 411,
        "name": "os.execvpe()",
        "describe": "These functions all execute a new program, replacing the current process; theydo not return.  On Unix, the new executable is loaded into the current process,and will have the same process id as the caller.  Errors will be reported asOSError exceptions."
    },
    {
        "id": 412,
        "name": "_thread.exit()",
        "describe": "Raise the SystemExit exception.  When not caught, this will cause thethread to exit silently."
    },
    {
        "id": 413,
        "name": "turtle.exitonclick()",
        "describe": "Bind bye() method to mouse clicks on the Screen."
    },
    {
        "id": 414,
        "name": "math.exp()",
        "describe": "Return e raised to the power x, where e = 2.718281\u2026 is the baseof natural logarithms.  This is usually more accurate than math.e ** xor pow(math.e, x)."
    },
    {
        "id": 415,
        "name": "str.expandtabs()",
        "describe": "Return a copy of the string where all tab characters are replaced by one ormore spaces, depending on the current column and the given tab size.  Tabpositions occur every tabsize characters (default is 8, giving tabpositions at columns 0, 8, 16 and so on).  To expand the string, the currentcolumn is set to zero and the string is examined character by character.  Ifthe character is a tab (\\t), one or more space characters are insertedin the result until the current column is equal to the next tab position.(The tab character itself is not copied.)  If the character is a newline(\\n) or return (\\r), it is copied and the current column is reset tozero.  Any other character is copied unchanged and the current column isincremented by one regardless of how the character is represented whenprinted."
    },
    {
        "id": 416,
        "name": "unittest.expectedFailure()",
        "describe": "Mark the test as an expected failure or error.  If the test fails or errorsit will be considered a success.  If the test passes, it will be considereda failure."
    },
    {
        "id": 417,
        "name": "math.expm1()",
        "describe": "Return e raised to the power x, minus 1.  Here e is the base of naturallogarithms.  For small floats x, the subtraction in exp(x) - 1can result in a significant loss of precision; the expm1()function provides a way to compute this quantity to full precision:"
    },
    {
        "id": 418,
        "name": "random.expovariate()",
        "describe": "Exponential distribution.  lambd is 1.0 divided by the desiredmean.  It should be nonzero.  (The parameter would be called\u201clambda\u201d, but that is a reserved word in Python.)  Returned valuesrange from 0 to positive infinity if lambd is positive, and fromnegative infinity to 0 if lambd is negative."
    },
    {
        "id": 419,
        "name": "parser.expr()",
        "describe": "The expr() function parses the parameter source as if it were an inputto compile(source, 'file.py', 'eval').  If the parse succeeds, an ST objectis created to hold the internal parse tree representation, otherwise anappropriate exception is raised."
    },
    {
        "id": 420,
        "name": "pkgutil.extend_path()",
        "describe": "Extend the search path for the modules which comprise a package.  Intendeduse is to place the following code in a package\u2019s __init__.py:"
    },
    {
        "id": 421,
        "name": "traceback.extract_stack()",
        "describe": "Extract the raw traceback from the current stack frame.  The return value hasthe same format as for extract_tb().  The optional f and limitarguments have the same meaning as for print_stack()."
    },
    {
        "id": 422,
        "name": "traceback.extract_tb()",
        "describe": "Return a StackSummary object representing a list of \u201cpre-processed\u201dstack trace entries extracted from the traceback object tb.  It is usefulfor alternate formatting of stack traces.  The optional limit argument hasthe same meaning as for print_tb().  A \u201cpre-processed\u201d stack traceentry is a FrameSummary object containing attributesfilename, lineno,name, and line representing theinformation that is usually printed for a stack trace.  Theline is a string with leading and trailingwhitespace stripped; if the source is not available it is None."
    },
    {
        "id": 423,
        "name": "math.fabs()",
        "describe": "Return the absolute value of x."
    },
    {
        "id": 424,
        "name": "math.factorial()",
        "describe": "Return x factorial as an integer.  Raises ValueError if x is not integral oris negative."
    },
    {
        "id": 425,
        "name": "os.fchdir()",
        "describe": "Change the current working directory to the directory represented by the filedescriptor fd.  The descriptor must refer to an opened directory, not anopen file.  As of Python 3.3, this is equivalent to os.chdir(fd)."
    },
    {
        "id": 426,
        "name": "os.fchmod()",
        "describe": "Change the mode of the file given by fd to the numeric mode.  See thedocs for chmod() for possible values of mode.  As of Python 3.3, thisis equivalent to os.chmod(fd, mode)."
    },
    {
        "id": 427,
        "name": "os.fchown()",
        "describe": "Change the owner and group id of the file given by fd to the numeric uidand gid.  To leave one of the ids unchanged, set it to -1.  Seechown().  As of Python 3.3, this is equivalent to os.chown(fd, uid,gid)."
    },
    {
        "id": 428,
        "name": "fcntl.fcntl()",
        "describe": "Perform the operation cmd on file descriptor fd (file objects providinga fileno() method are accepted as well).  The values usedfor cmd are operating system dependent, and are available as constantsin the fcntl module, using the same names as used in the relevant Cheader files. The argument arg can either be an integer value, or abytes object. With an integer value, the return value of thisfunction is the integer return value of the C fcntl() call.  Whenthe argument is bytes it represents a binary structure, e.g. created bystruct.pack(). The binary data is copied to a buffer whose address ispassed to the C fcntl() call.  The return value after a successfulcall is the contents of the buffer, converted to a bytes object.The length of the returned object will be the same as the length of thearg argument. This is limited to 1024 bytes. If the information returnedin the buffer by the operating system is larger than 1024 bytes, this ismost likely to result in a segmentation violation or a more subtle datacorruption."
    },
    {
        "id": 429,
        "name": "turtle.fd()",
        "describe": "distance \u2013 a number (integer or float)"
    },
    {
        "id": 430,
        "name": "os.fdatasync()",
        "describe": "Force write of file with filedescriptor fd to disk. Does not force update ofmetadata."
    },
    {
        "id": 431,
        "name": "os.fdopen()",
        "describe": "Return an open file object connected to the file descriptor fd.  This is analias of the open() built-in function and accepts the same arguments.The only difference is that the first argument of fdopen() must alwaysbe an integer."
    },
    {
        "id": 432,
        "name": "dataclasses.field()",
        "describe": "For common and simple use cases, no other functionality isrequired.  There are, however, some dataclass features thatrequire additional per-field information.  To satisfy this need foradditional information, you can replace the default field valuewith a call to the provided field() function.  For example:"
    },
    {
        "id": 433,
        "name": "csv.field_size_limit()",
        "describe": "Returns the current maximum field size allowed by the parser. If new_limit isgiven, this becomes the new limit."
    },
    {
        "id": 434,
        "name": "dataclasses.fields()",
        "describe": "Returns a tuple of Field objects that define the fields for thisdataclass.  Accepts either a dataclass, or an instance of a dataclass.Raises TypeError if not passed a dataclass or instance of one.Does not return pseudo-fields which are ClassVar or InitVar."
    },
    {
        "id": 435,
        "name": "fileinput.filelineno()",
        "describe": "Return the line number in the current file.  Before the first line has beenread, returns 0.  After the last line of the last file has been read,returns the line number of that line within the file."
    },
    {
        "id": 436,
        "name": "stat.filemode()",
        "describe": "Convert a file\u2019s mode to a string of the form \u2018-rwxrwxrwx\u2019."
    },
    {
        "id": 437,
        "name": "fileinput.filename()",
        "describe": "Return the name of the file currently being read.  Before the first line hasbeen read, returns None."
    },
    {
        "id": 438,
        "name": "fileinput.fileno()",
        "describe": "Return the integer \u201cfile descriptor\u201d for the current file. When no file isopened (before the first line and between files), returns -1."
    },
    {
        "id": 439,
        "name": "textwrap.fill()",
        "describe": "Wraps the single paragraph in text, and returns a single string containing thewrapped paragraph.  fill() is shorthand for"
    },
    {
        "id": 440,
        "name": "turtle.fillcolor()",
        "describe": "Return or set the fillcolor."
    },
    {
        "id": 441,
        "name": "turtle.filling()",
        "describe": "Return fillstate (True if filling, False else)."
    },
    {
        "id": 442,
        "name": "curses.filter()",
        "describe": "The filter() routine, if used, must be called before initscr() iscalled.  The effect is that, during those calls, LINES is set to 1; thecapabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the homestring is set to the value of cr. The effect is that the cursor is confined tothe current line, and so are screen updates.  This may be used for enablingcharacter-at-a-time  line editing without touching the rest of the screen."
    },
    {
        "id": 443,
        "name": "itertools.filterfalse()",
        "describe": "Make an iterator that filters elements from iterable returning only those forwhich the predicate is False. If predicate is None, return the itemsthat are false. Roughly equivalent to:"
    },
    {
        "id": 444,
        "name": "warnings.filterwarnings()",
        "describe": "Insert an entry into the list of warnings filter specifications.  The entry is inserted at the front by default; ifappend is true, it is inserted at the end.  This checks the types of thearguments, compiles the message and module regular expressions, andinserts them as a tuple in the list of warnings filters.  Entries closer tothe front of the list override entries later in the list, if both match aparticular warning.  Omitted arguments default to a value that matcheseverything."
    },
    {
        "id": 445,
        "name": "typing.final()",
        "describe": "A decorator to indicate to type checkers that the decorated methodcannot be overridden, and the decorated class cannot be subclassed.For example:"
    },
    {
        "id": 446,
        "name": "gettext.find()",
        "describe": "This function implements the standard .mo file search algorithm.  Ittakes a domain, identical to what textdomain() takes.  Optionallocaledir is as in bindtextdomain(). Optional languages is a list ofstrings, where each string is a language code."
    },
    {
        "id": 447,
        "name": "re.findall()",
        "describe": "Return all non-overlapping matches of pattern in string, as a list ofstrings.  The string is scanned left-to-right, and matches are returned inthe order found.  If one or more groups are present in the pattern, return alist of groups; this will be a list of tuples if the pattern has more thanone group.  Empty matches are included in the result."
    },
    {
        "id": 448,
        "name": "audioop.findfactor()",
        "describe": "Return a factor F such that rms(add(fragment, mul(reference, -F))) isminimal, i.e., return the factor with which you should multiply reference tomake it match as well as possible to fragment.  The fragments should bothcontain 2-byte samples."
    },
    {
        "id": 449,
        "name": "audioop.findfit()",
        "describe": "Try to match reference as well as possible to a portion of fragment (whichshould be the longer fragment).  This is (conceptually) done by taking slicesout of fragment, using findfactor() to compute the best match, andminimizing the result.  The fragments should both contain 2-byte samples.Return a tuple (offset, factor) where offset is the (integer) offset intofragment where the optimal match started and factor is the (floating-point)factor as per findfactor()."
    },
    {
        "id": 450,
        "name": "re.finditer()",
        "describe": "Return an iterator yielding match objects overall non-overlapping matches for the RE pattern in string.  The stringis scanned left-to-right, and matches are returned in the order found.  Emptymatches are included in the result."
    },
    {
        "id": 451,
        "name": "dis.findlabels()",
        "describe": "Detect all offsets in the raw compiled bytecode string code which are jump targets, andreturn a list of these offsets."
    },
    {
        "id": 452,
        "name": "dis.findlinestarts()",
        "describe": "This generator function uses the co_firstlineno and co_lnotabattributes of the code object code to find the offsets which are starts oflines in the source code.  They are generated as (offset, lineno) pairs.See Objects/lnotab_notes.txt for the co_lnotab format andhow to decode it."
    },
    {
        "id": 453,
        "name": "mailcap.findmatch()",
        "describe": "Return a 2-tuple; the first element is a string containing the command line tobe executed (which can be passed to os.system()), and the second elementis the mailcap entry for a given MIME type.  If no matching MIME type can befound, (None, None) is returned."
    },
    {
        "id": 454,
        "name": "audioop.findmax()",
        "describe": "Search fragment for a slice of length length samples (not bytes!) withmaximum energy, i.e., return i for which rms(fragment[i*2:(i+length)*2])is maximal.  The fragments should both contain 2-byte samples."
    },
    {
        "id": 455,
        "name": "calendar.firstweekday()",
        "describe": "Returns the current setting for the weekday to start each week."
    },
    {
        "id": 456,
        "name": "ast.fix_missing_locations()",
        "describe": "When you compile a node tree with compile(), the compiler expectslineno and col_offset attributes for every node that supportsthem.  This is rather tedious to fill in for generated nodes, so this helperadds these attributes recursively where not already set, by setting them tothe values of the parent node.  It works recursively starting at node."
    },
    {
        "id": 457,
        "name": "curses.flash()",
        "describe": "Flash the screen.  That is, change it to reverse-video and then change it backin a short interval.  Some people prefer such as \u2018visible bell\u2019 to the audibleattention signal produced by beep()."
    },
    {
        "id": 458,
        "name": "fcntl.flock()",
        "describe": "Perform the lock operation operation on file descriptor fd (file objects providinga fileno() method are accepted as well). See the Unix manualflock(2) for details.  (On some systems, this function is emulatedusing fcntl().)"
    },
    {
        "id": 459,
        "name": "math.floor()",
        "describe": "Return the floor of x, the largest integer less than or equal to x.If x is not a float, delegates to x.__floor__(), which should return anIntegral value."
    },
    {
        "id": 460,
        "name": "operator.floordiv()",
        "describe": "Return a // b."
    },
    {
        "id": 461,
        "name": "curses.flushinp()",
        "describe": "Flush all input buffers.  This throws away any  typeahead  that  has been typedby the user and has not yet been processed by the program."
    },
    {
        "id": 462,
        "name": "statistics.fmean()",
        "describe": "Convert data to floats and compute the arithmetic mean."
    },
    {
        "id": 463,
        "name": "math.fmod()",
        "describe": "Return fmod(x, y), as defined by the platform C library. Note that thePython expression x % y may not return the same result.  The intent of the Cstandard is that fmod(x, y) be exactly (mathematically; to infiniteprecision) equal to x - n*y for some integer n such that the result hasthe same sign as x and magnitude less than abs(y).  Python\u2019s x % yreturns a result with the sign of y instead, and may not be exactly computablefor float arguments. For example, fmod(-1e-100, 1e100) is -1e-100, butthe result of Python\u2019s -1e-100 % 1e100 is 1e100-1e-100, which cannot berepresented exactly as a float, and rounds to the surprising 1e100.  Forthis reason, function fmod() is generally preferred when working withfloats, while Python\u2019s x % y is preferred when working with integers."
    },
    {
        "id": 464,
        "name": "fnmatch.fnmatch()",
        "describe": "Test whether the filename string matches the pattern string, returningTrue or False.  Both parameters are case-normalizedusing os.path.normcase(). fnmatchcase() can be used to perform acase-sensitive comparison, regardless of whether that\u2019s standard for theoperating system."
    },
    {
        "id": 465,
        "name": "fnmatch.fnmatchcase()",
        "describe": "Test whether filename matches pattern, returning True orFalse; the comparison is case-sensitive and does not applyos.path.normcase()."
    },
    {
        "id": 466,
        "name": "pty.fork()",
        "describe": "Fork. Connect the child\u2019s controlling terminal to a pseudo-terminal. Returnvalue is (pid, fd). Note that the child  gets pid 0, and the fd isinvalid. The parent\u2019s return value is the pid of the child, and fd is afile descriptor connected to the child\u2019s controlling terminal (and also to thechild\u2019s standard input and output)."
    },
    {
        "id": 467,
        "name": "os.forkpty()",
        "describe": "Fork a child process, using a new pseudo-terminal as the child\u2019s controllingterminal. Return a pair of (pid, fd), where pid is 0 in the child, thenew child\u2019s process id in the parent, and fd is the file descriptor of themaster end of the pseudo-terminal.  For a more portable approach, use thepty module.  If an error occurs OSError is raised."
    },
    {
        "id": 468,
        "name": "traceback.format_exc()",
        "describe": "This is like print_exc(limit) but returns a string instead of printing toa file."
    },
    {
        "id": 469,
        "name": "traceback.format_exception()",
        "describe": "Format a stack trace and the exception information.  The arguments  have thesame meaning as the corresponding arguments to print_exception().  Thereturn value is a list of strings, each ending in a newline and somecontaining internal newlines.  When these lines are concatenated and printed,exactly the same text is printed as does print_exception()."
    },
    {
        "id": 470,
        "name": "traceback.format_exception_only()",
        "describe": "Format the exception part of a traceback.  The arguments are the exceptiontype and value such as given by sys.last_type and sys.last_value.The return value is a list of strings, each ending in a newline.  Normally,the list contains a single string; however, for SyntaxErrorexceptions, it contains several lines that (when printed) display detailedinformation about where the syntax error occurred.  The message indicatingwhich exception occurred is the always last string in the list."
    },
    {
        "id": 471,
        "name": "traceback.format_list()",
        "describe": "Given a list of tuples or FrameSummary objects as returned byextract_tb() or extract_stack(), return a list of strings readyfor printing.  Each string in the resulting list corresponds to the item withthe same index in the argument list.  Each string ends in a newline; thestrings may contain internal newlines as well, for those items whose sourcetext line is not None."
    },
    {
        "id": 472,
        "name": "str.format_map()",
        "describe": "Similar to str.format(**mapping), except that mapping isused directly and not copied to a dict.  This is usefulif for example mapping is a dict subclass:"
    },
    {
        "id": 473,
        "name": "traceback.format_stack()",
        "describe": "A shorthand for format_list(extract_stack(f, limit))."
    },
    {
        "id": 474,
        "name": "locale.format_string()",
        "describe": "Formats a number val according to the current LC_NUMERIC setting.The format follows the conventions of the % operator.  For floating pointvalues, the decimal point is modified if appropriate.  If grouping is true,also takes the grouping into account."
    },
    {
        "id": 475,
        "name": "traceback.format_tb()",
        "describe": "A shorthand for format_list(extract_tb(tb, limit))."
    },
    {
        "id": 476,
        "name": "inspect.formatargspec()",
        "describe": "Format a pretty argument spec from the values returned bygetfullargspec()."
    },
    {
        "id": 477,
        "name": "inspect.formatargvalues()",
        "describe": "Format a pretty argument spec from the four values returned bygetargvalues().  The format* arguments are the corresponding optionalformatting functions that are called to turn names and values into strings."
    },
    {
        "id": 478,
        "name": "warnings.formatwarning()",
        "describe": "Format a warning the standard way.  This returns a string which may containembedded newlines and ends in a newline.  line is a line of source code tobe included in the warning message; if line is not supplied,formatwarning() will try to read the line specified by filename andlineno."
    },
    {
        "id": 479,
        "name": "turtle.forward()",
        "describe": "distance \u2013 a number (integer or float)"
    },
    {
        "id": 480,
        "name": "os.fpathconf()",
        "describe": "Return system configuration information relevant to an open file. namespecifies the configuration value to retrieve; it may be a string which is thename of a defined system value; these names are specified in a number ofstandards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms defineadditional names as well.  The names known to the host operating system aregiven in the pathconf_names dictionary.  For configuration variables notincluded in that mapping, passing an integer for name is also accepted."
    },
    {
        "id": 481,
        "name": "multiprocessing.freeze_support()",
        "describe": "Add support for when a program which uses multiprocessing has beenfrozen to produce a Windows executable.  (Has been tested with py2exe,PyInstaller and cx_Freeze.)"
    },
    {
        "id": 482,
        "name": "math.frexp()",
        "describe": "Return the mantissa and exponent of x as the pair (m, e).  m is a floatand e is an integer such that x == m * 2**e exactly. If x is zero,returns (0.0, 0), otherwise 0.5 <= abs(m) < 1.  This is used to \u201cpickapart\u201d the internal representation of a float in a portable way."
    },
    {
        "id": 483,
        "name": "int.from_bytes()",
        "describe": "Return the integer represented by the given array of bytes."
    },
    {
        "id": 484,
        "name": "socket.fromfd()",
        "describe": "Duplicate the file descriptor fd (an integer as returned by a file object\u2019sfileno() method) and build a socket object from the result.  Addressfamily, socket type and protocol number are as for the socket() functionabove. The file descriptor should refer to a socket, but this is not checked \u2014subsequent operations on the object may fail if the file descriptor is invalid.This function is rarely needed, but can be used to get or set socket options ona socket passed to a program as standard input or output (such as a serverstarted by the Unix inet daemon).  The socket is assumed to be in blocking mode."
    },
    {
        "id": 485,
        "name": "float.fromhex()",
        "describe": "Class method to return the float represented by a hexadecimalstring s.  The string s may have leading and trailingwhitespace."
    },
    {
        "id": 486,
        "name": "socket.fromshare()",
        "describe": "Instantiate a socket from data obtained from the socket.share()method.  The socket is assumed to be in blocking mode."
    },
    {
        "id": 487,
        "name": "os.fsdecode()",
        "describe": "Decode the path-like filename from thefilesystem encoding with 'surrogateescape' error handler, or 'strict'on Windows; return str unchanged."
    },
    {
        "id": 488,
        "name": "os.fsencode()",
        "describe": "Encode path-like filename to the filesystemencoding with 'surrogateescape' error handler, or 'strict' onWindows; return bytes unchanged."
    },
    {
        "id": 489,
        "name": "os.fspath()",
        "describe": "Return the file system representation of the path."
    },
    {
        "id": 490,
        "name": "os.fstat()",
        "describe": "Get the status of the file descriptor fd. Return a stat_resultobject."
    },
    {
        "id": 491,
        "name": "os.fstatvfs()",
        "describe": "Return information about the filesystem containing the file associated withfile descriptor fd, like statvfs().  As of Python 3.3, this isequivalent to os.statvfs(fd)."
    },
    {
        "id": 492,
        "name": "math.fsum()",
        "describe": "Return an accurate floating point sum of values in the iterable.  Avoidsloss of precision by tracking multiple intermediate partial sums:"
    },
    {
        "id": 493,
        "name": "os.fsync()",
        "describe": "Force write of file with filedescriptor fd to disk.  On Unix, this calls thenative fsync() function; on Windows, the MS _commit() function."
    },
    {
        "id": 494,
        "name": "os.ftruncate()",
        "describe": "Truncate the file corresponding to file descriptor fd, so that it is atmost length bytes in size.  As of Python 3.3, this is equivalent toos.truncate(fd, length)."
    },
    {
        "id": 495,
        "name": "re.fullmatch()",
        "describe": "If the whole string matches the regular expression pattern, return acorresponding match object.  Return None if thestring does not match the pattern; note that this is different from azero-length match."
    },
    {
        "id": 496,
        "name": "os.fwalk()",
        "describe": "This behaves exactly like walk(), except that it yields a 4-tuple(dirpath, dirnames, filenames, dirfd), and it supports dir_fd."
    },
    {
        "id": 497,
        "name": "math.gamma()",
        "describe": "Return the Gamma function atx."
    },
    {
        "id": 498,
        "name": "random.gammavariate()",
        "describe": "Gamma distribution.  (Not the gamma function!)  Conditions on theparameters are alpha > 0 and beta > 0."
    },
    {
        "id": 499,
        "name": "asyncio.gather()",
        "describe": "Run awaitable objects in the awssequence concurrently."
    },
    {
        "id": 500,
        "name": "random.gauss()",
        "describe": "Gaussian distribution.  mu is the mean, and sigma is the standarddeviation.  This is slightly faster than the normalvariate() functiondefined below."
    },
    {
        "id": 501,
        "name": "math.gcd()",
        "describe": "Return the greatest common divisor of the specified integer arguments.If any of the arguments is nonzero, then the returned value is the largestpositive integer that is a divisor of all arguments.  If all argumentsare zero, then the returned value is 0.  gcd() without argumentsreturns 0."
    },
    {
        "id": 502,
        "name": "operator.ge()",
        "describe": "Perform \u201crich comparisons\u201d between a and b. Specifically, lt(a, b) isequivalent to a < b, le(a, b) is equivalent to a <= b, eq(a,b) is equivalent to a == b, ne(a, b) is equivalent to a != b,gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a>= b.  Note that these functions can return any value, which mayor may not be interpretable as a Boolean value.  SeeComparisons for more information about rich comparisons."
    },
    {
        "id": 503,
        "name": "msilib.gen_uuid()",
        "describe": "Return a new UUID, in the format that MSI typically requires (i.e. in curlybraces, and with all hexdigits in upper-case)."
    },
    {
        "id": 504,
        "name": "tokenize.generate_tokens()",
        "describe": "Tokenize a source reading unicode strings instead of bytes."
    },
    {
        "id": 505,
        "name": "pickletools.genops()",
        "describe": "Provides an iterator over all of the opcodes in a pickle, returning asequence of (opcode, arg, pos) triples.  opcode is an instance of anOpcodeInfo class; arg is the decoded value, as a Python object, ofthe opcode\u2019s argument; pos is the position at which this opcode is located.pickle can be a string or a file-like object."
    },
    {
        "id": 506,
        "name": "statistics.geometric_mean()",
        "describe": "Convert data to floats and compute the geometric mean."
    },
    {
        "id": 507,
        "name": "webbrowser.get()",
        "describe": "Return a controller object for the browser type using.  If using isNone, return a controller for a default browser appropriate to thecaller\u2019s environment."
    },
    {
        "id": 508,
        "name": "logging.getLevelName()",
        "describe": "Returns the textual or numeric representation of logging level level."
    },
    {
        "id": 509,
        "name": "logging.getLogRecordFactory()",
        "describe": "Return a callable which is used to create a LogRecord."
    },
    {
        "id": 510,
        "name": "logging.getLogger()",
        "describe": "Return a logger with the specified name or, if name is None, return alogger which is the root logger of the hierarchy. If specified, the name istypically a dot-separated hierarchical name like \u2018a\u2019, \u2018a.b\u2019 or \u2018a.b.c.d\u2019.Choice of these names is entirely up to the developer who is using logging."
    },
    {
        "id": 511,
        "name": "logging.getLoggerClass()",
        "describe": "Return either the standard Logger class, or the last class passed tosetLoggerClass(). This function may be called from within a new classdefinition, to ensure that installing a customized Logger class willnot undo customizations already applied by other code. For example:"
    },
    {
        "id": 512,
        "name": "multiprocessing.get_all_start_methods()",
        "describe": "Returns a list of the supported start methods, the first of whichis the default.  The possible start methods are 'fork','spawn' and 'forkserver'.  On Windows only 'spawn' isavailable.  On Unix 'fork' and 'spawn' are alwayssupported, with 'fork' being the default."
    },
    {
        "id": 513,
        "name": "shutil.get_archive_formats()",
        "describe": "Return a list of supported formats for archiving.Each element of the returned sequence is a tuple (name, description)."
    },
    {
        "id": 514,
        "name": "sys.get_asyncgen_hooks()",
        "describe": "Returns an asyncgen_hooks object, which is similar to anamedtuple of the form (firstiter, finalizer),where firstiter and finalizer are expected to be either None orfunctions which take an asynchronous generator iterator as anargument, and are used to schedule finalization of an asynchronousgenerator by an event loop."
    },
    {
        "id": 515,
        "name": "readline.get_begidx()",
        "describe": "Get the beginning or ending index of the completion scope.These indexes are the start and end arguments passed to therl_attempted_completion_function callback of theunderlying library."
    },
    {
        "id": 516,
        "name": "os.get_blocking()",
        "describe": "Get the blocking mode of the file descriptor: False if theO_NONBLOCK flag is set, True if the flag is cleared."
    },
    {
        "id": 517,
        "name": "asyncio.get_child_watcher()",
        "describe": "Return the current child watcher for the current policy."
    },
    {
        "id": 518,
        "name": "time.get_clock_info()",
        "describe": "Get information on the specified clock as a namespace object.Supported clock names and the corresponding functions to read their valueare:"
    },
    {
        "id": 519,
        "name": "difflib.get_close_matches()",
        "describe": "Return a list of the best \u201cgood enough\u201d matches.  word is a sequence for whichclose matches are desired (typically a string), and possibilities is a list ofsequences against which to match word (typically a list of strings)."
    },
    {
        "id": 520,
        "name": "readline.get_completer()",
        "describe": "Get the completer function, or None if no completer function has been set."
    },
    {
        "id": 521,
        "name": "readline.get_completer_delims()",
        "describe": "Set or get the word delimiters for completion.  These determine thestart of the word to be considered for completion (the completion scope).These functions access the rl_completer_word_break_charactersvariable in the underlying library."
    },
    {
        "id": 522,
        "name": "readline.get_completion_type()",
        "describe": "Get the type of completion being attempted.  This returns therl_completion_type variable in the underlying library asan integer."
    },
    {
        "id": 523,
        "name": "sysconfig.get_config_h_filename()",
        "describe": "Return the path of pyconfig.h."
    },
    {
        "id": 524,
        "name": "sysconfig.get_config_var()",
        "describe": "Return the value of a single variable name. Equivalent toget_config_vars().get(name)."
    },
    {
        "id": 525,
        "name": "sysconfig.get_config_vars()",
        "describe": "With no arguments, return a dictionary of all configuration variablesrelevant for the current platform."
    },
    {
        "id": 526,
        "name": "multiprocessing.get_context()",
        "describe": "Return a context object which has the same attributes as themultiprocessing module."
    },
    {
        "id": 527,
        "name": "sys.get_coroutine_origin_tracking_depth()",
        "describe": "Get the current coroutine origin tracking depth, as set byset_coroutine_origin_tracking_depth()."
    },
    {
        "id": 528,
        "name": "readline.get_current_history_length()",
        "describe": "Return the number of items currently in the history.  (This is different fromget_history_length(), which returns the maximum number of lines that willbe written to a history file.)"
    },
    {
        "id": 529,
        "name": "nis.get_default_domain()",
        "describe": "Return the system default NIS domain."
    },
    {
        "id": 530,
        "name": "ssl.get_default_verify_paths()",
        "describe": "Returns a named tuple with paths to OpenSSL\u2019s default cafile and capath.The paths are the same as used bySSLContext.set_default_verify_paths(). The return value is anamed tuple DefaultVerifyPaths:"
    },
    {
        "id": 531,
        "name": "csv.get_dialect()",
        "describe": "Return the dialect associated with name.  An Error is raised ifname is not a registered dialect name.  This function returns an immutableDialect."
    },
    {
        "id": 532,
        "name": "ast.get_docstring()",
        "describe": "Return the docstring of the given node (which must be aFunctionDef, AsyncFunctionDef, ClassDef,or Module node), or None if it has no docstring.If clean is true, clean up the docstring\u2019s indentation withinspect.cleandoc()."
    },
    {
        "id": 533,
        "name": "readline.get_endidx()",
        "describe": "Get the beginning or ending index of the completion scope.These indexes are the start and end arguments passed to therl_attempted_completion_function callback of theunderlying library."
    },
    {
        "id": 534,
        "name": "ctypes.get_errno()",
        "describe": "Returns the current value of the ctypes-private copy of the systemerrno variable in the calling thread."
    },
    {
        "id": 535,
        "name": "curses.get_escdelay()",
        "describe": "Retrieves the value set by set_escdelay()."
    },
    {
        "id": 536,
        "name": "asyncio.get_event_loop()",
        "describe": "Get the current event loop."
    },
    {
        "id": 537,
        "name": "asyncio.get_event_loop_policy()",
        "describe": "Return the current process-wide policy."
    },
    {
        "id": 538,
        "name": "os.get_exec_path()",
        "describe": "Returns the list of directories that will be searched for a namedexecutable, similar to a shell, when launching a process.env, when specified, should be an environment variable dictionaryto lookup the PATH in.By default, when env is None, environ is used."
    },
    {
        "id": 539,
        "name": "os.get_handle_inheritable()",
        "describe": "Get the \u201cinheritable\u201d flag of the specified handle (a boolean)."
    },
    {
        "id": 540,
        "name": "readline.get_history_item()",
        "describe": "Return the current contents of history item at index.  The item indexis one-based.  This calls history_get() in the underlying library."
    },
    {
        "id": 541,
        "name": "readline.get_history_length()",
        "describe": "Set or return the desired number of lines to save in the history file.The write_history_file() function uses this value to truncatethe history file, by calling history_truncate_file() inthe underlying library.  Negative values implyunlimited history file size."
    },
    {
        "id": 542,
        "name": "threading.get_ident()",
        "describe": "Return the \u2018thread identifier\u2019 of the current thread.  This is a nonzerointeger.  Its value has no direct meaning; it is intended as a magic cookieto be used e.g. to index a dictionary of thread-specific data.  Threadidentifiers may be recycled when a thread exits and another thread iscreated."
    },
    {
        "id": 543,
        "name": "pkgutil.get_importer()",
        "describe": "Retrieve a finder for the given path_item."
    },
    {
        "id": 544,
        "name": "os.get_inheritable()",
        "describe": "Get the \u201cinheritable\u201d flag of the specified file descriptor (a boolean)."
    },
    {
        "id": 545,
        "name": "dis.get_instructions()",
        "describe": "Return an iterator over the instructions in the supplied function, method,source code string or code object."
    },
    {
        "id": 546,
        "name": "zipapp.get_interpreter()",
        "describe": "Return the interpreter specified in the #! line at the start of thearchive.  If there is no #! line, return None.The archive argument can be a filename or a file-like object openfor reading in bytes mode.  It is assumed to be at the start of the archive."
    },
    {
        "id": 547,
        "name": "ctypes.get_last_error()",
        "describe": "Windows only: returns the current value of the ctypes-private copy of the systemLastError variable in the calling thread."
    },
    {
        "id": 548,
        "name": "readline.get_line_buffer()",
        "describe": "Return the current contents of the line buffer (rl_line_bufferin the underlying library)."
    },
    {
        "id": 549,
        "name": "pkgutil.get_loader()",
        "describe": "Get a loader object for module_or_name."
    },
    {
        "id": 550,
        "name": "multiprocessing.get_logger()",
        "describe": "Returns the logger used by multiprocessing.  If necessary, a new onewill be created."
    },
    {
        "id": 551,
        "name": "imp.get_magic()",
        "describe": "Return the magic string value used to recognize byte-compiled code files(.pyc files).  (This value may be different for each Python version.)"
    },
    {
        "id": 552,
        "name": "sysconfig.get_makefile_filename()",
        "describe": "Return the path of Makefile."
    },
    {
        "id": 553,
        "name": "ipaddress.get_mixed_type_key()",
        "describe": "Return a key suitable for sorting between networks and addresses.  Addressand Network objects are not sortable by default; they\u2019re fundamentallydifferent, so the expression:"
    },
    {
        "id": 554,
        "name": "threading.get_native_id()",
        "describe": "Return the native integral Thread ID of the current thread assigned by the kernel.This is a non-negative integer.Its value may be used to uniquely identify this particular thread system-wide(until the thread terminates, after which the value may be recycled by the OS)."
    },
    {
        "id": 555,
        "name": "typing.get_origin()",
        "describe": "Provide basic introspection for generic types and special typing forms."
    },
    {
        "id": 556,
        "name": "msvcrt.get_osfhandle()",
        "describe": "Return the file handle for the file descriptor fd.  Raises OSError iffd is not recognized."
    },
    {
        "id": 557,
        "name": "sysconfig.get_path()",
        "describe": "Return an installation path corresponding to the path name, from theinstall scheme named scheme."
    },
    {
        "id": 558,
        "name": "sysconfig.get_path_names()",
        "describe": "Return a tuple containing all path names currently supported insysconfig."
    },
    {
        "id": 559,
        "name": "sysconfig.get_paths()",
        "describe": "Return a dictionary containing all installation paths corresponding to aninstallation scheme. See get_path() for more information."
    },
    {
        "id": 560,
        "name": "sysconfig.get_platform()",
        "describe": "Return a string that identifies the current platform."
    },
    {
        "id": 561,
        "name": "turtle.get_poly()",
        "describe": "Return the last recorded polygon."
    },
    {
        "id": 562,
        "name": "sysconfig.get_python_version()",
        "describe": "Return the MAJOR.MINOR Python version number as a string.  Similar to'%d.%d' % sys.version_info[:2]."
    },
    {
        "id": 563,
        "name": "asyncio.get_running_loop()",
        "describe": "Return the running event loop in the current OS thread."
    },
    {
        "id": 564,
        "name": "sysconfig.get_scheme_names()",
        "describe": "Return a tuple containing all schemes currently supported insysconfig."
    },
    {
        "id": 565,
        "name": "ssl.get_server_certificate()",
        "describe": "Given the address addr of an SSL-protected server, as a (hostname,port-number) pair, fetches the server\u2019s certificate, and returns it as aPEM-encoded string.  If ssl_version is specified, uses that version ofthe SSL protocol to attempt to connect to the server.  If ca_certs isspecified, it should be a file containing a list of root certificates, thesame format as used for the same parameter inSSLContext.wrap_socket().  The call will attempt to validate theserver certificate against that set of root certificates, and will failif the validation attempt fails."
    },
    {
        "id": 566,
        "name": "turtle.get_shapepoly()",
        "describe": "Return the current shape polygon as tuple of coordinate pairs. Thiscan be used to define a new shape or components of a compound shape."
    },
    {
        "id": 567,
        "name": "ast.get_source_segment()",
        "describe": "Get source code segment of the source that generated node.If some location information (lineno, end_lineno,col_offset, or end_col_offset) is missing, return None."
    },
    {
        "id": 568,
        "name": "multiprocessing.get_start_method()",
        "describe": "Return the name of start method used for starting processes."
    },
    {
        "id": 569,
        "name": "imp.get_suffixes()",
        "describe": "Return a list of 3-element tuples, each describing a particular type ofmodule. Each triple has the form (suffix, mode, type), where suffix isa string to be appended to the module name to form the filename to searchfor, mode is the mode string to pass to the built-in open() functionto open the file (this can be 'r' for text files or 'rb' for binaryfiles), and type is the file type, which has one of the valuesPY_SOURCE, PY_COMPILED, or C_EXTENSION, describedbelow."
    },
    {
        "id": 570,
        "name": "curses.get_tabsize()",
        "describe": "Retrieves the value set by set_tabsize()."
    },
    {
        "id": 571,
        "name": "imp.get_tag()",
        "describe": "Return the PEP 3147 magic tag string matching this version of Python\u2019smagic number, as returned by get_magic()."
    },
    {
        "id": 572,
        "name": "shutil.get_terminal_size()",
        "describe": "Get the size of the terminal window."
    },
    {
        "id": 573,
        "name": "typing.get_type_hints()",
        "describe": "Return a dictionary containing type hints for a function, method, moduleor class object."
    },
    {
        "id": 574,
        "name": "shutil.get_unpack_formats()",
        "describe": "Return a list of all registered formats for unpacking.Each element of the returned sequence is a tuple(name, extensions, description)."
    },
    {
        "id": 575,
        "name": "socket.getaddrinfo()",
        "describe": "Translate the host/port argument into a sequence of 5-tuples that containall the necessary arguments for creating a socket connected to that service.host is a domain name, a string representation of an IPv4/v6 addressor None. port is a string service name such as 'http', a numericport number or None.  By passing None as the value of hostand port, you can pass NULL to the underlying C API."
    },
    {
        "id": 576,
        "name": "sys.getallocatedblocks()",
        "describe": "Return the number of memory blocks currently allocated by the interpreter,regardless of their size.  This function is mainly useful for trackingand debugging memory leaks.  Because of the interpreter\u2019s internalcaches, the result can vary from call to call; you may have to call_clear_type_cache() and gc.collect() to get morepredictable results."
    },
    {
        "id": 577,
        "name": "sys.getandroidapilevel()",
        "describe": "Return the build time API version of Android as an integer."
    },
    {
        "id": 578,
        "name": "inspect.getargspec()",
        "describe": "Get the names and default values of a Python function\u2019s parameters. Anamed tuple ArgSpec(args, varargs, keywords, defaults) isreturned. args is a list of the parameter names. varargs and keywordsare the names of the * and ** parameters or None. defaults is atuple of default argument values or None if there are no defaultarguments; if this tuple has n elements, they correspond to the lastn elements listed in args."
    },
    {
        "id": 579,
        "name": "inspect.getargvalues()",
        "describe": "Get information about arguments passed into a particular frame.  Anamed tuple ArgInfo(args, varargs, keywords, locals) isreturned. args is a list of the argument names.  varargs and keywordsare the names of the * and ** arguments or None.  locals is thelocals dictionary of the given frame."
    },
    {
        "id": 580,
        "name": "inspect.getattr_static()",
        "describe": "Retrieve attributes without triggering dynamic lookup via thedescriptor protocol, __getattr__() or __getattribute__()."
    },
    {
        "id": 581,
        "name": "inspect.getcallargs()",
        "describe": "Bind the args and kwds to the argument names of the Python function ormethod func, as if it was called with them. For bound methods, bind also thefirst argument (typically named self) to the associated instance. A dictis returned, mapping the argument names (including the names of the * and** arguments, if any) to their values from args and kwds. In case ofinvoking func incorrectly, i.e. whenever func(*args, **kwds) would raisean exception because of incompatible signature, an exception of the same typeand the same or similar message is raised. For example:"
    },
    {
        "id": 582,
        "name": "turtle.getcanvas()",
        "describe": "Return the Canvas of this TurtleScreen.  Useful for insiders who know what todo with a Tkinter Canvas."
    },
    {
        "id": 583,
        "name": "mailcap.getcaps()",
        "describe": "Returns a dictionary mapping MIME types to a list of mailcap file entries. Thisdictionary must be passed to the findmatch() function.  An entry is storedas a list of dictionaries, but it shouldn\u2019t be necessary to know the details ofthis representation."
    },
    {
        "id": 584,
        "name": "msvcrt.getch()",
        "describe": "Read a keypress and return the resulting character as a byte string.Nothing is echoed to the console.  This call will block if a keypressis not already available, but will not wait for Enter to bepressed. If the pressed key was a special function key, this willreturn '\\000' or '\\xe0'; the next call will return the keycode.The Control-C keypress cannot be read with this function."
    },
    {
        "id": 585,
        "name": "msvcrt.getche()",
        "describe": "Similar to getch(), but the keypress will be echoed if it  represents aprintable character."
    },
    {
        "id": 586,
        "name": "inspect.getclasstree()",
        "describe": "Arrange the given list of classes into a hierarchy of nested lists. Where anested list appears, it contains classes derived from the class whose entryimmediately precedes the list.  Each entry is a 2-tuple containing a class and atuple of its base classes.  If the unique argument is true, exactly one entryappears in the returned structure for each class in the given list.  Otherwise,classes using multiple inheritance and their descendants will appear multipletimes."
    },
    {
        "id": 587,
        "name": "inspect.getclosurevars()",
        "describe": "Get the mapping of external name references in a Python function ormethod func to their current values. Anamed tuple ClosureVars(nonlocals, globals, builtins, unbound)is returned. nonlocals maps referenced names to lexical closurevariables, globals to the function\u2019s module globals and builtins tothe builtins visible from the function body. unbound is the set of namesreferenced in the function that could not be resolved at all given thecurrent module globals and builtins."
    },
    {
        "id": 588,
        "name": "inspect.getcomments()",
        "describe": "Return in a single string any lines of comments immediately preceding theobject\u2019s source code (for a class, function, or method), or at the top of thePython source file (if the object is a module).  If the object\u2019s source codeis unavailable, return None.  This could happen if the object has beendefined in C or the interactive shell."
    },
    {
        "id": 589,
        "name": "decimal.getcontext()",
        "describe": "Return the current context for the active thread."
    },
    {
        "id": 590,
        "name": "inspect.getcoroutinelocals()",
        "describe": "This function is analogous to getgeneratorlocals(), butworks for coroutine objects created by async def functions."
    },
    {
        "id": 591,
        "name": "inspect.getcoroutinestate()",
        "describe": "Get current state of a coroutine object.  The function is intended to beused with coroutine objects created by async def functions, butwill accept any coroutine-like object that has cr_running andcr_frame attributes."
    },
    {
        "id": 592,
        "name": "os.getcwd()",
        "describe": "Return a string representing the current working directory."
    },
    {
        "id": 593,
        "name": "os.getcwdb()",
        "describe": "Return a bytestring representing the current working directory."
    },
    {
        "id": 594,
        "name": "codecs.getdecoder()",
        "describe": "Look up the codec for the given encoding and return its decoder function."
    },
    {
        "id": 595,
        "name": "sys.getdefaultencoding()",
        "describe": "Return the name of the current default string encoding used by the Unicodeimplementation."
    },
    {
        "id": 596,
        "name": "locale.getdefaultlocale()",
        "describe": "Tries to determine the default locale settings and returns them as a tuple ofthe form (language code, encoding)."
    },
    {
        "id": 597,
        "name": "socket.getdefaulttimeout()",
        "describe": "Return the default timeout in seconds (float) for new socket objects. A valueof None indicates that new socket objects have no timeout. When the socketmodule is first imported, the default is None."
    },
    {
        "id": 598,
        "name": "sys.getdlopenflags()",
        "describe": "Return the current value of the flags that are used fordlopen() calls.  Symbolic names for the flag values can befound in the os module (RTLD_xxx constants, e.g.os.RTLD_LAZY)."
    },
    {
        "id": 599,
        "name": "inspect.getdoc()",
        "describe": "Get the documentation string for an object, cleaned up with cleandoc().If the documentation string for an object is not provided and the object isa class, a method, a property or a descriptor, retrieve the documentationstring from the inheritance hierarchy."
    },
    {
        "id": 600,
        "name": "os.getegid()",
        "describe": "Return the effective group id of the current process.  This corresponds to the\u201cset id\u201d bit on the file being executed in the current process."
    },
    {
        "id": 601,
        "name": "codecs.getencoder()",
        "describe": "Look up the codec for the given encoding and return its encoder function."
    },
    {
        "id": 602,
        "name": "os.getenv()",
        "describe": "Return the value of the environment variable key if it exists, ordefault if it doesn\u2019t. key, default and the result are str."
    },
    {
        "id": 603,
        "name": "os.getenvb()",
        "describe": "Return the value of the environment variable key if it exists, ordefault if it doesn\u2019t. key, default and the result are bytes."
    },
    {
        "id": 604,
        "name": "os.geteuid()",
        "describe": "Return the current process\u2019s effective user id."
    },
    {
        "id": 605,
        "name": "inspect.getfile()",
        "describe": "Return the name of the (text or binary) file in which an object was defined.This will fail with a TypeError if the object is a built-in module,class, or function."
    },
    {
        "id": 606,
        "name": "sys.getfilesystemencodeerrors()",
        "describe": "Return the name of the error mode used to convert between Unicode filenamesand bytes filenames. The encoding name is returned fromgetfilesystemencoding()."
    },
    {
        "id": 607,
        "name": "sys.getfilesystemencoding()",
        "describe": "Return the name of the encoding used to convert between Unicodefilenames and bytes filenames. For best compatibility, str should beused for filenames in all cases, although representing filenames as bytesis also supported. Functions accepting or returning filenames should supporteither str or bytes and internally convert to the system\u2019s preferredrepresentation."
    },
    {
        "id": 608,
        "name": "socket.getfqdn()",
        "describe": "Return a fully qualified domain name for name. If name is omitted or empty,it is interpreted as the local host.  To find the fully qualified name, thehostname returned by gethostbyaddr() is checked, followed by aliases for thehost, if available.  The first name which includes a period is selected.  Incase no fully qualified domain name is available, the hostname as returned bygethostname() is returned."
    },
    {
        "id": 609,
        "name": "inspect.getframeinfo()",
        "describe": "Get information about a frame or traceback object.  A named tupleTraceback(filename, lineno, function, code_context, index) is returned."
    },
    {
        "id": 610,
        "name": "inspect.getfullargspec()",
        "describe": "Get the names and default values of a Python function\u2019s parameters.  Anamed tuple is returned:"
    },
    {
        "id": 611,
        "name": "inspect.getgeneratorlocals()",
        "describe": "Get the mapping of live local variables in generator to their currentvalues.  A dictionary is returned that maps from variable names to values.This is the equivalent of calling locals() in the body of thegenerator, and all the same caveats apply."
    },
    {
        "id": 612,
        "name": "inspect.getgeneratorstate()",
        "describe": "Get current state of a generator-iterator."
    },
    {
        "id": 613,
        "name": "os.getgid()",
        "describe": "Return the real group id of the current process."
    },
    {
        "id": 614,
        "name": "grp.getgrall()",
        "describe": "Return a list of all available group entries, in arbitrary order."
    },
    {
        "id": 615,
        "name": "grp.getgrgid()",
        "describe": "Return the group database entry for the given numeric group ID. KeyErroris raised if the entry asked for cannot be found."
    },
    {
        "id": 616,
        "name": "grp.getgrnam()",
        "describe": "Return the group database entry for the given group name. KeyError israised if the entry asked for cannot be found."
    },
    {
        "id": 617,
        "name": "os.getgrouplist()",
        "describe": "Return list of group ids that user belongs to. If group is not in thelist, it is included; typically, group is specified as the group IDfield from the password record for user."
    },
    {
        "id": 618,
        "name": "os.getgroups()",
        "describe": "Return list of supplemental group ids associated with the current process."
    },
    {
        "id": 619,
        "name": "socket.gethostbyaddr()",
        "describe": "Return a triple (hostname, aliaslist, ipaddrlist) where hostname is theprimary host name responding to the given ip_address, aliaslist is a(possibly empty) list of alternative host names for the same address, andipaddrlist is a list of IPv4/v6 addresses for the same interface on the samehost (most likely containing only a single address). To find the fully qualifieddomain name, use the function getfqdn(). gethostbyaddr() supportsboth IPv4 and IPv6."
    },
    {
        "id": 620,
        "name": "socket.gethostbyname()",
        "describe": "Translate a host name to IPv4 address format.  The IPv4 address is returned as astring, such as  '100.50.200.5'.  If the host name is an IPv4 address itselfit is returned unchanged.  See gethostbyname_ex() for a more completeinterface. gethostbyname() does not support IPv6 name resolution, andgetaddrinfo() should be used instead for IPv4/v6 dual stack support."
    },
    {
        "id": 621,
        "name": "socket.gethostbyname_ex()",
        "describe": "Translate a host name to IPv4 address format, extended interface. Return atriple (hostname, aliaslist, ipaddrlist) where hostname is the primaryhost name responding to the given ip_address, aliaslist is a (possiblyempty) list of alternative host names for the same address, and ipaddrlist isa list of IPv4 addresses for the same interface on the same host (often but notalways a single address). gethostbyname_ex() does not support IPv6 nameresolution, and getaddrinfo() should be used instead for IPv4/v6 dualstack support."
    },
    {
        "id": 622,
        "name": "socket.gethostname()",
        "describe": "Return a string containing the hostname of the machine where  the Pythoninterpreter is currently executing."
    },
    {
        "id": 623,
        "name": "codecs.getincrementaldecoder()",
        "describe": "Look up the codec for the given encoding and return its incremental decoderclass or factory function."
    },
    {
        "id": 624,
        "name": "codecs.getincrementalencoder()",
        "describe": "Look up the codec for the given encoding and return its incremental encoderclass or factory function."
    },
    {
        "id": 625,
        "name": "inspect.getinnerframes()",
        "describe": "Get a list of frame records for a traceback\u2019s frame and all inner frames.  Theseframes represent calls made as a consequence of frame.  The first entry in thelist represents traceback; the last entry represents where the exception wasraised."
    },
    {
        "id": 626,
        "name": "operator.getitem()",
        "describe": "Return the value of a at index b."
    },
    {
        "id": 627,
        "name": "signal.getitimer()",
        "describe": "Returns current value of a given interval timer specified by which."
    },
    {
        "id": 628,
        "name": "linecache.getline()",
        "describe": "Get line lineno from file named filename. This function will never raise anexception \u2014 it will return '' on errors (the terminating newline characterwill be included for lines that are found)."
    },
    {
        "id": 629,
        "name": "os.getloadavg()",
        "describe": "Return the number of processes in the system run queue averaged over the last1, 5, and 15 minutes or raises OSError if the load average wasunobtainable."
    },
    {
        "id": 630,
        "name": "locale.getlocale()",
        "describe": "Returns the current setting for the given locale category as sequence containinglanguage code, encoding. category may be one of the LC_* valuesexcept LC_ALL.  It defaults to LC_CTYPE."
    },
    {
        "id": 631,
        "name": "os.getlogin()",
        "describe": "Return the name of the user logged in on the controlling terminal of theprocess.  For most purposes, it is more useful to usegetpass.getuser() since the latter checks the environment variablesLOGNAME or USERNAME to find out who the user is, andfalls back to pwd.getpwuid(os.getuid())[0] to get the login name of thecurrent real user id."
    },
    {
        "id": 632,
        "name": "inspect.getmembers()",
        "describe": "Return all the members of an object in a list of (name, value)pairs sorted by name. If the optional predicate argument\u2014which will becalled with the value object of each member\u2014is supplied, only membersfor which the predicate returns a true value are included."
    },
    {
        "id": 633,
        "name": "inspect.getmodule()",
        "describe": "Try to guess which module an object was defined in."
    },
    {
        "id": 634,
        "name": "inspect.getmodulename()",
        "describe": "Return the name of the module named by the file path, without including thenames of enclosing packages. The file extension is checked against all ofthe entries in importlib.machinery.all_suffixes(). If it matches,the final path component is returned with the extension removed.Otherwise, None is returned."
    },
    {
        "id": 635,
        "name": "curses.getmouse()",
        "describe": "After getch() returns KEY_MOUSE to signal a mouse event, thismethod should be called to retrieve the queued mouse event, represented as a5-tuple (id, x, y, z, bstate). id is an ID value used to distinguishmultiple devices, and x, y, z are the event\u2019s coordinates.  (z iscurrently unused.)  bstate is an integer value whose bits will be set toindicate the type of event, and will be the bitwise OR of one or more of thefollowing constants, where n is the button number from 1 to 4:BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED,BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED,BUTTON_SHIFT, BUTTON_CTRL, BUTTON_ALT."
    },
    {
        "id": 636,
        "name": "inspect.getmro()",
        "describe": "Return a tuple of class cls\u2019s base classes, including cls, in method resolutionorder.  No class appears more than once in this tuple. Note that the methodresolution order depends on cls\u2019s type.  Unless a very peculiar user-definedmetatype is in use, cls will be the first element of the tuple."
    },
    {
        "id": 637,
        "name": "socket.getnameinfo()",
        "describe": "Translate a socket address sockaddr into a 2-tuple (host, port). Dependingon the settings of flags, the result can contain a fully-qualified domain nameor numeric address representation in host.  Similarly, port can contain astring port name or a numeric port number."
    },
    {
        "id": 638,
        "name": "uuid.getnode()",
        "describe": "Get the hardware address as a 48-bit positive integer.  The first time thisruns, it may launch a separate program, which could be quite slow.  If allattempts to obtain the hardware address fail, we choose a random 48-bitnumber with the multicast bit (least significant bit of the first octet)set to 1 as recommended in RFC 4122.  \u201cHardware address\u201d means the MACaddress of a network interface.  On a machine with multiple networkinterfaces, universally administered MAC addresses (i.e. where the secondleast significant bit of the first octet is unset) will be preferred overlocally administered MAC addresses, but with no other ordering guarantees."
    },
    {
        "id": 639,
        "name": "getopt.getopt()",
        "describe": "Parses command line options and parameter list.  args is the argument list tobe parsed, without the leading reference to the running program. Typically, thismeans sys.argv[1:]. shortopts is the string of option letters that thescript wants to recognize, with options that require an argument followed by acolon (':'; i.e., the same format that Unix getopt() uses)."
    },
    {
        "id": 640,
        "name": "inspect.getouterframes()",
        "describe": "Get a list of frame records for a frame and all outer frames.  These framesrepresent the calls that lead to the creation of frame. The first entry in thereturned list represents frame; the last entry represents the outermost callon frame\u2019s stack."
    },
    {
        "id": 641,
        "name": "subprocess.getoutput()",
        "describe": "Return output (stdout and stderr) of executing cmd in a shell."
    },
    {
        "id": 642,
        "name": "resource.getpagesize()",
        "describe": "Returns the number of bytes in a system page. (This need not be the same as thehardware page size.)"
    },
    {
        "id": 643,
        "name": "getpass.getpass()",
        "describe": "Prompt the user for a password without echoing.  The user is prompted usingthe string prompt, which defaults to 'Password: '.  On Unix, theprompt is written to the file-like object stream using the replace errorhandler if needed.  stream defaults to the controlling terminal(/dev/tty) or if that is unavailable to sys.stderr (thisargument is ignored on Windows)."
    },
    {
        "id": 644,
        "name": "turtle.getpen()",
        "describe": "Return the Turtle object itself.  Only reasonable use: as a function toreturn the \u201canonymous turtle\u201d:"
    },
    {
        "id": 645,
        "name": "os.getpgid()",
        "describe": "Return the process group id of the process with process id pid. If pid is 0,the process group id of the current process is returned."
    },
    {
        "id": 646,
        "name": "os.getpgrp()",
        "describe": "Return the id of the current process group."
    },
    {
        "id": 647,
        "name": "os.getpid()",
        "describe": "Return the current process id."
    },
    {
        "id": 648,
        "name": "os.getppid()",
        "describe": "Return the parent\u2019s process id.  When the parent process has exited, on Unixthe id returned is the one of the init process (1), on Windows it is stillthe same id, which may be already reused by another process."
    },
    {
        "id": 649,
        "name": "locale.getpreferredencoding()",
        "describe": "Return the encoding used for text data, according to user preferences.  Userpreferences are expressed differently on different systems, and might not beavailable programmatically on some systems, so this function only returns aguess."
    },
    {
        "id": 650,
        "name": "os.getpriority()",
        "describe": "Get program scheduling priority.  The value which is one ofPRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and whois interpreted relative to which (a process identifier forPRIO_PROCESS, process group identifier for PRIO_PGRP, and auser ID for PRIO_USER).  A zero value for who denotes(respectively) the calling process, the process group of the calling process,or the real user ID of the calling process."
    },
    {
        "id": 651,
        "name": "sys.getprofile()",
        "describe": "Get the profiler function as set by setprofile()."
    },
    {
        "id": 652,
        "name": "socket.getprotobyname()",
        "describe": "Translate an Internet protocol name (for example, 'icmp') to a constantsuitable for passing as the (optional) third argument to the socket()function.  This is usually only needed for sockets opened in \u201craw\u201d mode(SOCK_RAW); for the normal socket modes, the correct protocol is chosenautomatically if the protocol is omitted or zero."
    },
    {
        "id": 653,
        "name": "pwd.getpwall()",
        "describe": "Return a list of all available password database entries, in arbitrary order."
    },
    {
        "id": 654,
        "name": "pwd.getpwnam()",
        "describe": "Return the password database entry for the given user name."
    },
    {
        "id": 655,
        "name": "pwd.getpwuid()",
        "describe": "Return the password database entry for the given numeric user ID."
    },
    {
        "id": 656,
        "name": "random.getrandbits()",
        "describe": "Returns a non-negative Python integer with k random bits. This methodis supplied with the MersenneTwister generator and some other generatorsmay also provide it as an optional part of the API. When available,getrandbits() enables randrange() to handle arbitrarily largeranges."
    },
    {
        "id": 657,
        "name": "os.getrandom()",
        "describe": "Get up to size random bytes. The function can return less bytes thanrequested."
    },
    {
        "id": 658,
        "name": "codecs.getreader()",
        "describe": "Look up the codec for the given encoding and return its StreamReaderclass or factory function."
    },
    {
        "id": 659,
        "name": "sys.getrecursionlimit()",
        "describe": "Return the current value of the recursion limit, the maximum depth of the Pythoninterpreter stack.  This limit prevents infinite recursion from causing anoverflow of the C stack and crashing Python.  It can be set bysetrecursionlimit()."
    },
    {
        "id": 660,
        "name": "sys.getrefcount()",
        "describe": "Return the reference count of the object.  The count returned is generally onehigher than you might expect, because it includes the (temporary) reference asan argument to getrefcount()."
    },
    {
        "id": 661,
        "name": "os.getresgid()",
        "describe": "Return a tuple (rgid, egid, sgid) denoting the current process\u2019sreal, effective, and saved group ids."
    },
    {
        "id": 662,
        "name": "os.getresuid()",
        "describe": "Return a tuple (ruid, euid, suid) denoting the current process\u2019sreal, effective, and saved user ids."
    },
    {
        "id": 663,
        "name": "resource.getrlimit()",
        "describe": "Returns a tuple (soft, hard) with the current soft and hard limits ofresource. Raises ValueError if an invalid resource is specified, orerror if the underlying system call fails unexpectedly."
    },
    {
        "id": 664,
        "name": "resource.getrusage()",
        "describe": "This function returns an object that describes the resources consumed by eitherthe current process or its children, as specified by the who parameter.  Thewho parameter should be specified using one of the RUSAGE_*constants described below."
    },
    {
        "id": 665,
        "name": "audioop.getsample()",
        "describe": "Return the value of sample index from the fragment."
    },
    {
        "id": 666,
        "name": "turtle.getscreen()",
        "describe": "Return the TurtleScreen object the turtle is drawing on.TurtleScreen methods can then be called for that object."
    },
    {
        "id": 667,
        "name": "socket.getservbyname()",
        "describe": "Translate an Internet service name and protocol name to a port number for thatservice.  The optional protocol name, if given, should be 'tcp' or'udp', otherwise any protocol will match."
    },
    {
        "id": 668,
        "name": "socket.getservbyport()",
        "describe": "Translate an Internet port number and protocol name to a service name for thatservice.  The optional protocol name, if given, should be 'tcp' or'udp', otherwise any protocol will match."
    },
    {
        "id": 669,
        "name": "turtle.getshapes()",
        "describe": "Return a list of names of all currently available turtle shapes."
    },
    {
        "id": 670,
        "name": "os.getsid()",
        "describe": "Call the system call getsid().  See the Unix manual for the semantics."
    },
    {
        "id": 671,
        "name": "signal.getsignal()",
        "describe": "Return the current signal handler for the signal signalnum. The returned valuemay be a callable Python object, or one of the special valuessignal.SIG_IGN, signal.SIG_DFL or None.  Here,signal.SIG_IGN means that the signal was previously ignored,signal.SIG_DFL means that the default way of handling the signal waspreviously in use, and None means that the previous signal handler was notinstalled from Python."
    },
    {
        "id": 672,
        "name": "site.getsitepackages()",
        "describe": "Return a list containing all global site-packages directories."
    },
    {
        "id": 673,
        "name": "sys.getsizeof()",
        "describe": "Return the size of an object in bytes. The object can be any type ofobject. All built-in objects will return correct results, but thisdoes not have to hold true for third-party extensions as it is implementationspecific."
    },
    {
        "id": 674,
        "name": "inspect.getsource()",
        "describe": "Return the text of the source code for an object. The argument may be a module,class, method, function, traceback, frame, or code object.  The source code isreturned as a single string.  An OSError is raised if the source codecannot be retrieved."
    },
    {
        "id": 675,
        "name": "inspect.getsourcefile()",
        "describe": "Return the name of the Python source file in which an object was defined.  Thiswill fail with a TypeError if the object is a built-in module, class, orfunction."
    },
    {
        "id": 676,
        "name": "inspect.getsourcelines()",
        "describe": "Return a list of source lines and starting line number for an object. Theargument may be a module, class, method, function, traceback, frame, or codeobject.  The source code is returned as a list of the lines corresponding to theobject and the line number indicates where in the original source file the firstline of code was found.  An OSError is raised if the source code cannotbe retrieved."
    },
    {
        "id": 677,
        "name": "spwd.getspall()",
        "describe": "Return a list of all available shadow password database entries, in arbitraryorder."
    },
    {
        "id": 678,
        "name": "spwd.getspnam()",
        "describe": "Return the shadow password database entry for the given user name."
    },
    {
        "id": 679,
        "name": "random.getstate()",
        "describe": "Return an object capturing the current internal state of the generator.  Thisobject can be passed to setstate() to restore the state."
    },
    {
        "id": 680,
        "name": "subprocess.getstatusoutput()",
        "describe": "Return (exitcode, output) of executing cmd in a shell."
    },
    {
        "id": 681,
        "name": "window.getstr()",
        "describe": "Read a bytes object from the user, with primitive line editing capacity."
    },
    {
        "id": 682,
        "name": "sys.getswitchinterval()",
        "describe": "Return the interpreter\u2019s \u201cthread switch interval\u201d; seesetswitchinterval()."
    },
    {
        "id": 683,
        "name": "curses.getsyx()",
        "describe": "Return the current coordinates of the virtual screen cursor as a tuple(y, x).  If leaveok is currently True, then return (-1, -1)."
    },
    {
        "id": 684,
        "name": "tempfile.gettempdir()",
        "describe": "Return the name of the directory used for temporary files. Thisdefines the default value for the dir argument to all functionsin this module."
    },
    {
        "id": 685,
        "name": "tempfile.gettempdirb()",
        "describe": "Same as gettempdir() but the return value is in bytes."
    },
    {
        "id": 686,
        "name": "tempfile.gettempprefix()",
        "describe": "Return the filename prefix used to create temporary files.  This does notcontain the directory component."
    },
    {
        "id": 687,
        "name": "tempfile.gettempprefixb()",
        "describe": "Same as gettempprefix() but the return value is in bytes."
    },
    {
        "id": 688,
        "name": "gettext.gettext()",
        "describe": "Return the localized translation of message, based on the current globaldomain, language, and locale directory.  This function is usually aliased as_() in the local namespace (see examples below)."
    },
    {
        "id": 689,
        "name": "sys.gettrace()",
        "describe": "Get the trace function as set by settrace()."
    },
    {
        "id": 690,
        "name": "turtle.getturtle()",
        "describe": "Return the Turtle object itself.  Only reasonable use: as a function toreturn the \u201canonymous turtle\u201d:"
    },
    {
        "id": 691,
        "name": "os.getuid()",
        "describe": "Return the current process\u2019s real user id."
    },
    {
        "id": 692,
        "name": "getpass.getuser()",
        "describe": "Return the \u201clogin name\u201d of the user."
    },
    {
        "id": 693,
        "name": "site.getuserbase()",
        "describe": "Return the path of the user base directory, USER_BASE.  If it is notinitialized yet, this function will also set it, respectingPYTHONUSERBASE."
    },
    {
        "id": 694,
        "name": "site.getusersitepackages()",
        "describe": "Return the path of the user-specific site-packages directory,USER_SITE.  If it is not initialized yet, this function will also setit, respecting USER_BASE.  To determine if the user-specificsite-packages was added to sys.path ENABLE_USER_SITE should beused."
    },
    {
        "id": 695,
        "name": "msvcrt.getwch()",
        "describe": "Wide char variant of getch(), returning a Unicode value."
    },
    {
        "id": 696,
        "name": "msvcrt.getwche()",
        "describe": "Wide char variant of getche(), returning a Unicode value."
    },
    {
        "id": 697,
        "name": "weakref.getweakrefcount()",
        "describe": "Return the number of weak references and proxies which refer to object."
    },
    {
        "id": 698,
        "name": "weakref.getweakrefs()",
        "describe": "Return a list of all weak reference and proxy objects which refer to object."
    },
    {
        "id": 699,
        "name": "curses.getwin()",
        "describe": "Read window related data stored in the file by an earlier putwin() call.The routine then creates and initializes a new window using that data, returningthe new window object."
    },
    {
        "id": 700,
        "name": "sys.getwindowsversion()",
        "describe": "Return a named tuple describing the Windows versioncurrently running.  The named elements are major, minor,build, platform, service_pack, service_pack_minor,service_pack_major, suite_mask, product_type andplatform_version. service_pack contains a string,platform_version a 3-tuple and all other values areintegers. The components can also be accessed by name, sosys.getwindowsversion()[0] is equivalent tosys.getwindowsversion().major. For compatibility with priorversions, only the first 5 elements are retrievable by indexing."
    },
    {
        "id": 701,
        "name": "codecs.getwriter()",
        "describe": "Look up the codec for the given encoding and return its StreamWriterclass or factory function."
    },
    {
        "id": 702,
        "name": "os.getxattr()",
        "describe": "Return the value of the extended filesystem attribute attribute forpath. attribute can be bytes or str (directly or indirectly through thePathLike interface). If it is str, it is encoded with the filesystemencoding."
    },
    {
        "id": 703,
        "name": "glob.glob()",
        "describe": "Return a possibly-empty list of path names that match pathname, which must bea string containing a path specification. pathname can be either absolute(like /usr/src/Python-1.5/Makefile) or relative (like../../Tools/*/*.gif), and can contain shell-style wildcards. Brokensymlinks are included in the results (as in the shell). Whether or not theresults are sorted depends on the file system.  If a file that satisfiesconditions is removed or added during the call of this function, whethera path name for that file be included is unspecified."
    },
    {
        "id": 704,
        "name": "time.gmtime()",
        "describe": "Convert a time expressed in seconds since the epoch to a struct_time inUTC in which the dst flag is always zero.  If secs is not provided orNone, the current time as returned by time() is used.  Fractionsof a second are ignored.  See above for a description of thestruct_time object. See calendar.timegm() for the inverse of thisfunction."
    },
    {
        "id": 705,
        "name": "getopt.gnu_getopt()",
        "describe": "This function works like getopt(), except that GNU style scanning mode isused by default. This means that option and non-option arguments may beintermixed. The getopt() function stops processing options as soon as anon-option argument is encountered."
    },
    {
        "id": 706,
        "name": "turtle.goto()",
        "describe": "x \u2013 a number or a pair/vector of numbers"
    },
    {
        "id": 707,
        "name": "itertools.groupby()",
        "describe": "Make an iterator that returns consecutive keys and groups from the iterable.The key is a function computing a key value for each element.  If notspecified or is None, key defaults to an identity function and returnsthe element unchanged.  Generally, the iterable needs to already be sorted onthe same key function."
    },
    {
        "id": 708,
        "name": "operator.gt()",
        "describe": "Perform \u201crich comparisons\u201d between a and b. Specifically, lt(a, b) isequivalent to a < b, le(a, b) is equivalent to a <= b, eq(a,b) is equivalent to a == b, ne(a, b) is equivalent to a != b,gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a>= b.  Note that these functions can return any value, which mayor may not be interpretable as a Boolean value.  SeeComparisons for more information about rich comparisons."
    },
    {
        "id": 709,
        "name": "mimetypes.guess_all_extensions()",
        "describe": "Guess the extensions for a file based on its MIME type, given by type. Thereturn value is a list of strings giving all possible filename extensions,including the leading dot ('.').  The extensions are not guaranteed to havebeen associated with any particular data stream, but would be mapped to the MIMEtype type by guess_type()."
    },
    {
        "id": 710,
        "name": "mimetypes.guess_extension()",
        "describe": "Guess the extension for a file based on its MIME type, given by type. Thereturn value is a string giving a filename extension, including the leading dot('.').  The extension is not guaranteed to have been associated with anyparticular data stream, but would be mapped to the MIME type type byguess_type().  If no extension can be guessed for type, None isreturned."
    },
    {
        "id": 711,
        "name": "mimetypes.guess_type()",
        "describe": "Guess the type of a file based on its filename, path or URL, given by url.URL can be a string or a path-like object."
    },
    {
        "id": 712,
        "name": "curses.halfdelay()",
        "describe": "Used for half-delay mode, which is similar to cbreak mode in that characterstyped by the user are immediately available to the program. However, afterblocking for tenths tenths of seconds, raise an exception if nothing hasbeen typed.  The value of tenths must be a number between 1 and 255.  Usenocbreak() to leave half-delay mode."
    },
    {
        "id": 713,
        "name": "cgitb.handler()",
        "describe": "This function handles an exception using the default settings (that is, show areport in the browser, but don\u2019t log to a file). This can be used when you\u2019vecaught an exception and want to report it using cgitb.  The optionalinfo argument should be a 3-tuple containing an exception type, exceptionvalue, and traceback object, exactly like the tuple returned bysys.exc_info().  If the info argument is not supplied, the currentexception is obtained from sys.exc_info()."
    },
    {
        "id": 714,
        "name": "statistics.harmonic_mean()",
        "describe": "Return the harmonic mean of data, a sequence or iterable ofreal-valued numbers."
    },
    {
        "id": 715,
        "name": "curses.has_colors()",
        "describe": "Return True if the terminal can display colors; otherwise, return False."
    },
    {
        "id": 716,
        "name": "socket.has_dualstack_ipv6()",
        "describe": "Return True if the platform supports creating a TCP socket which canhandle both IPv4 and IPv6 connections."
    },
    {
        "id": 717,
        "name": "curses.has_ic()",
        "describe": "Return True if the terminal has insert- and delete-character capabilities.This function is included for historical reasons only, as all modern softwareterminal emulators have such capabilities."
    },
    {
        "id": 718,
        "name": "curses.has_il()",
        "describe": "Return True if the terminal has insert- and delete-line capabilities, or cansimulate  them  using scrolling regions. This function is included forhistorical reasons only, as all modern software terminal emulators have suchcapabilities."
    },
    {
        "id": 719,
        "name": "curses.has_key()",
        "describe": "Take a key value ch, and return True if the current terminal type recognizesa key with that value."
    },
    {
        "id": 720,
        "name": "turtle.heading()",
        "describe": "Return the turtle\u2019s current heading (value depends on the turtle mode, seemode())."
    },
    {
        "id": 721,
        "name": "heapq.heapify()",
        "describe": "Transform list x into a heap, in-place, in linear time."
    },
    {
        "id": 722,
        "name": "msvcrt.heapmin()",
        "describe": "Force the malloc() heap to clean itself up and return unused blocks tothe operating system.  On failure, this raises OSError."
    },
    {
        "id": 723,
        "name": "heapq.heappop()",
        "describe": "Pop and return the smallest item from the heap, maintaining the heapinvariant.  If the heap is empty, IndexError is raised.  To access thesmallest item without popping it, use heap[0]."
    },
    {
        "id": 724,
        "name": "heapq.heappush()",
        "describe": "Push the value item onto the heap, maintaining the heap invariant."
    },
    {
        "id": 725,
        "name": "heapq.heappushpop()",
        "describe": "Push item on the heap, then pop and return the smallest item from theheap.  The combined action runs more efficiently than heappush()followed by a separate call to heappop()."
    },
    {
        "id": 726,
        "name": "heapq.heapreplace()",
        "describe": "Pop and return the smallest item from the heap, and also push the new item.The heap size doesn\u2019t change. If the heap is empty, IndexError is raised."
    },
    {
        "id": 727,
        "name": "binhex.hexbin()",
        "describe": "Decode a binhex file input. input may be a filename or a file-like objectsupporting read() and close() methods. The resulting file is writtento a file named output, unless the argument is None in which case theoutput filename is read from the binhex file."
    },
    {
        "id": 728,
        "name": "binascii.hexlify()",
        "describe": "Return the hexadecimal representation of the binary data.  Every byte ofdata is converted into the corresponding 2-digit hex representation.  Thereturned bytes object is therefore twice as long as the length of data."
    },
    {
        "id": 729,
        "name": "turtle.hideturtle()",
        "describe": "Make the turtle invisible.  It\u2019s a good idea to do this while you\u2019re in themiddle of doing some complex drawing, because hiding the turtle speeds up thedrawing observably."
    },
    {
        "id": 730,
        "name": "window.hline()",
        "describe": "Display a horizontal line starting at (y, x) with length n consisting ofthe character ch."
    },
    {
        "id": 731,
        "name": "colorsys.hls_to_rgb()",
        "describe": "Convert the color from HLS coordinates to RGB coordinates."
    },
    {
        "id": 732,
        "name": "turtle.home()",
        "describe": "Move turtle to the origin \u2013 coordinates (0,0) \u2013 and set its heading toits start-orientation (which depends on the mode, see mode())."
    },
    {
        "id": 733,
        "name": "fileinput.hook_compressed()",
        "describe": "Transparently opens files compressed with gzip and bzip2 (recognized by theextensions '.gz' and '.bz2') using the gzip and bz2modules.  If the filename extension is not '.gz' or '.bz2', the file isopened normally (ie, using open() without any decompression)."
    },
    {
        "id": 734,
        "name": "fileinput.hook_encoded()",
        "describe": "Returns a hook which opens each file with open(), using the givenencoding and errors to read the file."
    },
    {
        "id": 735,
        "name": "colorsys.hsv_to_rgb()",
        "describe": "Convert the color from HSV coordinates to RGB coordinates."
    },
    {
        "id": 736,
        "name": "turtle.ht()",
        "describe": "Make the turtle invisible.  It\u2019s a good idea to do this while you\u2019re in themiddle of doing some complex drawing, because hiding the turtle speeds up thedrawing observably."
    },
    {
        "id": 737,
        "name": "cgitb.html()",
        "describe": "This function handles the exception described by info (a 3-tuple containingthe result of sys.exc_info()), formatting its traceback as HTML andreturning the result as a string. The optional argument context is thenumber of lines of context to display around the current line of source codein the traceback; this defaults to 5."
    },
    {
        "id": 738,
        "name": "socket.htonl()",
        "describe": "Convert 32-bit positive integers from host to network byte order.  On machineswhere the host byte order is the same as network byte order, this is a no-op;otherwise, it performs a 4-byte swap operation."
    },
    {
        "id": 739,
        "name": "socket.htons()",
        "describe": "Convert 16-bit positive integers from host to network byte order.  On machineswhere the host byte order is the same as network byte order, this is a no-op;otherwise, it performs a 2-byte swap operation."
    },
    {
        "id": 740,
        "name": "math.hypot()",
        "describe": "Return the Euclidean norm, sqrt(sum(x**2 for x in coordinates)).This is the length of the vector from the origin to the pointgiven by the coordinates."
    },
    {
        "id": 741,
        "name": "operator.iadd()",
        "describe": "a = iadd(a, b) is equivalent to a += b."
    },
    {
        "id": 742,
        "name": "operator.iand()",
        "describe": "a = iand(a, b) is equivalent to a &= b."
    },
    {
        "id": 743,
        "name": "operator.iconcat()",
        "describe": "a = iconcat(a, b) is equivalent to a += b for a and b sequences."
    },
    {
        "id": 744,
        "name": "socket.if_indextoname()",
        "describe": "Return a network interface name corresponding to aninterface index number.OSError if no interface with the given index exists."
    },
    {
        "id": 745,
        "name": "socket.if_nameindex()",
        "describe": "Return a list of network interface information(index int, name string) tuples.OSError if the system call fails."
    },
    {
        "id": 746,
        "name": "socket.if_nametoindex()",
        "describe": "Return a network interface index number corresponding to aninterface name.OSError if no interface with the given name exists."
    },
    {
        "id": 747,
        "name": "operator.ifloordiv()",
        "describe": "a = ifloordiv(a, b) is equivalent to a //= b."
    },
    {
        "id": 748,
        "name": "glob.iglob()",
        "describe": "Return an iterator which yields the same values as glob()without actually storing them all simultaneously."
    },
    {
        "id": 749,
        "name": "codecs.ignore_errors()",
        "describe": "Implements the 'ignore' error handling: malformed data is ignored andencoding or decoding is continued without further notice."
    },
    {
        "id": 750,
        "name": "shutil.ignore_patterns()",
        "describe": "This factory function creates a function that can be used as a callable forcopytree()\u2019s ignore argument, ignoring files and directories thatmatch one of the glob-style patterns provided.  See the example below."
    },
    {
        "id": 751,
        "name": "operator.ilshift()",
        "describe": "a = ilshift(a, b) is equivalent to a <<= b."
    },
    {
        "id": 752,
        "name": "operator.imatmul()",
        "describe": "a = imatmul(a, b) is equivalent to a @= b."
    },
    {
        "id": 753,
        "name": "operator.imod()",
        "describe": "a = imod(a, b) is equivalent to a %= b."
    },
    {
        "id": 754,
        "name": "importlib.import_module()",
        "describe": "Import a module. The name argument specifies what module toimport in absolute or relative terms(e.g. either pkg.mod or ..mod). If the name isspecified in relative terms, then the package argument must be set tothe name of the package which is to act as the anchor for resolving thepackage name (e.g. import_module('..mod', 'pkg.subpkg') will importpkg.mod)."
    },
    {
        "id": 755,
        "name": "operator.imul()",
        "describe": "a = imul(a, b) is equivalent to a *= b."
    },
    {
        "id": 756,
        "name": "stringprep.in_table_a1()",
        "describe": "Determine whether code is in tableA.1 (Unassigned code points in Unicode 3.2)."
    },
    {
        "id": 757,
        "name": "stringprep.in_table_b1()",
        "describe": "Determine whether code is in tableB.1 (Commonly mapped to nothing)."
    },
    {
        "id": 758,
        "name": "stringprep.in_table_c11()",
        "describe": "Determine whether code is in tableC.1.1  (ASCII space characters)."
    },
    {
        "id": 759,
        "name": "stringprep.in_table_c11_c12()",
        "describe": "Determine whether code is in tableC.1  (Space characters, union of C.1.1 andC.1.2)."
    },
    {
        "id": 760,
        "name": "stringprep.in_table_c12()",
        "describe": "Determine whether code is in tableC.1.2  (Non-ASCII space characters)."
    },
    {
        "id": 761,
        "name": "stringprep.in_table_c21()",
        "describe": "Determine whether code is in tableC.2.1  (ASCII control characters)."
    },
    {
        "id": 762,
        "name": "stringprep.in_table_c21_c22()",
        "describe": "Determine whether code is in tableC.2  (Control characters, union of C.2.1 andC.2.2)."
    },
    {
        "id": 763,
        "name": "stringprep.in_table_c22()",
        "describe": "Determine whether code is in tableC.2.2  (Non-ASCII control characters)."
    },
    {
        "id": 764,
        "name": "stringprep.in_table_c3()",
        "describe": "Determine whether code is in tableC.3  (Private use)."
    },
    {
        "id": 765,
        "name": "stringprep.in_table_c4()",
        "describe": "Determine whether code is in tableC.4  (Non-character code points)."
    },
    {
        "id": 766,
        "name": "stringprep.in_table_c5()",
        "describe": "Determine whether code is in tableC.5  (Surrogate codes)."
    },
    {
        "id": 767,
        "name": "stringprep.in_table_c6()",
        "describe": "Determine whether code is in tableC.6  (Inappropriate for plain text)."
    },
    {
        "id": 768,
        "name": "stringprep.in_table_c7()",
        "describe": "Determine whether code is in tableC.7  (Inappropriate for canonicalrepresentation)."
    },
    {
        "id": 769,
        "name": "stringprep.in_table_c8()",
        "describe": "Determine whether code is in tableC.8  (Change display properties or aredeprecated)."
    },
    {
        "id": 770,
        "name": "stringprep.in_table_c9()",
        "describe": "Determine whether code is in tableC.9  (Tagging characters)."
    },
    {
        "id": 771,
        "name": "stringprep.in_table_d1()",
        "describe": "Determine whether code is in tableD.1  (Characters with bidirectional property\u201cR\u201d or \u201cAL\u201d)."
    },
    {
        "id": 772,
        "name": "stringprep.in_table_d2()",
        "describe": "Determine whether code is in tableD.2  (Characters with bidirectional property\u201cL\u201d)."
    },
    {
        "id": 773,
        "name": "ast.increment_lineno()",
        "describe": "Increment the line number and end line number of each node in the treestarting at node by n. This is useful to \u201cmove code\u201d to a differentlocation in a file."
    },
    {
        "id": 774,
        "name": "textwrap.indent()",
        "describe": "Add prefix to the beginning of selected lines in text."
    },
    {
        "id": 775,
        "name": "operator.index()",
        "describe": "Return a converted to an integer.  Equivalent to a.__index__()."
    },
    {
        "id": 776,
        "name": "operator.indexOf()",
        "describe": "Return the index of the first of occurrence of b in a."
    },
    {
        "id": 777,
        "name": "socket.inet_aton()",
        "describe": "Convert an IPv4 address from dotted-quad string format (for example,\u2018123.45.67.89\u2019) to 32-bit packed binary format, as a bytes object four characters inlength.  This is useful when conversing with a program that uses the standard Clibrary and needs objects of type struct in_addr, which is the C typefor the 32-bit packed binary this function returns."
    },
    {
        "id": 778,
        "name": "socket.inet_ntoa()",
        "describe": "Convert a 32-bit packed IPv4 address (a bytes-like object fourbytes in length) to its standard dotted-quad string representation (for example,\u2018123.45.67.89\u2019).  This is useful when conversing with a program that uses thestandard C library and needs objects of type struct in_addr, whichis the C type for the 32-bit packed binary data this function takes as anargument."
    },
    {
        "id": 779,
        "name": "socket.inet_ntop()",
        "describe": "Convert a packed IP address (a bytes-like object of some number ofbytes) to its standard, family-specific string representation (forexample, '7.10.0.5' or '5aef:2b::8').inet_ntop() is useful when a library or network protocol returns anobject of type struct in_addr (similar to inet_ntoa()) orstruct in6_addr."
    },
    {
        "id": 780,
        "name": "socket.inet_pton()",
        "describe": "Convert an IP address from its family-specific string format to a packed,binary format. inet_pton() is useful when a library or network protocolcalls for an object of type struct in_addr (similar toinet_aton()) or struct in6_addr."
    },
    {
        "id": 781,
        "name": "logging.info()",
        "describe": "Logs a message with level INFO on the root logger. The arguments areinterpreted as for debug()."
    },
    {
        "id": 782,
        "name": "mimetypes.init()",
        "describe": "Initialize the internal data structures.  If given, files must be a sequenceof file names which should be used to augment the default type map.  If omitted,the file names to use are taken from knownfiles; on Windows, thecurrent registry settings are loaded.  Each file named in files orknownfiles takes precedence over those named before it.  Callinginit() repeatedly is allowed."
    },
    {
        "id": 783,
        "name": "curses.init_color()",
        "describe": "Change the definition of a color, taking the number of the color to be changedfollowed by three RGB values (for the amounts of red, green, and bluecomponents).  The value of color_number must be between 0 andCOLORS - 1.  Each of r, g, b, must be a value between 0 and1000.  When init_color() is used, all occurrences of that color on thescreen immediately change to the new definition.  This function is a no-op onmost terminals; it is active only if can_change_color() returns True."
    },
    {
        "id": 784,
        "name": "msilib.init_database()",
        "describe": "Create and return a new database name, initialize it with schema, and setthe properties ProductName, ProductCode, ProductVersion, andManufacturer."
    },
    {
        "id": 785,
        "name": "curses.init_pair()",
        "describe": "Change the definition of a color-pair.  It takes three arguments: the number ofthe color-pair to be changed, the foreground color number, and the backgroundcolor number.  The value of pair_number must be between 1 andCOLOR_PAIRS - 1 (the 0 color pair is wired to white on black and cannotbe changed).  The value of fg and bg arguments must be between 0 andCOLORS - 1, or, after calling use_default_colors(), -1.If the color-pair was previously initialized, the screen isrefreshed and all occurrences of that color-pair are changed to the newdefinition."
    },
    {
        "id": 786,
        "name": "os.initgroups()",
        "describe": "Call the system initgroups() to initialize the group access list with all ofthe groups of which the specified username is a member, plus the specifiedgroup id."
    },
    {
        "id": 787,
        "name": "curses.initscr()",
        "describe": "Initialize the library. Return a window objectwhich represents the whole screen."
    },
    {
        "id": 788,
        "name": "window.insch()",
        "describe": "Paint character ch at (y, x) with attributes attr, moving the line fromposition x right by one character."
    },
    {
        "id": 789,
        "name": "readline.insert_text()",
        "describe": "Insert text into the line buffer at the cursor position.  This callsrl_insert_text() in the underlying library, but ignoresthe return value."
    },
    {
        "id": 790,
        "name": "window.insnstr()",
        "describe": "Insert a character string (as many characters as will fit on the line) beforethe character under the cursor, up to n characters.   If n is zero ornegative, the entire string is inserted. All characters to the right of thecursor are shifted right, with the rightmost characters on the line being lost.The cursor position does not change (after moving to y, x, if specified)."
    },
    {
        "id": 791,
        "name": "bisect.insort()",
        "describe": "Similar to insort_left(), but inserting x in a after any existingentries of x."
    },
    {
        "id": 792,
        "name": "bisect.insort_left()",
        "describe": "Insert x in a in sorted order.  This is equivalent toa.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a isalready sorted.  Keep in mind that the O(log n) search is dominated bythe slow O(n) insertion step."
    },
    {
        "id": 793,
        "name": "bisect.insort_right()",
        "describe": "Similar to insort_left(), but inserting x in a after any existingentries of x."
    },
    {
        "id": 794,
        "name": "window.insstr()",
        "describe": "Insert a character string (as many characters as will fit on the line) beforethe character under the cursor.  All characters to the right of the cursor areshifted right, with the rightmost characters on the line being lost.  The cursorposition does not change (after moving to y, x, if specified)."
    },
    {
        "id": 795,
        "name": "gettext.install()",
        "describe": "This installs the function _() in Python\u2019s builtins namespace, based ondomain, localedir, and codeset which are passed to the functiontranslation()."
    },
    {
        "id": 796,
        "name": "unittest.installHandler()",
        "describe": "Install the control-c handler. When a signal.SIGINT is received(usually in response to the user pressing control-c) all registered resultshave stop() called."
    },
    {
        "id": 797,
        "name": "window.instr()",
        "describe": "Return a bytes object of characters, extracted from the window starting at thecurrent cursor position, or at y, x if specified. Attributes are strippedfrom the characters.  If n is specified, instr() returns a stringat most n characters long (exclusive of the trailing NUL)."
    },
    {
        "id": 798,
        "name": "code.interact()",
        "describe": "Convenience function to run a read-eval-print loop.  This creates a newinstance of InteractiveConsole and sets readfunc to be used asthe InteractiveConsole.raw_input() method, if provided.  If local isprovided, it is passed to the InteractiveConsole constructor foruse as the default namespace for the interpreter loop.  The interact()method of the instance is then run with banner and exitmsg passed as thebanner and exit message to use, if provided.  The console object is discardedafter use."
    },
    {
        "id": 799,
        "name": "sys.intern()",
        "describe": "Enter string in the table of \u201cinterned\u201d strings and return the interned string\u2013 which is string itself or a copy. Interning strings is useful to gain alittle performance on dictionary lookup \u2013 if the keys in a dictionary areinterned, and the lookup key is interned, the key comparisons (after hashing)can be done by a pointer compare instead of a string compare.  Normally, thenames used in Python programs are automatically interned, and the dictionariesused to hold module, class or instance attributes have interned keys."
    },
    {
        "id": 800,
        "name": "_thread.interrupt_main()",
        "describe": "Simulate the effect of a signal.SIGINT signal arriving in the mainthread. A thread can use this function to interrupt the main thread."
    },
    {
        "id": 801,
        "name": "frozenset.intersection()",
        "describe": "Return a new set with elements common to the set and all others."
    },
    {
        "id": 802,
        "name": "frozenset.intersection_update()",
        "describe": "Update the set, keeping only elements found in it and all others."
    },
    {
        "id": 803,
        "name": "operator.inv()",
        "describe": "Return the bitwise inverse of the number obj.  This is equivalent to ~obj."
    },
    {
        "id": 804,
        "name": "operator.invert()",
        "describe": "Return the bitwise inverse of the number obj.  This is equivalent to ~obj."
    },
    {
        "id": 805,
        "name": "fcntl.ioctl()",
        "describe": "This function is identical to the fcntl() function, exceptthat the argument handling is even more complicated."
    },
    {
        "id": 806,
        "name": "operator.ior()",
        "describe": "a = ior(a, b) is equivalent to a |= b."
    },
    {
        "id": 807,
        "name": "ipaddress.ip_address()",
        "describe": "Return an IPv4Address or IPv6Address object depending onthe IP address passed as argument.  Either IPv4 or IPv6 addresses may besupplied; integers less than 2**32 will be considered to be IPv4 by default.A ValueError is raised if address does not represent a valid IPv4or IPv6 address."
    },
    {
        "id": 808,
        "name": "ipaddress.ip_interface()",
        "describe": "Return an IPv4Interface or IPv6Interface object dependingon the IP address passed as argument.  address is a string or integerrepresenting the IP address.  Either IPv4 or IPv6 addresses may be supplied;integers less than 2**32 will be considered to be IPv4 by default.  AValueError is raised if address does not represent a valid IPv4 orIPv6 address."
    },
    {
        "id": 809,
        "name": "ipaddress.ip_network()",
        "describe": "Return an IPv4Network or IPv6Network object depending onthe IP address passed as argument.  address is a string or integerrepresenting the IP network.  Either IPv4 or IPv6 networks may be supplied;integers less than 2**32 will be considered to be IPv4 by default.  strictis passed to IPv4Network or IPv6Network constructor.  AValueError is raised if address does not represent a valid IPv4 orIPv6 address, or if the network has host bits set."
    },
    {
        "id": 810,
        "name": "operator.ipow()",
        "describe": "a = ipow(a, b) is equivalent to a **= b."
    },
    {
        "id": 811,
        "name": "operator.irshift()",
        "describe": "a = irshift(a, b) is equivalent to a >>= b."
    },
    {
        "id": 812,
        "name": "operator.is_()",
        "describe": "Return a is b.  Tests object identity."
    },
    {
        "id": 813,
        "name": "lzma.is_check_supported()",
        "describe": "Return True if the given integrity check is supported on this system."
    },
    {
        "id": 814,
        "name": "dataclasses.is_dataclass()",
        "describe": "Return True if its parameter is a dataclass or an instance of one,otherwise return False."
    },
    {
        "id": 815,
        "name": "faulthandler.is_enabled()",
        "describe": "Check if the fault handler is enabled."
    },
    {
        "id": 816,
        "name": "sys.is_finalizing()",
        "describe": "Return True if the Python interpreter isshutting down, False otherwise."
    },
    {
        "id": 817,
        "name": "float.is_integer()",
        "describe": "Return True if the float instance is finite with integralvalue, and False otherwise:"
    },
    {
        "id": 818,
        "name": "unicodedata.is_normalized()",
        "describe": "Return whether the Unicode string unistr is in the normal form form. Validvalues for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019."
    },
    {
        "id": 819,
        "name": "operator.is_not()",
        "describe": "Return a is not b.  Tests object identity."
    },
    {
        "id": 820,
        "name": "sysconfig.is_python_build()",
        "describe": "Return True if the running Python interpreter was built from source andis being run from its built location, and not from a location resulting frome.g. running make install or installing via a binary installer."
    },
    {
        "id": 821,
        "name": "tarfile.is_tarfile()",
        "describe": "Return True if name is a tar archive file, that the tarfilemodule can read. name may be a str, file, or file-like object."
    },
    {
        "id": 822,
        "name": "curses.is_term_resized()",
        "describe": "Return True if resize_term() would modify the window structure,False otherwise."
    },
    {
        "id": 823,
        "name": "zipfile.is_zipfile()",
        "describe": "Returns True if filename is a valid ZIP file based on its magic number,otherwise returns False.  filename may be a file or file-like object too."
    },
    {
        "id": 824,
        "name": "inspect.isabstract()",
        "describe": "Return True if the object is an abstract base class."
    },
    {
        "id": 825,
        "name": "str.isalnum()",
        "describe": "Return True if all characters in the string are alphanumeric and there is atleast one character, False otherwise.  A character c is alphanumeric if oneof the following returns True: c.isalpha(), c.isdecimal(),c.isdigit(), or c.isnumeric()."
    },
    {
        "id": 826,
        "name": "str.isalpha()",
        "describe": "Return True if all characters in the string are alphabetic and there is at leastone character, False otherwise.  Alphabetic characters are those characters definedin the Unicode character database as \u201cLetter\u201d, i.e., those with general categoryproperty being one of \u201cLm\u201d, \u201cLt\u201d, \u201cLu\u201d, \u201cLl\u201d, or \u201cLo\u201d.  Note that this is differentfrom the \u201cAlphabetic\u201d property defined in the Unicode Standard."
    },
    {
        "id": 827,
        "name": "str.isascii()",
        "describe": "Return True if the string is empty or all characters in the string are ASCII,False otherwise.ASCII characters have code points in the range U+0000-U+007F."
    },
    {
        "id": 828,
        "name": "inspect.isasyncgen()",
        "describe": "Return True if the object is an asynchronous generator iteratorcreated by an asynchronous generator function."
    },
    {
        "id": 829,
        "name": "inspect.isasyncgenfunction()",
        "describe": "Return True if the object is an asynchronous generator function,for example:"
    },
    {
        "id": 830,
        "name": "os.isatty()",
        "describe": "Return True if the file descriptor fd is open and connected to atty(-like) device, else False."
    },
    {
        "id": 831,
        "name": "inspect.isawaitable()",
        "describe": "Return True if the object can be used in await expression."
    },
    {
        "id": 832,
        "name": "inspect.isbuiltin()",
        "describe": "Return True if the object is a built-in function or a bound built-in method."
    },
    {
        "id": 833,
        "name": "inspect.isclass()",
        "describe": "Return True if the object is a class, whether built-in or created in Pythoncode."
    },
    {
        "id": 834,
        "name": "math.isclose()",
        "describe": "Return True if the values a and b are close to each other andFalse otherwise."
    },
    {
        "id": 835,
        "name": "inspect.iscode()",
        "describe": "Return True if the object is a code."
    },
    {
        "id": 836,
        "name": "inspect.iscoroutine()",
        "describe": "Return True if the object is a coroutine created by anasync def function."
    },
    {
        "id": 837,
        "name": "inspect.iscoroutinefunction()",
        "describe": "Return True if the object is a coroutine function(a function defined with an async def syntax)."
    },
    {
        "id": 838,
        "name": "inspect.isdatadescriptor()",
        "describe": "Return True if the object is a data descriptor."
    },
    {
        "id": 839,
        "name": "str.isdecimal()",
        "describe": "Return True if all characters in the string are decimalcharacters and there is at least one character, Falseotherwise. Decimal characters are those that can be used to formnumbers in base 10, e.g. U+0660, ARABIC-INDIC DIGITZERO.  Formally a decimal character is a character in the UnicodeGeneral Category \u201cNd\u201d."
    },
    {
        "id": 840,
        "name": "str.isdigit()",
        "describe": "Return True if all characters in the string are digits and there is at least onecharacter, False otherwise.  Digits include decimal characters and digits that needspecial handling, such as the compatibility superscript digits.This covers digits which cannot be used to form numbers in base 10,like the Kharosthi numbers.  Formally, a digit is a character that has theproperty value Numeric_Type=Digit or Numeric_Type=Decimal."
    },
    {
        "id": 841,
        "name": "frozenset.isdisjoint()",
        "describe": "Return True if the set has no elements in common with other.  Sets aredisjoint if and only if their intersection is the empty set."
    },
    {
        "id": 842,
        "name": "turtle.isdown()",
        "describe": "Return True if pen is down, False if it\u2019s up."
    },
    {
        "id": 843,
        "name": "curses.isendwin()",
        "describe": "Return True if endwin() has been called (that is, the  curses library hasbeen deinitialized)."
    },
    {
        "id": 844,
        "name": "parser.isexpr()",
        "describe": "When st represents an 'eval' form, this function returns True, otherwiseit returns False.  This is useful, since code objects normally cannot be queriedfor this information using existing built-in functions.  Note that the codeobjects created by compilest() cannot be queried like this either, andare identical to those created by the built-in compile() function."
    },
    {
        "id": 845,
        "name": "math.isfinite()",
        "describe": "Return True if x is neither an infinity nor a NaN, andFalse otherwise.  (Note that 0.0 is considered finite.)"
    },
    {
        "id": 846,
        "name": "fileinput.isfirstline()",
        "describe": "Return True if the line just read is the first line of its file, otherwisereturn False."
    },
    {
        "id": 847,
        "name": "inspect.isframe()",
        "describe": "Return True if the object is a frame."
    },
    {
        "id": 848,
        "name": "inspect.isfunction()",
        "describe": "Return True if the object is a Python function, which includes functionscreated by a lambda expression."
    },
    {
        "id": 849,
        "name": "asyncio.isfuture()",
        "describe": "Return True if obj is either of:"
    },
    {
        "id": 850,
        "name": "inspect.isgenerator()",
        "describe": "Return True if the object is a generator."
    },
    {
        "id": 851,
        "name": "inspect.isgeneratorfunction()",
        "describe": "Return True if the object is a Python generator function."
    },
    {
        "id": 852,
        "name": "inspect.isgetsetdescriptor()",
        "describe": "Return True if the object is a getset descriptor."
    },
    {
        "id": 853,
        "name": "str.isidentifier()",
        "describe": "Return True if the string is a valid identifier according to the languagedefinition, section Identifiers and keywords."
    },
    {
        "id": 854,
        "name": "math.isinf()",
        "describe": "Return True if x is a positive or negative infinity, andFalse otherwise."
    },
    {
        "id": 855,
        "name": "keyword.iskeyword()",
        "describe": "Return True if s is a Python keyword."
    },
    {
        "id": 856,
        "name": "calendar.isleap()",
        "describe": "Returns True if year is a leap year, otherwise False."
    },
    {
        "id": 857,
        "name": "itertools.islice()",
        "describe": "Make an iterator that returns selected elements from the iterable. If start isnon-zero, then elements from the iterable are skipped until start is reached.Afterward, elements are returned consecutively unless step is set higher thanone which results in items being skipped.  If stop is None, then iterationcontinues until the iterator is exhausted, if at all; otherwise, it stops at thespecified position.  Unlike regular slicing, islice() does not supportnegative values for start, stop, or step.  Can be used to extract relatedfields from data where the internal structure has been flattened (for example, amulti-line report may list a name field on every third line).  Roughly equivalent to:"
    },
    {
        "id": 858,
        "name": "str.islower()",
        "describe": "Return True if all cased characters 4 in the string are lowercase andthere is at least one cased character, False otherwise."
    },
    {
        "id": 859,
        "name": "inspect.ismemberdescriptor()",
        "describe": "Return True if the object is a member descriptor."
    },
    {
        "id": 860,
        "name": "inspect.ismethod()",
        "describe": "Return True if the object is a bound method written in Python."
    },
    {
        "id": 861,
        "name": "inspect.ismethoddescriptor()",
        "describe": "Return True if the object is a method descriptor, but not ifismethod(), isclass(), isfunction() or isbuiltin()are true."
    },
    {
        "id": 862,
        "name": "inspect.ismodule()",
        "describe": "Return True if the object is a module."
    },
    {
        "id": 863,
        "name": "math.isnan()",
        "describe": "Return True if x is a NaN (not a number), and False otherwise."
    },
    {
        "id": 864,
        "name": "str.isnumeric()",
        "describe": "Return True if all characters in the string are numericcharacters, and there is at least one character, Falseotherwise. Numeric characters include digit characters, and all charactersthat have the Unicode numeric value property, e.g. U+2155,VULGAR FRACTION ONE FIFTH.  Formally, numeric characters are those with the propertyvalue Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric."
    },
    {
        "id": 865,
        "name": "str.isprintable()",
        "describe": "Return True if all characters in the string are printable or the string isempty, False otherwise.  Nonprintable characters are those characters definedin the Unicode character database as \u201cOther\u201d or \u201cSeparator\u201d, excepting theASCII space (0x20) which is considered printable.  (Note that printablecharacters in this context are those which should not be escaped whenrepr() is invoked on a string.  It has no bearing on the handling ofstrings written to sys.stdout or sys.stderr.)"
    },
    {
        "id": 866,
        "name": "math.isqrt()",
        "describe": "Return the integer square root of the nonnegative integer n. This is thefloor of the exact square root of n, or equivalently the greatest integera such that a\u00b2 \u2264 n."
    },
    {
        "id": 867,
        "name": "pprint.isreadable()",
        "describe": "Determine if the formatted representation of object is \u201creadable\u201d, or can beused to reconstruct the value using eval().  This always returns Falsefor recursive objects."
    },
    {
        "id": 868,
        "name": "pprint.isrecursive()",
        "describe": "Determine if object requires a recursive representation."
    },
    {
        "id": 869,
        "name": "inspect.isroutine()",
        "describe": "Return True if the object is a user-defined or built-in function or method."
    },
    {
        "id": 870,
        "name": "keyword.issoftkeyword()",
        "describe": "Return True if s is a Python soft keyword."
    },
    {
        "id": 871,
        "name": "str.isspace()",
        "describe": "Return True if there are only whitespace characters in the string and there isat least one character, False otherwise."
    },
    {
        "id": 872,
        "name": "fileinput.isstdin()",
        "describe": "Return True if the last line was read from sys.stdin, otherwise returnFalse."
    },
    {
        "id": 873,
        "name": "frozenset.issubset()",
        "describe": "Test whether every element in the set is in other."
    },
    {
        "id": 874,
        "name": "parser.issuite()",
        "describe": "This function mirrors isexpr() in that it reports whether an ST objectrepresents an 'exec' form, commonly known as a \u201csuite.\u201d  It is not safe toassume that this function is equivalent to not isexpr(st), as additionalsyntactic fragments may be supported in the future."
    },
    {
        "id": 875,
        "name": "frozenset.issuperset()",
        "describe": "Test whether every element in other is in the set."
    },
    {
        "id": 876,
        "name": "str.istitle()",
        "describe": "Return True if the string is a titlecased string and there is at least onecharacter, for example uppercase characters may only follow uncased charactersand lowercase characters only cased ones.  Return False otherwise."
    },
    {
        "id": 877,
        "name": "inspect.istraceback()",
        "describe": "Return True if the object is a traceback."
    },
    {
        "id": 878,
        "name": "operator.isub()",
        "describe": "a = isub(a, b) is equivalent to a -= b."
    },
    {
        "id": 879,
        "name": "str.isupper()",
        "describe": "Return True if all cased characters 4 in the string are uppercase andthere is at least one cased character, False otherwise."
    },
    {
        "id": 880,
        "name": "turtle.isvisible()",
        "describe": "Return True if the Turtle is shown, False if it\u2019s hidden."
    },
    {
        "id": 881,
        "name": "operator.itemgetter()",
        "describe": "Return a callable object that fetches item from its operand using theoperand\u2019s __getitem__() method.  If multiple items are specified,returns a tuple of lookup values.  For example:"
    },
    {
        "id": 882,
        "name": "ast.iter_child_nodes()",
        "describe": "Yield all direct child nodes of node, that is, all fields that are nodesand all items of fields that are lists of nodes."
    },
    {
        "id": 883,
        "name": "ast.iter_fields()",
        "describe": "Yield a tuple of (fieldname, value) for each field in node._fieldsthat is present on node."
    },
    {
        "id": 884,
        "name": "pkgutil.iter_importers()",
        "describe": "Yield finder objects for the given module name."
    },
    {
        "id": 885,
        "name": "pkgutil.iter_modules()",
        "describe": "Yields ModuleInfo for all submodules on path, or, ifpath is None, all top-level modules on sys.path."
    },
    {
        "id": 886,
        "name": "struct.iter_unpack()",
        "describe": "Iteratively unpack from the buffer buffer according to the formatstring format.  This function returns an iterator which will readequally-sized chunks from the buffer until all its contents have beenconsumed.  The buffer\u2019s size in bytes must be a multiple of the sizerequired by the format, as reflected by calcsize()."
    },
    {
        "id": 887,
        "name": "codecs.iterdecode()",
        "describe": "Uses an incremental decoder to iteratively decode the input provided byiterator. This function is a generator.The errors argument (as well as anyother keyword argument) is passed through to the incremental decoder."
    },
    {
        "id": 888,
        "name": "codecs.iterencode()",
        "describe": "Uses an incremental encoder to iteratively encode the input provided byiterator. This function is a generator.The errors argument (as well as anyother keyword argument) is passed through to the incremental encoder."
    },
    {
        "id": 889,
        "name": "operator.itruediv()",
        "describe": "a = itruediv(a, b) is equivalent to a /= b."
    },
    {
        "id": 890,
        "name": "operator.ixor()",
        "describe": "a = ixor(a, b) is equivalent to a ^= b."
    },
    {
        "id": 891,
        "name": "platform.java_ver()",
        "describe": "Version interface for Jython."
    },
    {
        "id": 892,
        "name": "shlex.join()",
        "describe": "Concatenate the tokens of the list split_command and return a string.This function is the inverse of split()."
    },
    {
        "id": 893,
        "name": "msvcrt.kbhit()",
        "describe": "Return True if a keypress is waiting to be read."
    },
    {
        "id": 894,
        "name": "select.kevent()",
        "describe": "(Only supported on BSD.)  Returns a kernel event object; see sectionKevent Objects below for the methods supported by kevent objects."
    },
    {
        "id": 895,
        "name": "curses.keyname()",
        "describe": "Return the name of the key numbered k as a bytes object.  The name of a key generating printableASCII character is the key\u2019s character.  The name of a control-key combinationis a two-byte bytes object consisting of a caret (b'^') followed by the correspondingprintable ASCII character.  The name of an alt-key combination (128\u2013255) is abytes object consisting of the prefix b'M-' followed by the name of the correspondingASCII character."
    },
    {
        "id": 896,
        "name": "os.kill()",
        "describe": "Send signal sig to the process pid.  Constants for the specific signalsavailable on the host platform are defined in the signal module."
    },
    {
        "id": 897,
        "name": "curses.killchar()",
        "describe": "Return the user\u2019s current line kill character as a one-byte bytes object. Under Unix operating systemsthis is a property of the controlling tty of the curses program, and is not setby the curses library itself."
    },
    {
        "id": 898,
        "name": "os.killpg()",
        "describe": "Send the signal sig to the process group pgid."
    },
    {
        "id": 899,
        "name": "select.kqueue()",
        "describe": "(Only supported on BSD.)  Returns a kernel queue object; see sectionKqueue Objects below for the methods supported by kqueue objects."
    },
    {
        "id": 900,
        "name": "linecache.lazycache()",
        "describe": "Capture enough detail about a non-file-based module to permit getting itslines later via getline() even if module_globals is None in the latercall. This avoids doing I/O until a line is actually needed, without havingto carry the module globals around indefinitely."
    },
    {
        "id": 901,
        "name": "os.lchflags()",
        "describe": "Set the flags of path to the numeric flags, like chflags(), but donot follow symbolic links.  As of Python 3.3, this is equivalent toos.chflags(path, flags, follow_symlinks=False)."
    },
    {
        "id": 902,
        "name": "os.lchmod()",
        "describe": "Change the mode of path to the numeric mode. If path is a symlink, thisaffects the symlink rather than the target.  See the docs for chmod()for possible values of mode.  As of Python 3.3, this is equivalent toos.chmod(path, mode, follow_symlinks=False)."
    },
    {
        "id": 903,
        "name": "os.lchown()",
        "describe": "Change the owner and group id of path to the numeric uid and gid.  Thisfunction will not follow symbolic links.  As of Python 3.3, this is equivalentto os.chown(path, uid, gid, follow_symlinks=False)."
    },
    {
        "id": 904,
        "name": "math.lcm()",
        "describe": "Return the least common multiple of the specified integer arguments.If all arguments are nonzero, then the returned value is the smallestpositive integer that is a multiple of all arguments.  If any of the argumentsis zero, then the returned value is 0.  lcm() without argumentsreturns 1."
    },
    {
        "id": 905,
        "name": "math.ldexp()",
        "describe": "Return x * (2**i).  This is essentially the inverse of functionfrexp()."
    },
    {
        "id": 906,
        "name": "gettext.ldngettext()",
        "describe": "Equivalent to the corresponding functions without the l prefix(gettext(), dgettext(), ngettext() and dngettext()),but the translation is returned as a byte string encoded in the preferredsystem encoding if no other encoding was explicitly set withbind_textdomain_codeset()."
    },
    {
        "id": 907,
        "name": "operator.le()",
        "describe": "Perform \u201crich comparisons\u201d between a and b. Specifically, lt(a, b) isequivalent to a < b, le(a, b) is equivalent to a <= b, eq(a,b) is equivalent to a == b, ne(a, b) is equivalent to a != b,gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a>= b.  Note that these functions can return any value, which mayor may not be interpretable as a Boolean value.  SeeComparisons for more information about rich comparisons."
    },
    {
        "id": 908,
        "name": "calendar.leapdays()",
        "describe": "Returns the number of leap years in the range from y1 to y2 (exclusive),where y1 and y2 are years."
    },
    {
        "id": 909,
        "name": "turtle.left()",
        "describe": "angle \u2013 a number (integer or float)"
    },
    {
        "id": 910,
        "name": "operator.length_hint()",
        "describe": "Return an estimated length for the object o. First try to return itsactual length, then an estimate using object.__length_hint__(), andfinally return the default value."
    },
    {
        "id": 911,
        "name": "math.lgamma()",
        "describe": "Return the natural logarithm of the absolute value of the Gammafunction at x."
    },
    {
        "id": 912,
        "name": "platform.libc_ver()",
        "describe": "Tries to determine the libc version against which the file executable (defaultsto the Python interpreter) is linked.  Returns a tuple of strings (lib,version) which default to the given parameters in case the lookup fails."
    },
    {
        "id": 913,
        "name": "audioop.lin2adpcm()",
        "describe": "Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is an adaptivecoding scheme, whereby each 4 bit number is the difference between one sampleand the next, divided by a (varying) step.  The Intel/DVI ADPCM algorithm hasbeen selected for use by the IMA, so it may well become a standard."
    },
    {
        "id": 914,
        "name": "audioop.lin2alaw()",
        "describe": "Convert samples in the audio fragment to a-LAW encoding and return this as abytes object.  a-LAW is an audio encoding format whereby you get a dynamicrange of about 13 bits using only 8 bit samples.  It is used by the Sun audiohardware, among others."
    },
    {
        "id": 915,
        "name": "audioop.lin2lin()",
        "describe": "Convert samples between 1-, 2-, 3- and 4-byte formats."
    },
    {
        "id": 916,
        "name": "audioop.lin2ulaw()",
        "describe": "Convert samples in the audio fragment to u-LAW encoding and return this as abytes object.  u-LAW is an audio encoding format whereby you get a dynamicrange of about 14 bits using only 8 bit samples.  It is used by the Sun audiohardware, among others."
    },
    {
        "id": 917,
        "name": "fileinput.lineno()",
        "describe": "Return the cumulative line number of the line that has just been read.  Beforethe first line has been read, returns 0.  After the last line of the lastfile has been read, returns the line number of that line."
    },
    {
        "id": 918,
        "name": "os.link()",
        "describe": "Create a hard link pointing to src named dst."
    },
    {
        "id": 919,
        "name": "csv.list_dialects()",
        "describe": "Return the names of all registered dialects."
    },
    {
        "id": 920,
        "name": "os.listdir()",
        "describe": "Return a list containing the names of the entries in the directory given bypath.  The list is in arbitrary order, and does not include the specialentries '.' and '..' even if they are present in the directory.If a file is removed from or added to the directory during the call ofthis function, whether a name for that file be included is unspecified."
    },
    {
        "id": 921,
        "name": "turtle.listen()",
        "describe": "Set focus on TurtleScreen (in order to collect key-events).  Dummy argumentsare provided in order to be able to pass listen() to the onclick method."
    },
    {
        "id": 922,
        "name": "os.listxattr()",
        "describe": "Return a list of the extended filesystem attributes on path.  Theattributes in the list are represented as strings decoded with the filesystemencoding.  If path is None, listxattr() will examine the currentdirectory."
    },
    {
        "id": 923,
        "name": "ast.literal_eval()",
        "describe": "Safely evaluate an expression node or a string containing a Python literal orcontainer display.  The string or node provided may only consist of thefollowing Python literal structures: strings, bytes, numbers, tuples, lists,dicts, sets, booleans, and None."
    },
    {
        "id": 924,
        "name": "str.ljust()",
        "describe": "Return the string left justified in a string of length width. Padding isdone using the specified fillchar (default is an ASCII space). Theoriginal string is returned if width is less than or equal to len(s)."
    },
    {
        "id": 925,
        "name": "decimal.localcontext()",
        "describe": "Return a context manager that will set the current context for the active threadto a copy of ctx on entry to the with-statement and restore the previous contextwhen exiting the with-statement. If no context is specified, a copy of thecurrent context is used."
    },
    {
        "id": 926,
        "name": "locale.localeconv()",
        "describe": "Returns the database of the local conventions as a dictionary. This dictionaryhas the following strings as keys:"
    },
    {
        "id": 927,
        "name": "time.localtime()",
        "describe": "Like gmtime() but converts to local time.  If secs is not provided orNone, the current time as returned by time() is used.  The dstflag is set to 1 when DST applies to the given time."
    },
    {
        "id": 928,
        "name": "imp.lock_held()",
        "describe": "Return True if the global import lock is currently held, elseFalse. On platforms without threads, always return False."
    },
    {
        "id": 929,
        "name": "fcntl.lockf()",
        "describe": "This is essentially a wrapper around the fcntl() locking calls.fd is the file descriptor (file objects providing a fileno()method are accepted as well) of the file to lock or unlock, and cmdis one of the following values:"
    },
    {
        "id": 930,
        "name": "msvcrt.locking()",
        "describe": "Lock part of a file based on file descriptor fd from the C runtime.  RaisesOSError on failure.  The locked region of the file extends from thecurrent file position for nbytes bytes, and may continue beyond the end of thefile.  mode must be one of the LK_* constants listed below. Multipleregions in a file may be locked at the same time, but may not overlap.  Adjacentregions are not merged; they must be unlocked individually."
    },
    {
        "id": 931,
        "name": "math.log()",
        "describe": "With one argument, return the natural logarithm of x (to base e)."
    },
    {
        "id": 932,
        "name": "math.log10()",
        "describe": "Return the base-10 logarithm of x.  This is usually more accuratethan log(x, 10)."
    },
    {
        "id": 933,
        "name": "math.log1p()",
        "describe": "Return the natural logarithm of 1+x (base e). Theresult is calculated in a way which is accurate for x near zero."
    },
    {
        "id": 934,
        "name": "math.log2()",
        "describe": "Return the base-2 logarithm of x. This is usually more accurate thanlog(x, 2)."
    },
    {
        "id": 935,
        "name": "multiprocessing.log_to_stderr()",
        "describe": "This function performs a call to get_logger() but in addition toreturning the logger created by get_logger, it adds a handler which sendsoutput to sys.stderr using format'[%(levelname)s/%(processName)s] %(message)s'."
    },
    {
        "id": 936,
        "name": "random.lognormvariate()",
        "describe": "Log normal distribution.  If you take the natural logarithm of thisdistribution, you\u2019ll get a normal distribution with mean mu and standarddeviation sigma.  mu can have any value, and sigma must be greater thanzero."
    },
    {
        "id": 937,
        "name": "curses.longname()",
        "describe": "Return a bytes object containing the terminfo long name field describing the currentterminal.  The maximum length of a verbose description is 128 characters.  It isdefined only after the call to initscr()."
    },
    {
        "id": 938,
        "name": "unicodedata.lookup()",
        "describe": "Look up character by name.  If a character with the given name is found, returnthe corresponding character.  If not found, KeyError is raised."
    },
    {
        "id": 939,
        "name": "codecs.lookup_error()",
        "describe": "Return the error handler previously registered under the name name."
    },
    {
        "id": 940,
        "name": "asyncore.loop()",
        "describe": "Enter a polling loop that terminates after count passes or all openchannels have been closed.  All arguments are optional.  The countparameter defaults to None, resulting in the loop terminating only when allchannels have been closed.  The timeout argument sets the timeoutparameter for the appropriate select() or poll()call, measured in seconds; the default is 30 seconds.  The use_pollparameter, if true, indicates that poll() should be used inpreference to select() (the default is False)."
    },
    {
        "id": 941,
        "name": "str.lower()",
        "describe": "Return a copy of the string with all the cased characters 4 converted tolowercase."
    },
    {
        "id": 942,
        "name": "functools.lru_cache()",
        "describe": "Decorator to wrap a function with a memoizing callable that saves up to themaxsize most recent calls.  It can save time when an expensive or I/O boundfunction is periodically called with the same arguments."
    },
    {
        "id": 943,
        "name": "os.lseek()",
        "describe": "Set the current position of file descriptor fd to position pos, modifiedby how: SEEK_SET or 0 to set the position relative to thebeginning of the file; SEEK_CUR or 1 to set it relative to thecurrent position; SEEK_END or 2 to set it relative to the end ofthe file. Return the new cursor position in bytes, starting from the beginning."
    },
    {
        "id": 944,
        "name": "operator.lshift()",
        "describe": "Return a shifted left by b."
    },
    {
        "id": 945,
        "name": "os.lstat()",
        "describe": "Perform the equivalent of an lstat() system call on the given path.Similar to stat(), but does not follow symbolic links. Return astat_result object."
    },
    {
        "id": 946,
        "name": "str.lstrip()",
        "describe": "Return a copy of the string with leading characters removed.  The charsargument is a string specifying the set of characters to be removed.  If omittedor None, the chars argument defaults to removing whitespace.  The charsargument is not a prefix; rather, all combinations of its values are stripped:"
    },
    {
        "id": 947,
        "name": "turtle.lt()",
        "describe": "angle \u2013 a number (integer or float)"
    },
    {
        "id": 948,
        "name": "platform.mac_ver()",
        "describe": "Get Mac OS version information and return it as tuple (release, versioninfo,machine) with versioninfo being a tuple (version, dev_stage,non_release_version)."
    },
    {
        "id": 949,
        "name": "platform.machine()",
        "describe": "Returns the machine type, e.g. 'i386'. An empty string is returned if thevalue cannot be determined."
    },
    {
        "id": 950,
        "name": "unittest.main()",
        "describe": "A command-line program that loads a set of tests from module and runs them;this is primarily for making test modules conveniently executable.The simplest use for this function is to include the following line at theend of a test script:"
    },
    {
        "id": 951,
        "name": "threading.main_thread()",
        "describe": "Return the main Thread object.  In normal conditions, themain thread is the thread from which the Python interpreter wasstarted."
    },
    {
        "id": 952,
        "name": "turtle.mainloop()",
        "describe": "Starts event loop - calling Tkinter\u2019s mainloop function.Must be the last statement in a turtle graphics program.Must not be used if a script is run from within IDLE in -n mode(No subprocess) - for interactive use of turtle graphics."
    },
    {
        "id": 953,
        "name": "os.major()",
        "describe": "Extract the device major number from a raw device number (usually thest_dev or st_rdev field from stat)."
    },
    {
        "id": 954,
        "name": "logging.makeLogRecord()",
        "describe": "Creates and returns a new LogRecord instance whose attributes aredefined by attrdict. This function is useful for taking a pickledLogRecord attribute dictionary, sent over a socket, and reconstitutingit as a LogRecord instance at the receiving end."
    },
    {
        "id": 955,
        "name": "shutil.make_archive()",
        "describe": "Create an archive file (such as zip or tar) and return its name."
    },
    {
        "id": 956,
        "name": "dataclasses.make_dataclass()",
        "describe": "Creates a new dataclass with name cls_name, fields as definedin fields, base classes as given in bases, and initializedwith a namespace as given in namespace.  fields is aniterable whose elements are each either name, (name, type),or (name, type, Field).  If just name is supplied,typing.Any is used for type.  The values of init,repr, eq, order, unsafe_hash, and frozen havethe same meaning as they do in dataclass()."
    },
    {
        "id": 957,
        "name": "os.makedev()",
        "describe": "Compose a raw device number from the major and minor device numbers."
    },
    {
        "id": 958,
        "name": "os.makedirs()",
        "describe": "Recursive directory creation function.  Like mkdir(), but makes allintermediate-level directories needed to contain the leaf directory."
    },
    {
        "id": 959,
        "name": "str.maketrans()",
        "describe": "This static method returns a translation table usable for str.translate()."
    },
    {
        "id": 960,
        "name": "stringprep.map_table_b2()",
        "describe": "Return the mapped value for code according to tableB.2 (Mapping forcase-folding used with NFKC)."
    },
    {
        "id": 961,
        "name": "stringprep.map_table_b3()",
        "describe": "Return the mapped value for code according to tableB.3 (Mapping forcase-folding used with no normalization)."
    },
    {
        "id": 962,
        "name": "nis.maps()",
        "describe": "Return a list of all valid maps."
    },
    {
        "id": 963,
        "name": "re.match()",
        "describe": "If zero or more characters at the beginning of string match the regularexpression pattern, return a corresponding match object.  Return None if the string does not match the pattern;note that this is different from a zero-length match."
    },
    {
        "id": 964,
        "name": "ssl.match_hostname()",
        "describe": "Verify that cert (in decoded format as returned bySSLSocket.getpeercert()) matches the given hostname.  The rulesapplied are those for checking the identity of HTTPS servers as outlinedin RFC 2818, RFC 5280 and RFC 6125.  In addition to HTTPS, thisfunction should be suitable for checking the identity of servers invarious SSL-based protocols such as FTPS, IMAPS, POPS and others."
    },
    {
        "id": 965,
        "name": "operator.matmul()",
        "describe": "Return a @ b."
    },
    {
        "id": 966,
        "name": "audioop.maxpp()",
        "describe": "Return the maximum peak-peak value in the sound fragment."
    },
    {
        "id": 967,
        "name": "statistics.mean()",
        "describe": "Return the sample arithmetic mean of data which can be a sequence or iterable."
    },
    {
        "id": 968,
        "name": "statistics.median()",
        "describe": "Return the median (middle value) of numeric data, using the common \u201cmean ofmiddle two\u201d method.  If data is empty, StatisticsError is raised.data can be a sequence or iterable."
    },
    {
        "id": 969,
        "name": "statistics.median_grouped()",
        "describe": "Return the median of grouped continuous data, calculated as the 50thpercentile, using interpolation.  If data is empty, StatisticsErroris raised.  data can be a sequence or iterable."
    },
    {
        "id": 970,
        "name": "statistics.median_high()",
        "describe": "Return the high median of data.  If data is empty, StatisticsErroris raised.  data can be a sequence or iterable."
    },
    {
        "id": 971,
        "name": "statistics.median_low()",
        "describe": "Return the low median of numeric data.  If data is empty,StatisticsError is raised.  data can be a sequence or iterable."
    },
    {
        "id": 972,
        "name": "os.memfd_create()",
        "describe": "Create an anonymous file and return a file descriptor that refers to it.flags must be one of the os.MFD_* constants available on the system(or a bitwise ORed combination of them).  By default, the new filedescriptor is non-inheritable."
    },
    {
        "id": 973,
        "name": "ctypes.memmove()",
        "describe": "Same as the standard C memmove library function: copies count bytes fromsrc to dst. dst and src must be integers or ctypes instances that canbe converted to pointers."
    },
    {
        "id": 974,
        "name": "ctypes.memset()",
        "describe": "Same as the standard C memset library function: fills the memory block ataddress dst with count bytes of value c. dst must be an integerspecifying an address, or a ctypes instance."
    },
    {
        "id": 975,
        "name": "heapq.merge()",
        "describe": "Merge multiple sorted inputs into a single sorted output (for example, mergetimestamped entries from multiple log files).  Returns an iteratorover the sorted values."
    },
    {
        "id": 976,
        "name": "email.message_from_binary_file()",
        "describe": "Return a message object structure tree from an open binary fileobject.  This is equivalent to BytesParser().parse(fp).  _class andpolicy are interpreted as with the BytesParser classconstructor."
    },
    {
        "id": 977,
        "name": "email.message_from_bytes()",
        "describe": "Return a message object structure from a bytes-like object.  This isequivalent to BytesParser().parsebytes(s).  Optional _class andpolicy are interpreted as with the BytesParser classconstructor."
    },
    {
        "id": 978,
        "name": "email.message_from_file()",
        "describe": "Return a message object structure tree from an open file object.This is equivalent to Parser().parse(fp).  _class and policy areinterpreted as with the Parser class constructor."
    },
    {
        "id": 979,
        "name": "email.message_from_string()",
        "describe": "Return a message object structure from a string.  This is equivalent toParser().parsestr(s).  _class and policy are interpreted aswith the Parser class constructor."
    },
    {
        "id": 980,
        "name": "curses.meta()",
        "describe": "If flag is True, allow 8-bit characters to be input.  Ifflag is False,  allow only 7-bit chars."
    },
    {
        "id": 981,
        "name": "operator.methodcaller()",
        "describe": "Return a callable object that calls the method name on its operand.  Ifadditional arguments and/or keyword arguments are given, they will be givento the method as well.  For example:"
    },
    {
        "id": 982,
        "name": "audioop.minmax()",
        "describe": "Return a tuple consisting of the minimum and maximum values of all samples inthe sound fragment."
    },
    {
        "id": 983,
        "name": "os.minor()",
        "describe": "Extract the device minor number from a raw device number (usually thest_dev or st_rdev field from stat)."
    },
    {
        "id": 984,
        "name": "unicodedata.mirrored()",
        "describe": "Returns the mirrored property assigned to the character chr asinteger. Returns 1 if the character has been identified as a \u201cmirrored\u201dcharacter in bidirectional text, 0 otherwise."
    },
    {
        "id": 985,
        "name": "os.mkdir()",
        "describe": "Create a directory named path with numeric mode mode."
    },
    {
        "id": 986,
        "name": "tempfile.mkdtemp()",
        "describe": "Creates a temporary directory in the most secure manner possible. Thereare no race conditions in the directory\u2019s creation.  The directory isreadable, writable, and searchable only by the creating user ID."
    },
    {
        "id": 987,
        "name": "os.mkfifo()",
        "describe": "Create a FIFO (a named pipe) named path with numeric mode mode.The current umask value is first masked out from the mode."
    },
    {
        "id": 988,
        "name": "os.mknod()",
        "describe": "Create a filesystem node (file, device special file or named pipe) namedpath. mode specifies both the permissions to use and the type of nodeto be created, being combined (bitwise OR) with one of stat.S_IFREG,stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants areavailable in stat).  For stat.S_IFCHR and stat.S_IFBLK,device defines the newly created device special file (probably usingos.makedev()), otherwise it is ignored."
    },
    {
        "id": 989,
        "name": "crypt.mksalt()",
        "describe": "Return a randomly generated salt of the specified method.  If nomethod is given, the strongest method available as returned bymethods() is used."
    },
    {
        "id": 990,
        "name": "tempfile.mkstemp()",
        "describe": "Creates a temporary file in the most secure manner possible.  There areno race conditions in the file\u2019s creation, assuming that the platformproperly implements the os.O_EXCL flag for os.open().  Thefile is readable and writable only by the creating user ID.  If theplatform uses permission bits to indicate whether a file is executable,the file is executable by no one.  The file descriptor is not inheritedby child processes."
    },
    {
        "id": 991,
        "name": "tempfile.mktemp()",
        "describe": "Deprecated since version 2.3: Use mkstemp() instead."
    },
    {
        "id": 992,
        "name": "time.mktime()",
        "describe": "This is the inverse function of localtime().  Its argument is thestruct_time or full 9-tuple (since the dst flag is needed; use -1as the dst flag if it is unknown) which expresses the time in local time, notUTC.  It returns a floating point number, for compatibility with time().If the input value cannot be represented as a valid time, eitherOverflowError or ValueError will be raised (which depends onwhether the invalid value is caught by Python or the underlying C libraries).The earliest date for which it can generate a time is platform-dependent."
    },
    {
        "id": 993,
        "name": "operator.mod()",
        "describe": "Return a % b."
    },
    {
        "id": 994,
        "name": "turtle.mode()",
        "describe": "mode \u2013 one of the strings \u201cstandard\u201d, \u201clogo\u201d or \u201cworld\u201d"
    },
    {
        "id": 995,
        "name": "math.modf()",
        "describe": "Return the fractional and integer parts of x.  Both results carry the signof x and are floats."
    },
    {
        "id": 996,
        "name": "time.monotonic()",
        "describe": "Return the value (in fractional seconds) of a monotonic clock, i.e. a clockthat cannot go backwards.  The clock is not affected by system clock updates.The reference point of the returned value is undefined, so that only thedifference between the results of two calls is valid."
    },
    {
        "id": 997,
        "name": "time.monotonic_ns()",
        "describe": "Similar to monotonic(), but return time as nanoseconds."
    },
    {
        "id": 998,
        "name": "calendar.month()",
        "describe": "Returns a month\u2019s calendar in a multi-line string using the formatmonth()of the TextCalendar class."
    },
    {
        "id": 999,
        "name": "calendar.monthcalendar()",
        "describe": "Returns a matrix representing a month\u2019s calendar.  Each row represents a week;days outside of the month are represented by zeros. Each week begins with Mondayunless set by setfirstweekday()."
    },
    {
        "id": 1000,
        "name": "calendar.monthrange()",
        "describe": "Returns weekday of first day of the month and number of days in month,  for thespecified year and month."
    },
    {
        "id": 1001,
        "name": "curses.mouseinterval()",
        "describe": "Set the maximum time in milliseconds that can elapse between press and releaseevents in order for them to be recognized as a click, and return the previousinterval value.  The default value is 200 msec, or one fifth of a second."
    },
    {
        "id": 1002,
        "name": "curses.mousemask()",
        "describe": "Set the mouse events to be reported, and return a tuple (availmask,oldmask).   availmask indicates which of the specified mouse events can bereported; on complete failure it returns 0.  oldmask is the previous value ofthe given window\u2019s mouse event mask.  If this function is never called, no mouseevents are ever reported."
    },
    {
        "id": 1003,
        "name": "shutil.move()",
        "describe": "Recursively move a file or directory (src) to another location (dst)and return the destination."
    },
    {
        "id": 1004,
        "name": "class.mro()",
        "describe": "This method can be overridden by a metaclass to customize the methodresolution order for its instances.  It is called at class instantiation, andits result is stored in __mro__."
    },
    {
        "id": 1005,
        "name": "operator.mul()",
        "describe": "Return a * b, for a and b numbers."
    },
    {
        "id": 1006,
        "name": "statistics.multimode()",
        "describe": "Return a list of the most frequently occurring values in the order theywere first encountered in the data.  Will return more than one result ifthere are multiple modes or an empty list if the data is empty:"
    },
    {
        "id": 1007,
        "name": "unicodedata.name()",
        "describe": "Returns the name assigned to the character chr as a string. If noname is defined, default is returned, or, if not given, ValueError israised."
    },
    {
        "id": 1008,
        "name": "collections.namedtuple()",
        "describe": "Returns a new tuple subclass named typename.  The new subclass is used tocreate tuple-like objects that have fields accessible by attribute lookup aswell as being indexable and iterable.  Instances of the subclass also have ahelpful docstring (with typename and field_names) and a helpful __repr__()method which lists the tuple contents in a name=value format."
    },
    {
        "id": 1009,
        "name": "codecs.namereplace_errors()",
        "describe": "Implements the 'namereplace' error handling (for encoding withtext encodings only): theunencodable character is replaced by a \\N{...} escape sequence."
    },
    {
        "id": 1010,
        "name": "curses.napms()",
        "describe": "Sleep for ms milliseconds."
    },
    {
        "id": 1011,
        "name": "difflib.ndiff()",
        "describe": "Compare a and b (lists of strings); return a Differ-styledelta (a generator generating the delta lines)."
    },
    {
        "id": 1012,
        "name": "operator.ne()",
        "describe": "Perform \u201crich comparisons\u201d between a and b. Specifically, lt(a, b) isequivalent to a < b, le(a, b) is equivalent to a <= b, eq(a,b) is equivalent to a == b, ne(a, b) is equivalent to a != b,gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a>= b.  Note that these functions can return any value, which mayor may not be interpretable as a Boolean value.  SeeComparisons for more information about rich comparisons."
    },
    {
        "id": 1013,
        "name": "operator.neg()",
        "describe": "Return obj negated (-obj)."
    },
    {
        "id": 1014,
        "name": "types.new_class()",
        "describe": "Creates a class object dynamically using the appropriate metaclass."
    },
    {
        "id": 1015,
        "name": "asyncio.new_event_loop()",
        "describe": "Create a new event loop object."
    },
    {
        "id": 1016,
        "name": "imp.new_module()",
        "describe": "Return a new empty module object called name.  This object is not insertedin sys.modules."
    },
    {
        "id": 1017,
        "name": "curses.newpad()",
        "describe": "Create and return a pointer to a new pad data structure with the given numberof lines and columns.  Return a pad as a window object."
    },
    {
        "id": 1018,
        "name": "curses.newwin()",
        "describe": "Return a new window, whose left-upper corneris at  (begin_y, begin_x), and whose height/width is  nlines/ncols."
    },
    {
        "id": 1019,
        "name": "math.nextafter()",
        "describe": "Return the next floating-point value after x towards y."
    },
    {
        "id": 1020,
        "name": "fileinput.nextfile()",
        "describe": "Close the current file so that the next iteration will read the first line fromthe next file (if any); lines not read from the file will not count towards thecumulative line count.  The filename is not changed until after the first lineof the next file has been read.  Before the first line has been read, thisfunction has no effect; it cannot be used to skip the first file.  After thelast line of the last file has been read, this function has no effect."
    },
    {
        "id": 1021,
        "name": "gettext.ngettext()",
        "describe": "Like gettext(), but consider plural forms. If a translation is found,apply the plural formula to n, and return the resulting message (somelanguages have more than two plural forms). If no translation is found, returnsingular if n is 1; return plural otherwise."
    },
    {
        "id": 1022,
        "name": "os.nice()",
        "describe": "Add increment to the process\u2019s \u201cniceness\u201d.  Return the new niceness."
    },
    {
        "id": 1023,
        "name": "curses.nl()",
        "describe": "Enter newline mode.  This mode translates the return key into newline on input,and translates newline into return and line-feed on output. Newline mode isinitially on."
    },
    {
        "id": 1024,
        "name": "locale.nl_langinfo()",
        "describe": "Return some locale-specific information as a string.  This function is notavailable on all systems, and the set of possible options might also varyacross platforms.  The possible argument values are numbers, for whichsymbolic constants are available in the locale module."
    },
    {
        "id": 1025,
        "name": "heapq.nlargest()",
        "describe": "Return a list with the n largest elements from the dataset defined byiterable.  key, if provided, specifies a function of one argument that isused to extract a comparison key from each element in iterable (for example,key=str.lower).  Equivalent to:  sorted(iterable, key=key,reverse=True)[:n]."
    },
    {
        "id": 1026,
        "name": "typing.no_type_check()",
        "describe": "Decorator to indicate that annotations are not type hints."
    },
    {
        "id": 1027,
        "name": "typing.no_type_check_decorator()",
        "describe": "Decorator to give another decorator the no_type_check() effect."
    },
    {
        "id": 1028,
        "name": "curses.nocbreak()",
        "describe": "Leave cbreak mode.  Return to normal \u201ccooked\u201d mode with line buffering."
    },
    {
        "id": 1029,
        "name": "platform.node()",
        "describe": "Returns the computer\u2019s network name (may not be fully qualified!). An emptystring is returned if the value cannot be determined."
    },
    {
        "id": 1030,
        "name": "curses.noecho()",
        "describe": "Leave echo mode.  Echoing of input characters is turned off."
    },
    {
        "id": 1031,
        "name": "curses.nonl()",
        "describe": "Leave newline mode.  Disable translation of return into newline on input, anddisable low-level translation of newline into newline/return on output (but thisdoes not change the behavior of addch('\\n'), which always does theequivalent of return and line feed on the virtual screen).  With translationoff, curses can sometimes speed up vertical motion a little; also, it will beable to detect the return key on input."
    },
    {
        "id": 1032,
        "name": "curses.noqiflush()",
        "describe": "When the noqiflush() routine is used, normal flush of input and output queuesassociated with the INTR, QUIT and SUSP characters will not be done.  You maywant to call noqiflush() in a signal handler if you want output tocontinue as though the interrupt had not occurred, after the handler exits."
    },
    {
        "id": 1033,
        "name": "curses.noraw()",
        "describe": "Leave raw mode. Return to normal \u201ccooked\u201d mode with line buffering."
    },
    {
        "id": 1034,
        "name": "unicodedata.normalize()",
        "describe": "Return the normal form form for the Unicode string unistr. Valid values forform are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019."
    },
    {
        "id": 1035,
        "name": "random.normalvariate()",
        "describe": "Normal distribution.  mu is the mean, and sigma is the standard deviation."
    },
    {
        "id": 1036,
        "name": "operator.not_()",
        "describe": "Return the outcome of not obj.  (Note that there is no__not__() method for object instances; only the interpreter core definesthis operation.  The result is affected by the __bool__() and__len__() methods.)"
    },
    {
        "id": 1037,
        "name": "heapq.nsmallest()",
        "describe": "Return a list with the n smallest elements from the dataset defined byiterable.  key, if provided, specifies a function of one argument that isused to extract a comparison key from each element in iterable (for example,key=str.lower).  Equivalent to:  sorted(iterable, key=key)[:n]."
    },
    {
        "id": 1038,
        "name": "socket.ntohl()",
        "describe": "Convert 32-bit positive integers from network to host byte order.  On machineswhere the host byte order is the same as network byte order, this is a no-op;otherwise, it performs a 4-byte swap operation."
    },
    {
        "id": 1039,
        "name": "socket.ntohs()",
        "describe": "Convert 16-bit positive integers from network to host byte order.  On machineswhere the host byte order is the same as network byte order, this is a no-op;otherwise, it performs a 2-byte swap operation."
    },
    {
        "id": 1040,
        "name": "contextlib.nullcontext()",
        "describe": "Return a context manager that returns enter_result from __enter__, butotherwise does nothing. It is intended to be used as a stand-in for anoptional context manager, for example:"
    },
    {
        "id": 1041,
        "name": "unicodedata.numeric()",
        "describe": "Returns the numeric value assigned to the character chr as float.If no such value is defined, default is returned, or, if not given,ValueError is raised."
    },
    {
        "id": 1042,
        "name": "turtle.numinput()",
        "describe": "title \u2013 string"
    },
    {
        "id": 1043,
        "name": "turtle.onclick()",
        "describe": "fun \u2013 a function with two arguments which will be called with thecoordinates of the clicked point on the canvas"
    },
    {
        "id": 1044,
        "name": "turtle.ondrag()",
        "describe": "fun \u2013 a function with two arguments which will be called with thecoordinates of the clicked point on the canvas"
    },
    {
        "id": 1045,
        "name": "turtle.onkey()",
        "describe": "fun \u2013 a function with no arguments or None"
    },
    {
        "id": 1046,
        "name": "turtle.onkeypress()",
        "describe": "fun \u2013 a function with no arguments or None"
    },
    {
        "id": 1047,
        "name": "turtle.onkeyrelease()",
        "describe": "fun \u2013 a function with no arguments or None"
    },
    {
        "id": 1048,
        "name": "turtle.onrelease()",
        "describe": "fun \u2013 a function with two arguments which will be called with thecoordinates of the clicked point on the canvas"
    },
    {
        "id": 1049,
        "name": "turtle.onscreenclick()",
        "describe": "fun \u2013 a function with two arguments which will be called with thecoordinates of the clicked point on the canvas"
    },
    {
        "id": 1050,
        "name": "turtle.ontimer()",
        "describe": "fun \u2013 a function with no arguments"
    },
    {
        "id": 1051,
        "name": "io.open_code()",
        "describe": "Opens the provided file with mode 'rb'. This function should be usedwhen the intent is to treat the contents as executable code."
    },
    {
        "id": 1052,
        "name": "asyncio.open_connection()",
        "describe": "Establish a network connection and return a pair of(reader, writer) objects."
    },
    {
        "id": 1053,
        "name": "webbrowser.open_new()",
        "describe": "Open url in a new window of the default browser, if possible, otherwise, openurl in the only browser window."
    },
    {
        "id": 1054,
        "name": "webbrowser.open_new_tab()",
        "describe": "Open url in a new page (\u201ctab\u201d) of the default browser, if possible, otherwiseequivalent to open_new()."
    },
    {
        "id": 1055,
        "name": "msvcrt.open_osfhandle()",
        "describe": "Create a C runtime file descriptor from the file handle handle.  The flagsparameter should be a bitwise OR of os.O_APPEND, os.O_RDONLY,and os.O_TEXT.  The returned file descriptor may be used as a parameterto os.fdopen() to create a file object."
    },
    {
        "id": 1056,
        "name": "asyncio.open_unix_connection()",
        "describe": "Establish a Unix socket connection and return a pair of(reader, writer)."
    },
    {
        "id": 1057,
        "name": "syslog.openlog()",
        "describe": "Logging options of subsequent syslog() calls can be set by callingopenlog().  syslog() will call openlog() with no argumentsif the log is not currently open."
    },
    {
        "id": 1058,
        "name": "ossaudiodev.openmixer()",
        "describe": "Open a mixer device and return an OSS mixer device object.   device is themixer device filename to use.  If it is not specified, this module first looksin the environment variable MIXERDEV for a device to use.  If notfound, it falls back to /dev/mixer."
    },
    {
        "id": 1059,
        "name": "pty.openpty()",
        "describe": "Open a new pseudo-terminal pair, using os.openpty() if possible, oremulation code for generic Unix systems. Return a pair of file descriptors(master, slave), for the master and the slave end, respectively."
    },
    {
        "id": 1060,
        "name": "pickletools.optimize()",
        "describe": "Returns a new equivalent pickle string after eliminating unused PUTopcodes. The optimized pickle is shorter, takes less transmission time,requires less storage space, and unpickles more efficiently."
    },
    {
        "id": 1061,
        "name": "ConfigParser.optionxform()",
        "describe": "This method transforms option names on every read, get, or setoperation.  The default converts the name to lowercase.  This alsomeans that when a configuration file gets written, all keys will belowercase.  Override this method if that\u2019s unsuitable.For example:"
    },
    {
        "id": 1062,
        "name": "operator.or_()",
        "describe": "Return the bitwise or of a and b."
    },
    {
        "id": 1063,
        "name": "typing.overload()",
        "describe": "The @overload decorator allows describing functions and methodsthat support multiple different combinations of argument types. A seriesof @overload-decorated definitions must be followed by exactly onenon-@overload-decorated definition (for the same function/method).The @overload-decorated definitions are for the benefit of thetype checker only, since they will be overwritten by thenon-@overload-decorated definition, while the latter is used atruntime but should be ignored by a type checker.  At runtime, callinga @overload-decorated function directly will raiseNotImplementedError. An example of overload that gives a moreprecise type than can be expressed using a union or a type variable:"
    },
    {
        "id": 1064,
        "name": "struct.pack()",
        "describe": "Return a bytes object containing the values v1, v2, \u2026 packed accordingto the format string format.  The arguments must match the values required bythe format exactly."
    },
    {
        "id": 1065,
        "name": "struct.pack_into()",
        "describe": "Pack the values v1, v2, \u2026 according to the format string format andwrite the packed bytes into the writable buffer buffer starting atposition offset.  Note that offset is a required argument."
    },
    {
        "id": 1066,
        "name": "curses.pair_content()",
        "describe": "Return a tuple (fg, bg) containing the colors for the requested color pair.The value of pair_number must be between 0 and COLOR_PAIRS - 1."
    },
    {
        "id": 1067,
        "name": "curses.pair_number()",
        "describe": "Return the number of the color-pair set by the attribute value attr.color_pair() is the counterpart to this function."
    },
    {
        "id": 1068,
        "name": "multiprocessing.parent_process()",
        "describe": "Return the Process object corresponding to the parent process ofthe current_process(). For the main process, parent_process willbe None."
    },
    {
        "id": 1069,
        "name": "random.paretovariate()",
        "describe": "Pareto distribution.  alpha is the shape parameter."
    },
    {
        "id": 1070,
        "name": "ast.parse()",
        "describe": "Parse the source into an AST node.  Equivalent to compile(source,filename, mode, ast.PyCF_ONLY_AST)."
    },
    {
        "id": 1071,
        "name": "readline.parse_and_bind()",
        "describe": "Execute the init line provided in the string argument. This callsrl_parse_and_bind() in the underlying library."
    },
    {
        "id": 1072,
        "name": "sysconfig.parse_config_h()",
        "describe": "Parse a config.h-style file."
    },
    {
        "id": 1073,
        "name": "cgi.parse_header()",
        "describe": "Parse a MIME header (such as Content-Type) into a main value and adictionary of parameters."
    },
    {
        "id": 1074,
        "name": "cgi.parse_multipart()",
        "describe": "Parse input of type multipart/form-data (for  file uploads).Arguments are fp for the input file, pdict for a dictionary containingother parameters in the Content-Type header, and encoding,the request encoding."
    },
    {
        "id": 1075,
        "name": "functools.partial()",
        "describe": "Return a new partial object which when calledwill behave like func called with the positional arguments argsand keyword arguments keywords. If more arguments are supplied to thecall, they are appended to args. If additional keyword arguments aresupplied, they extend and override keywords.Roughly equivalent to:"
    },
    {
        "id": 1076,
        "name": "str.partition()",
        "describe": "Split the string at the first occurrence of sep, and return a 3-tuplecontaining the part before the separator, the separator itself, and the partafter the separator.  If the separator is not found, return a 3-tuple containingthe string itself, followed by two empty strings."
    },
    {
        "id": 1077,
        "name": "os.pathconf()",
        "describe": "Return system configuration information relevant to a named file. namespecifies the configuration value to retrieve; it may be a string which is thename of a defined system value; these names are specified in a number ofstandards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms defineadditional names as well.  The names known to the host operating system aregiven in the pathconf_names dictionary.  For configuration variables notincluded in that mapping, passing an integer for name is also accepted."
    },
    {
        "id": 1078,
        "name": "signal.pause()",
        "describe": "Cause the process to sleep until a signal is received; the appropriate handlerwill then be called.  Returns nothing."
    },
    {
        "id": 1079,
        "name": "hashlib.pbkdf2_hmac()",
        "describe": "The function provides PKCS#5 password-based key derivation function 2. Ituses HMAC as pseudorandom function."
    },
    {
        "id": 1080,
        "name": "turtle.pd()",
        "describe": "Pull the pen down \u2013 drawing when moving."
    },
    {
        "id": 1081,
        "name": "turtle.pen()",
        "describe": "pen \u2013 a dictionary with some or all of the below listed keys"
    },
    {
        "id": 1082,
        "name": "turtle.pencolor()",
        "describe": "Return or set the pencolor."
    },
    {
        "id": 1083,
        "name": "turtle.pendown()",
        "describe": "Pull the pen down \u2013 drawing when moving."
    },
    {
        "id": 1084,
        "name": "turtle.pensize()",
        "describe": "width \u2013 a positive number"
    },
    {
        "id": 1085,
        "name": "turtle.penup()",
        "describe": "Pull the pen up \u2013 no drawing when moving."
    },
    {
        "id": 1086,
        "name": "time.perf_counter()",
        "describe": "Return the value (in fractional seconds) of a performance counter, i.e. aclock with the highest available resolution to measure a short duration.  Itdoes include time elapsed during sleep and is system-wide.  The referencepoint of the returned value is undefined, so that only the difference betweenthe results of two calls is valid."
    },
    {
        "id": 1087,
        "name": "time.perf_counter_ns()",
        "describe": "Similar to perf_counter(), but return time as nanoseconds."
    },
    {
        "id": 1088,
        "name": "math.perm()",
        "describe": "Return the number of ways to choose k items from n itemswithout repetition and with order."
    },
    {
        "id": 1089,
        "name": "itertools.permutations()",
        "describe": "Return successive r length permutations of elements in the iterable."
    },
    {
        "id": 1090,
        "name": "pprint.pformat()",
        "describe": "Return the formatted representation of object as a string.  indent,width, depth, compact and sort_dicts will be passed to thePrettyPrinter constructor as formatting parameters."
    },
    {
        "id": 1091,
        "name": "cmath.phase()",
        "describe": "Return the phase of x (also known as the argument of x), as afloat.  phase(x) is equivalent to math.atan2(x.imag,x.real).  The result lies in the range [-\u03c0, \u03c0], and the branchcut for this operation lies along the negative real axis,continuous from above.  On systems with support for signed zeros(which includes most systems in current use), this means that thesign of the result is the same as the sign of x.imag, even whenx.imag is zero:"
    },
    {
        "id": 1092,
        "name": "copyreg.pickle()",
        "describe": "Declares that function should be used as a \u201creduction\u201d function for objectsof type type.  function should return either a string or a tuplecontaining two or three elements."
    },
    {
        "id": 1093,
        "name": "os.pidfd_open()",
        "describe": "Return a file descriptor referring to the process pid.  This descriptor canbe used to perform process management without races and signals.  The flagsargument is provided for future extensions; no flag values are currentlydefined."
    },
    {
        "id": 1094,
        "name": "signal.pidfd_send_signal()",
        "describe": "Send signal sig to the process referred to by file descriptor pidfd.Python does not currently support the siginfo parameter; it must beNone.  The flags argument is provided for future extensions; no flagvalues are currently defined."
    },
    {
        "id": 1095,
        "name": "os.pipe()",
        "describe": "Create a pipe.  Return a pair of file descriptors (r, w) usable forreading and writing, respectively. The new file descriptor isnon-inheritable."
    },
    {
        "id": 1096,
        "name": "os.pipe2()",
        "describe": "Create a pipe with flags set atomically.flags can be constructed by ORing together one or more of these values:O_NONBLOCK, O_CLOEXEC.Return a pair of file descriptors (r, w) usable for reading and writing,respectively."
    },
    {
        "id": 1097,
        "name": "platform.platform()",
        "describe": "Returns a single string identifying the underlying platform with as much usefulinformation as possible."
    },
    {
        "id": 1098,
        "name": "os.plock()",
        "describe": "Lock program segments into memory.  The value of op (defined in<sys/lock.h>) determines which segments are locked."
    },
    {
        "id": 1099,
        "name": "pdb.pm()",
        "describe": "Enter post-mortem debugging of the traceback found insys.last_traceback."
    },
    {
        "id": 1100,
        "name": "ctypes.pointer()",
        "describe": "This function creates a new pointer instance, pointing to obj. The returnedobject is of the type POINTER(type(obj))."
    },
    {
        "id": 1101,
        "name": "cmath.polar()",
        "describe": "Return the representation of x in polar coordinates.  Returns apair (r, phi) where r is the modulus of x and phi is thephase of x.  polar(x) is equivalent to (abs(x),phase(x))."
    },
    {
        "id": 1102,
        "name": "select.poll()",
        "describe": "(Not supported by all operating systems.)  Returns a polling object, whichsupports registering and unregistering file descriptors, and then polling themfor I/O events; see section Polling Objects below for the methods supportedby polling objects."
    },
    {
        "id": 1103,
        "name": "frozenset.pop()",
        "describe": "Remove and return an arbitrary element from the set.  RaisesKeyError if the set is empty."
    },
    {
        "id": 1104,
        "name": "os.popen()",
        "describe": "Open a pipe to or from command cmd.The return value is an open file objectconnected to the pipe, which can be read or written depending on whether modeis 'r' (default) or 'w'. The buffering argument has the same meaning asthe corresponding argument to the built-in open() function. Thereturned file object reads or writes text strings rather than bytes."
    },
    {
        "id": 1105,
        "name": "dict.popitem()",
        "describe": "Remove and return a (key, value) pair from the dictionary.Pairs are returned in LIFO order."
    },
    {
        "id": 1106,
        "name": "turtle.pos()",
        "describe": "Return the turtle\u2019s current location (x,y) (as a Vec2D vector)."
    },
    {
        "id": 1107,
        "name": "turtle.position()",
        "describe": "Return the turtle\u2019s current location (x,y) (as a Vec2D vector)."
    },
    {
        "id": 1108,
        "name": "os.posix_fadvise()",
        "describe": "Announces an intention to access data in a specific pattern thus allowingthe kernel to make optimizations.The advice applies to the region of the file specified by fd starting atoffset and continuing for len bytes.advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL,POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE,POSIX_FADV_WILLNEED or POSIX_FADV_DONTNEED."
    },
    {
        "id": 1109,
        "name": "os.posix_fallocate()",
        "describe": "Ensures that enough disk space is allocated for the file specified by fdstarting from offset and continuing for len bytes."
    },
    {
        "id": 1110,
        "name": "os.posix_spawn()",
        "describe": "Wraps the posix_spawn() C library API for use from Python."
    },
    {
        "id": 1111,
        "name": "os.posix_spawnp()",
        "describe": "Wraps the posix_spawnp() C library API for use from Python."
    },
    {
        "id": 1112,
        "name": "pdb.post_mortem()",
        "describe": "Enter post-mortem debugging of the given traceback object.  If notraceback is given, it uses the one of the exception that is currentlybeing handled (an exception must be being handled if the default is to beused)."
    },
    {
        "id": 1113,
        "name": "pprint.pp()",
        "describe": "Prints the formatted representation of object followed by a newline.If sort_dicts is false (the default), dictionaries will be displayed withtheir keys in insertion order, otherwise the dict keys will be sorted.args and kwargs will be passed to pprint() as formattingparameters."
    },
    {
        "id": 1114,
        "name": "pprint.pprint()",
        "describe": "Prints the formatted representation of object on stream, followed by anewline.  If stream is None, sys.stdout is used.  This may be usedin the interactive interpreter instead of the print() function forinspecting values (you can even reassign print = pprint.pprint for usewithin a scope).  indent, width, depth, compact and sort_dicts willbe passed to the PrettyPrinter constructor as formatting parameters."
    },
    {
        "id": 1115,
        "name": "calendar.prcal()",
        "describe": "Prints the calendar for an entire year as returned by  calendar()."
    },
    {
        "id": 1116,
        "name": "os.pread()",
        "describe": "Read at most n bytes from file descriptor fd at a position of offset,leaving the file offset unchanged."
    },
    {
        "id": 1117,
        "name": "os.preadv()",
        "describe": "Read from a file descriptor fd at a position of offset into mutablebytes-like objects buffers, leaving the fileoffset unchanged.  Transfer data into each buffer until it is full and thenmove on to the next buffer in the sequence to hold the rest of the data."
    },
    {
        "id": 1118,
        "name": "types.prepare_class()",
        "describe": "Calculates the appropriate metaclass and creates the class namespace."
    },
    {
        "id": 1119,
        "name": "cgi.print_directory()",
        "describe": "Format the current directory in HTML."
    },
    {
        "id": 1120,
        "name": "cgi.print_environ()",
        "describe": "Format the shell environment in HTML."
    },
    {
        "id": 1121,
        "name": "cgi.print_environ_usage()",
        "describe": "Print a list of useful (used by CGI) environment variables in HTML."
    },
    {
        "id": 1122,
        "name": "traceback.print_exc()",
        "describe": "This is a shorthand for print_exception(*sys.exc_info(), limit, file,chain)."
    },
    {
        "id": 1123,
        "name": "traceback.print_exception()",
        "describe": "Print exception information and stack trace entries from traceback objecttb to file. This differs from print_tb() in the followingways:"
    },
    {
        "id": 1124,
        "name": "cgi.print_form()",
        "describe": "Format a form in HTML."
    },
    {
        "id": 1125,
        "name": "traceback.print_last()",
        "describe": "This is a shorthand for print_exception(sys.last_type, sys.last_value,sys.last_traceback, limit, file, chain).  In general it will work onlyafter an exception has reached an interactive prompt (seesys.last_type)."
    },
    {
        "id": 1126,
        "name": "traceback.print_stack()",
        "describe": "Print up to limit stack trace entries (starting from the invocationpoint) if limit is positive.  Otherwise, print the last abs(limit)entries.  If limit is omitted or None, all entries are printed.The optional f argument can be used to specify an alternate stack frameto start.  The optional file argument has the same meaning as forprint_tb()."
    },
    {
        "id": 1127,
        "name": "traceback.print_tb()",
        "describe": "Print up to limit stack trace entries from traceback object tb (startingfrom the caller\u2019s frame) if limit is positive.  Otherwise, print the lastabs(limit) entries.  If limit is omitted or None, all entries areprinted.  If file is omitted or None, the output goes tosys.stderr; otherwise it should be an open file or file-like object toreceive the output."
    },
    {
        "id": 1128,
        "name": "resource.prlimit()",
        "describe": "Combines setrlimit() and getrlimit() in one function andsupports to get and set the resources limits of an arbitrary process. Ifpid is 0, then the call applies to the current process. resource andlimits have the same meaning as in setrlimit(), except thatlimits is optional."
    },
    {
        "id": 1129,
        "name": "calendar.prmonth()",
        "describe": "Prints a month\u2019s calendar as returned by month()."
    },
    {
        "id": 1130,
        "name": "time.process_time()",
        "describe": "Return the value (in fractional seconds) of the sum of the system and userCPU time of the current process.  It does not include time elapsed duringsleep.  It is process-wide by definition.  The reference point of thereturned value is undefined, so that only the difference between the resultsof two calls is valid."
    },
    {
        "id": 1131,
        "name": "time.process_time_ns()",
        "describe": "Similar to process_time() but return time as nanoseconds."
    },
    {
        "id": 1132,
        "name": "tabnanny.process_tokens()",
        "describe": "This function is used by check() to process tokens generated by thetokenize module."
    },
    {
        "id": 1133,
        "name": "platform.processor()",
        "describe": "Returns the (real) processor name, e.g. 'amdk6'."
    },
    {
        "id": 1134,
        "name": "math.prod()",
        "describe": "Calculate the product of all the elements in the input iterable.The default start value for the product is 1."
    },
    {
        "id": 1135,
        "name": "itertools.product()",
        "describe": "Cartesian product of input iterables."
    },
    {
        "id": 1136,
        "name": "weakref.proxy()",
        "describe": "Return a proxy to object which uses a weak reference.  This supports use ofthe proxy in most contexts instead of requiring the explicit dereferencing usedwith weak reference objects.  The returned object will have a type of eitherProxyType or CallableProxyType, depending on whether object iscallable.  Proxy objects are not hashable regardless of the referent; thisavoids a number of problems related to their fundamentally mutable nature, andprevent their use as dictionary keys.  callback is the same as the parameterof the same name to the ref() function."
    },
    {
        "id": 1137,
        "name": "statistics.pstdev()",
        "describe": "Return the population standard deviation (the square root of the populationvariance).  See pvariance() for arguments and other details."
    },
    {
        "id": 1138,
        "name": "time.pthread_getcpuclockid()",
        "describe": "Return the clk_id of the thread-specific CPU-time clock for the specified thread_id."
    },
    {
        "id": 1139,
        "name": "signal.pthread_kill()",
        "describe": "Send the signal signalnum to the thread thread_id, another thread in thesame process as the caller.  The target thread can be executing any code(Python or not).  However, if the target thread is executing the Pythoninterpreter, the Python signal handlers will be executed by the mainthread of the main interpreter.  Therefore, the only point of sending asignal to a particular Python thread would be to force a running system callto fail with InterruptedError."
    },
    {
        "id": 1140,
        "name": "signal.pthread_sigmask()",
        "describe": "Fetch and/or change the signal mask of the calling thread.  The signal maskis the set of signals whose delivery is currently blocked for the caller.Return the old signal mask as a set of signals."
    },
    {
        "id": 1141,
        "name": "turtle.pu()",
        "describe": "Pull the pen up \u2013 no drawing when moving."
    },
    {
        "id": 1142,
        "name": "re.purge()",
        "describe": "Clear the regular expression cache."
    },
    {
        "id": 1143,
        "name": "msvcrt.putch()",
        "describe": "Print the byte string char to the console without buffering."
    },
    {
        "id": 1144,
        "name": "os.putenv()",
        "describe": "Set the environment variable named key to the string value.  Suchchanges to the environment affect subprocesses started with os.system(),popen() or fork() and execv()."
    },
    {
        "id": 1145,
        "name": "curses.putp()",
        "describe": "Equivalent to tputs(str, 1, putchar); emit the value of a specifiedterminfo capability for the current terminal.  Note that the output of putp()always goes to standard output."
    },
    {
        "id": 1146,
        "name": "msvcrt.putwch()",
        "describe": "Wide char variant of putch(), accepting a Unicode value."
    },
    {
        "id": 1147,
        "name": "statistics.pvariance()",
        "describe": "Return the population variance of data, a non-empty sequence or iterableof real-valued numbers.  Variance, or second moment about the mean, is ameasure of the variability (spread or dispersion) of data.  A largevariance indicates that the data is spread out; a small variance indicatesit is clustered closely around the mean."
    },
    {
        "id": 1148,
        "name": "os.pwrite()",
        "describe": "Write the bytestring in str to file descriptor fd at position ofoffset, leaving the file offset unchanged."
    },
    {
        "id": 1149,
        "name": "os.pwritev()",
        "describe": "Write the buffers contents to file descriptor fd at a offset offset,leaving the file offset unchanged.  buffers must be a sequence ofbytes-like objects. Buffers are processed inarray order. Entire contents of the first buffer is written beforeproceeding to the second, and so on."
    },
    {
        "id": 1150,
        "name": "platform.python_branch()",
        "describe": "Returns a string identifying the Python implementation SCM branch."
    },
    {
        "id": 1151,
        "name": "platform.python_build()",
        "describe": "Returns a tuple (buildno, builddate) stating the Python build number anddate as strings."
    },
    {
        "id": 1152,
        "name": "platform.python_compiler()",
        "describe": "Returns a string identifying the compiler used for compiling Python."
    },
    {
        "id": 1153,
        "name": "platform.python_implementation()",
        "describe": "Returns a string identifying the Python implementation. Possible return valuesare: \u2018CPython\u2019, \u2018IronPython\u2019, \u2018Jython\u2019, \u2018PyPy\u2019."
    },
    {
        "id": 1154,
        "name": "platform.python_revision()",
        "describe": "Returns a string identifying the Python implementation SCM revision."
    },
    {
        "id": 1155,
        "name": "platform.python_version()",
        "describe": "Returns the Python version as string 'major.minor.patchlevel'."
    },
    {
        "id": 1156,
        "name": "platform.python_version_tuple()",
        "describe": "Returns the Python version as tuple (major, minor, patchlevel) of strings."
    },
    {
        "id": 1157,
        "name": "curses.qiflush()",
        "describe": "If flag is False, the effect is the same as calling noqiflush(). Ifflag is True, or no argument is provided, the queues will be flushed whenthese control characters are read."
    },
    {
        "id": 1158,
        "name": "statistics.quantiles()",
        "describe": "Divide data into n continuous intervals with equal probability.Returns a list of n - 1 cut points separating the intervals."
    },
    {
        "id": 1159,
        "name": "shlex.quote()",
        "describe": "Return a shell-escaped version of the string s.  The returned value is astring that can safely be used as one token in a shell command line, forcases where you cannot use a list."
    },
    {
        "id": 1160,
        "name": "turtle.radians()",
        "describe": "Set the angle measurement units to radians.  Equivalent todegrees(2*math.pi)."
    },
    {
        "id": 1161,
        "name": "signal.raise_signal()",
        "describe": "Sends a signal to the calling process. Returns nothing."
    },
    {
        "id": 1162,
        "name": "secrets.randbelow()",
        "describe": "Return a random int in the range [0, n)."
    },
    {
        "id": 1163,
        "name": "secrets.randbits()",
        "describe": "Return an int with k random bits."
    },
    {
        "id": 1164,
        "name": "random.randbytes()",
        "describe": "Generate n random bytes."
    },
    {
        "id": 1165,
        "name": "random.randint()",
        "describe": "Return a random integer N such that a <= N <= b.  Alias forrandrange(a, b+1)."
    },
    {
        "id": 1166,
        "name": "random.random()",
        "describe": "Return the next random floating point number in the range [0.0, 1.0)."
    },
    {
        "id": 1167,
        "name": "random.randrange()",
        "describe": "Return a randomly selected element from range(start, stop, step).  This isequivalent to choice(range(start, stop, step)), but doesn\u2019t actually build arange object."
    },
    {
        "id": 1168,
        "name": "audioop.ratecv()",
        "describe": "Convert the frame rate of the input fragment."
    },
    {
        "id": 1169,
        "name": "curses.raw()",
        "describe": "Enter raw mode.  In raw mode, normal line buffering and  processing ofinterrupt, quit, suspend, and flow control keys are turned off; characters arepresented to curses input functions one by one."
    },
    {
        "id": 1170,
        "name": "os.read()",
        "describe": "Read at most n bytes from file descriptor fd."
    },
    {
        "id": 1171,
        "name": "readline.read_history_file()",
        "describe": "Load a readline history file, and append it to the history list.The default filename is ~/.history.  This callsread_history() in the underlying library."
    },
    {
        "id": 1172,
        "name": "readline.read_init_file()",
        "describe": "Execute a readline initialization file. The default filename is the last filenameused. This calls rl_read_init_file() in the underlying library."
    },
    {
        "id": 1173,
        "name": "mimetypes.read_mime_types()",
        "describe": "Load the type map given in the file filename, if it exists.  The type map isreturned as a dictionary mapping filename extensions, including the leading dot('.'), to strings of the form 'type/subtype'.  If the file filenamedoes not exist or cannot be read, None is returned."
    },
    {
        "id": 1174,
        "name": "csv.reader()",
        "describe": "Return a reader object which will iterate over lines in the given csvfile.csvfile can be any object which supports the iterator protocol and returns astring each time its __next__() method is called \u2014 file objects and list objects are both suitable.   If csvfile is a file object,it should be opened with newline=''. 1  An optionaldialect parameter can be given which is used to define a set of parametersspecific to a particular CSV dialect.  It may be an instance of a subclass ofthe Dialect class or one of the strings returned by thelist_dialects() function.  The other optional fmtparams keyword argumentscan be given to override individual formatting parameters in the currentdialect.  For full details about the dialect and formatting parameters, seesection Dialects and Formatting Parameters."
    },
    {
        "id": 1175,
        "name": "os.readlink()",
        "describe": "Return a string representing the path to which the symbolic link points.  Theresult may be either an absolute or relative pathname; if it is relative, itmay be converted to an absolute pathname usingos.path.join(os.path.dirname(path), result)."
    },
    {
        "id": 1176,
        "name": "pyclbr.readmodule()",
        "describe": "Return a dictionary mapping module-level class names to classdescriptors.  If possible, descriptors for imported base classes areincluded.  Parameter module is a string with the name of the moduleto read; it may be the name of a module within a package.  If given,path is a sequence of directory paths prepended to sys.path,which is used to locate the module source code."
    },
    {
        "id": 1177,
        "name": "pyclbr.readmodule_ex()",
        "describe": "Return a dictionary-based tree containing a function or classdescriptors for each function and class defined in the module with adef or class statement.  The returned dictionary mapsmodule-level function and class names to their descriptors.  Nestedobjects are entered into the children dictionary of their parent.  Aswith readmodule, module names the module to be read and path isprepended to sys.path.  If the module being read is a package, thereturned dictionary has a key '__path__' whose value is a listcontaining the package search path."
    },
    {
        "id": 1178,
        "name": "os.readv()",
        "describe": "Read from a file descriptor fd into a number of mutable bytes-likeobjects buffers. Transfer data into each buffer untilit is full and then move on to the next buffer in the sequence to hold therest of the data."
    },
    {
        "id": 1179,
        "name": "cmath.rect()",
        "describe": "Return the complex number x with polar coordinates r and phi.Equivalent to r * (math.cos(phi) + math.sin(phi)*1j)."
    },
    {
        "id": 1180,
        "name": "reprlib.recursive_repr()",
        "describe": "Decorator for __repr__() methods to detect recursive calls within thesame thread.  If a recursive call is made, the fillvalue is returned,otherwise, the usual __repr__() call is made.  For example:"
    },
    {
        "id": 1181,
        "name": "contextlib.redirect_stderr()",
        "describe": "Similar to redirect_stdout() but redirectingsys.stderr to another file or file-like object."
    },
    {
        "id": 1182,
        "name": "contextlib.redirect_stdout()",
        "describe": "Context manager for temporarily redirecting sys.stdout toanother file or file-like object."
    },
    {
        "id": 1183,
        "name": "readline.redisplay()",
        "describe": "Change what\u2019s displayed on the screen to reflect the current contents of theline buffer.  This calls rl_redisplay() in the underlying library."
    },
    {
        "id": 1184,
        "name": "functools.reduce()",
        "describe": "Apply function of two arguments cumulatively to the items of iterable, fromleft to right, so as to reduce the iterable to a single value.  For example,reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5).The left argument, x, is the accumulated value and the right argument, y, isthe update value from the iterable.  If the optional initializer is present,it is placed before the items of the iterable in the calculation, and serves asa default when the iterable is empty.  If initializer is not given anditerable contains only one item, the first item is returned."
    },
    {
        "id": 1185,
        "name": "unittest.registerResult()",
        "describe": "Register a TestResult object for control-c handling. Registering aresult stores a weak reference to it, so it doesn\u2019t prevent the result frombeing garbage collected."
    },
    {
        "id": 1186,
        "name": "sqlite3.register_adapter()",
        "describe": "Registers a callable to convert the custom Python type type into one ofSQLite\u2019s supported types. The callable callable accepts as single parameterthe Python value, and must return a value of the following types: int,float, str or bytes."
    },
    {
        "id": 1187,
        "name": "shutil.register_archive_format()",
        "describe": "Register an archiver for the format name."
    },
    {
        "id": 1188,
        "name": "os.register_at_fork()",
        "describe": "Register callables to be executed when a new child process is forkedusing os.fork() or similar process cloning APIs.The parameters are optional and keyword-only.Each specifies a different call point."
    },
    {
        "id": 1189,
        "name": "sqlite3.register_converter()",
        "describe": "Registers a callable to convert a bytestring from the database into a customPython type. The callable will be invoked for all database values that are ofthe type typename. Confer the parameter detect_types of the connect()function for how the type detection works. Note that typename and the name ofthe type in your query are matched in case-insensitive manner."
    },
    {
        "id": 1190,
        "name": "csv.register_dialect()",
        "describe": "Associate dialect with name.  name must be a string. Thedialect can be specified either by passing a sub-class of Dialect, orby fmtparams keyword arguments, or both, with keyword arguments overridingparameters of the dialect. For full details about the dialect and formattingparameters, see section Dialects and Formatting Parameters."
    },
    {
        "id": 1191,
        "name": "codecs.register_error()",
        "describe": "Register the error handling function error_handler under the name name.The error_handler argument will be called during encoding and decodingin case of an error, when name is specified as the errors parameter."
    },
    {
        "id": 1192,
        "name": "doctest.register_optionflag()",
        "describe": "Create a new option flag with a given name, and return the new flag\u2019s integervalue.  register_optionflag() can be used when subclassingOutputChecker or DocTestRunner to create new options that aresupported by your subclasses.  register_optionflag() should always becalled using the following idiom:"
    },
    {
        "id": 1193,
        "name": "turtle.register_shape()",
        "describe": "There are three different ways to call this function:"
    },
    {
        "id": 1194,
        "name": "shutil.register_unpack_format()",
        "describe": "Registers an unpack format. name is the name of the format andextensions is a list of extensions corresponding to the format, like.zip for Zip files."
    },
    {
        "id": 1195,
        "name": "platform.release()",
        "describe": "Returns the system\u2019s release, e.g. '2.2.0' or 'NT' An empty string isreturned if the value cannot be determined."
    },
    {
        "id": 1196,
        "name": "imp.release_lock()",
        "describe": "Release the interpreter\u2019s global import lock. On platforms withoutthreads, this function does nothing."
    },
    {
        "id": 1197,
        "name": "importlib.reload()",
        "describe": "Reload a previously imported module.  The argument must be a module object,so it must have been successfully imported before.  This is useful if youhave edited the module source file using an external editor and want to tryout the new version without leaving the Python interpreter.  The return valueis the module object (which can be different if re-importing causes adifferent object to be placed in sys.modules)."
    },
    {
        "id": 1198,
        "name": "math.remainder()",
        "describe": "Return the IEEE 754-style remainder of x with respect to y.  Forfinite x and finite nonzero y, this is the difference x - n*y,where n is the closest integer to the exact value of the quotient x /y.  If x / y is exactly halfway between two consecutive integers, thenearest even integer is used for n.  The remainder r = remainder(x,y) thus always satisfies abs(r) <= 0.5 * abs(y)."
    },
    {
        "id": 1199,
        "name": "os.remove()",
        "describe": "Remove (delete) the file path.  If path is a directory, anIsADirectoryError is raised.  Use rmdir() to remove directories."
    },
    {
        "id": 1200,
        "name": "unittest.removeHandler()",
        "describe": "When called without arguments this function removes the control-c handlerif it has been installed. This function can also be used as a test decoratorto temporarily remove the handler while the test is being executed:"
    },
    {
        "id": 1201,
        "name": "unittest.removeResult()",
        "describe": "Remove a registered result. Once a result has been removed thenstop() will no longer be called on that result object inresponse to a control-c."
    },
    {
        "id": 1202,
        "name": "readline.remove_history_item()",
        "describe": "Remove history item specified by its position from the history.The position is zero-based.  This calls remove_history() inthe underlying library."
    },
    {
        "id": 1203,
        "name": "os.removedirs()",
        "describe": "Remove directories recursively.  Works like rmdir() except that, if theleaf directory is successfully removed, removedirs()  tries tosuccessively remove every parent directory mentioned in  path until an erroris raised (which is ignored, because it generally means that a parent directoryis not empty). For example, os.removedirs('foo/bar/baz') will first removethe directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' ifthey are empty. Raises OSError if the leaf directory could not besuccessfully removed."
    },
    {
        "id": 1204,
        "name": "str.removeprefix()",
        "describe": "If the string starts with the prefix string, returnstring[len(prefix):]. Otherwise, return a copy of the originalstring:"
    },
    {
        "id": 1205,
        "name": "str.removesuffix()",
        "describe": "If the string ends with the suffix string and that suffix is not empty,return string[:-len(suffix)]. Otherwise, return a copy of theoriginal string:"
    },
    {
        "id": 1206,
        "name": "os.removexattr()",
        "describe": "Removes the extended filesystem attribute attribute from path.attribute should be bytes or str (directly or indirectly through thePathLike interface). If it is a string, it is encodedwith the filesystem encoding."
    },
    {
        "id": 1207,
        "name": "os.rename()",
        "describe": "Rename the file or directory src to dst. If dst exists, the operationwill fail with an OSError subclass in a number of cases:"
    },
    {
        "id": 1208,
        "name": "os.renames()",
        "describe": "Recursive directory or file renaming function. Works like rename(), exceptcreation of any intermediate directories needed to make the new pathname good isattempted first. After the rename, directories corresponding to rightmost pathsegments of the old name will be pruned away using removedirs()."
    },
    {
        "id": 1209,
        "name": "itertools.repeat()",
        "describe": "Make an iterator that returns object over and over again. Runs indefinitelyunless the times argument is specified. Used as argument to map() forinvariant parameters to the called function.  Also used with zip() tocreate an invariant part of a tuple record."
    },
    {
        "id": 1210,
        "name": "dataclasses.replace()",
        "describe": "Creates a new object of the same type of instance, replacingfields with values from changes.  If instance is not a DataClass, raises TypeError.  If values in changes do notspecify fields, raises TypeError."
    },
    {
        "id": 1211,
        "name": "codecs.replace_errors()",
        "describe": "Implements the 'replace' error handling (for text encodings only): substitutes '?' for encoding errors(to be encoded by the codec), and '\\ufffd' (the Unicode replacementcharacter) for decoding errors."
    },
    {
        "id": 1212,
        "name": "readline.replace_history_item()",
        "describe": "Replace history item specified by its position with line.The position is zero-based.  This calls replace_history_entry()in the underlying library."
    },
    {
        "id": 1213,
        "name": "Repr.repr_TYPE()",
        "describe": "Formatting methods for specific types are implemented as methods with a namebased on the type name.  In the method name, TYPE is replaced by'_'.join(type(obj).__name__.split()). Dispatch to these methods ishandled by repr1(). Type-specific methods which need to recursivelyformat a value should call self.repr1(subobj, level - 1)."
    },
    {
        "id": 1214,
        "name": "turtle.reset()",
        "describe": "Reset all Turtles on the Screen to their initial state."
    },
    {
        "id": 1215,
        "name": "curses.reset_prog_mode()",
        "describe": "Restore the  terminal  to \u201cprogram\u201d mode, as previously saved  bydef_prog_mode()."
    },
    {
        "id": 1216,
        "name": "curses.reset_shell_mode()",
        "describe": "Restore the  terminal  to \u201cshell\u201d mode, as previously saved  bydef_shell_mode()."
    },
    {
        "id": 1217,
        "name": "zoneinfo.reset_tzpath()",
        "describe": "Sets or resets the time zone search path (TZPATH) for the module.When called with no arguments, TZPATH is set to the default value."
    },
    {
        "id": 1218,
        "name": "locale.resetlocale()",
        "describe": "Sets the locale for category to the default setting."
    },
    {
        "id": 1219,
        "name": "turtle.resetscreen()",
        "describe": "Reset all Turtles on the Screen to their initial state."
    },
    {
        "id": 1220,
        "name": "curses.resetty()",
        "describe": "Restore the state of the terminal modes to what it was at the last call tosavetty()."
    },
    {
        "id": 1221,
        "name": "warnings.resetwarnings()",
        "describe": "Reset the warnings filter.  This discards the effect of all previous calls tofilterwarnings(), including that of the -W command line optionsand calls to simplefilter()."
    },
    {
        "id": 1222,
        "name": "ctypes.resize()",
        "describe": "This function resizes the internal memory buffer of obj, which must be aninstance of a ctypes type.  It is not possible to make the buffer smallerthan the native size of the objects type, as given by sizeof(type(obj)),but it is possible to enlarge the buffer."
    },
    {
        "id": 1223,
        "name": "curses.resize_term()",
        "describe": "Backend function used by resizeterm(), performing most of the work;when resizing the windows, resize_term() blank-fills the areas that areextended.  The calling application should fill in these areas withappropriate data.  The resize_term() function attempts to resize allwindows.  However, due to the calling convention of pads, it is not possibleto resize these without additional interaction with the application."
    },
    {
        "id": 1224,
        "name": "turtle.resizemode()",
        "describe": "rmode \u2013 one of the strings \u201cauto\u201d, \u201cuser\u201d, \u201cnoresize\u201d"
    },
    {
        "id": 1225,
        "name": "curses.resizeterm()",
        "describe": "Resize the standard and current windows to the specified dimensions, andadjusts other bookkeeping data used by the curses library that record thewindow dimensions (in particular the SIGWINCH handler)."
    },
    {
        "id": 1226,
        "name": "types.resolve_bases()",
        "describe": "Resolve MRO entries dynamically as specified by PEP 560."
    },
    {
        "id": 1227,
        "name": "pkgutil.resolve_name()",
        "describe": "Resolve a name to an object."
    },
    {
        "id": 1228,
        "name": "difflib.restore()",
        "describe": "Return one of the two sequences that generated a delta."
    },
    {
        "id": 1229,
        "name": "audioop.reverse()",
        "describe": "Reverse the samples in a fragment and returns the modified fragment."
    },
    {
        "id": 1230,
        "name": "str.rfind()",
        "describe": "Return the highest index in the string where substring sub is found, suchthat sub is contained within s[start:end].  Optional arguments startand end are interpreted as in slice notation.  Return -1 on failure."
    },
    {
        "id": 1231,
        "name": "colorsys.rgb_to_hls()",
        "describe": "Convert the color from RGB coordinates to HLS coordinates."
    },
    {
        "id": 1232,
        "name": "colorsys.rgb_to_hsv()",
        "describe": "Convert the color from RGB coordinates to HSV coordinates."
    },
    {
        "id": 1233,
        "name": "colorsys.rgb_to_yiq()",
        "describe": "Convert the color from RGB coordinates to YIQ coordinates."
    },
    {
        "id": 1234,
        "name": "turtle.right()",
        "describe": "angle \u2013 a number (integer or float)"
    },
    {
        "id": 1235,
        "name": "str.rindex()",
        "describe": "Like rfind() but raises ValueError when the substring sub is notfound."
    },
    {
        "id": 1236,
        "name": "str.rjust()",
        "describe": "Return the string right justified in a string of length width. Padding isdone using the specified fillchar (default is an ASCII space). Theoriginal string is returned if width is less than or equal to len(s)."
    },
    {
        "id": 1237,
        "name": "binascii.rlecode_hqx()",
        "describe": "Perform binhex4 style RLE-compression on data and return the result."
    },
    {
        "id": 1238,
        "name": "binascii.rledecode_hqx()",
        "describe": "Perform RLE-decompression on the data, as per the binhex4 standard. Thealgorithm uses 0x90 after a byte as a repeat indicator, followed by a count.A count of 0 specifies a byte value of 0x90. The routine returns thedecompressed data, unless data input data ends in an orphaned repeat indicator,in which case the Incomplete exception is raised."
    },
    {
        "id": 1239,
        "name": "os.rmdir()",
        "describe": "Remove (delete) the directory path.  If the directory does not exist or isnot empty, an FileNotFoundError or an OSError is raisedrespectively.  In order to remove whole directory trees,shutil.rmtree() can be used."
    },
    {
        "id": 1240,
        "name": "audioop.rms()",
        "describe": "Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)/n)."
    },
    {
        "id": 1241,
        "name": "shutil.rmtree()",
        "describe": "Delete an entire directory tree; path must point to a directory (but not asymbolic link to a directory).  If ignore_errors is true, errors resultingfrom failed removals will be ignored; if false or omitted, such errors arehandled by calling a handler specified by onerror or, if that is omitted,they raise an exception."
    },
    {
        "id": 1242,
        "name": "str.rpartition()",
        "describe": "Split the string at the last occurrence of sep, and return a 3-tuplecontaining the part before the separator, the separator itself, and the partafter the separator.  If the separator is not found, return a 3-tuple containingtwo empty strings, followed by the string itself."
    },
    {
        "id": 1243,
        "name": "operator.rshift()",
        "describe": "Return a shifted right by b."
    },
    {
        "id": 1244,
        "name": "str.rsplit()",
        "describe": "Return a list of the words in the string, using sep as the delimiter string.If maxsplit is given, at most maxsplit splits are done, the rightmostones.  If sep is not specified or None, any whitespace string is aseparator.  Except for splitting from the right, rsplit() behaves likesplit() which is described in detail below."
    },
    {
        "id": 1245,
        "name": "str.rstrip()",
        "describe": "Return a copy of the string with trailing characters removed.  The charsargument is a string specifying the set of characters to be removed.  If omittedor None, the chars argument defaults to removing whitespace.  The charsargument is not a suffix; rather, all combinations of its values are stripped:"
    },
    {
        "id": 1246,
        "name": "turtle.rt()",
        "describe": "angle \u2013 a number (integer or float)"
    },
    {
        "id": 1247,
        "name": "profile.run()",
        "describe": "This function takes a single argument that can be passed to the exec()function, and an optional file name.  In all cases this routine executes:"
    },
    {
        "id": 1248,
        "name": "asyncio.run_coroutine_threadsafe()",
        "describe": "Submit a coroutine to the given event loop.  Thread-safe."
    },
    {
        "id": 1249,
        "name": "doctest.run_docstring_examples()",
        "describe": "Test examples associated with object f; for example, f may be a string,a module, a function, or a class object."
    },
    {
        "id": 1250,
        "name": "runpy.run_module()",
        "describe": "Execute the code of the specified module and return the resulting moduleglobals dictionary. The module\u2019s code is first located using the standardimport mechanism (refer to PEP 302 for details) and then executed in afresh module namespace."
    },
    {
        "id": 1251,
        "name": "runpy.run_path()",
        "describe": "Execute the code at the named filesystem location and return the resultingmodule globals dictionary. As with a script name supplied to the CPythoncommand line, the supplied path may refer to a Python source file, acompiled bytecode file or a valid sys.path entry containing a __main__module (e.g. a zipfile containing a top-level __main__.py file)."
    },
    {
        "id": 1252,
        "name": "pdb.runcall()",
        "describe": "Call the function (a function or method object, not a string) with thegiven arguments.  When runcall() returns, it returns whatever thefunction call returned.  The debugger prompt appears as soon as the functionis entered."
    },
    {
        "id": 1253,
        "name": "profile.runctx()",
        "describe": "This function is similar to run(), with added arguments to supply theglobals and locals dictionaries for the command string. This routineexecutes:"
    },
    {
        "id": 1254,
        "name": "pdb.runeval()",
        "describe": "Evaluate the expression (given as a string or a code object) under debuggercontrol.  When runeval() returns, it returns the value of theexpression.  Otherwise this function is similar to run()."
    },
    {
        "id": 1255,
        "name": "typing.runtime_checkable()",
        "describe": "Mark a protocol class as a runtime protocol."
    },
    {
        "id": 1256,
        "name": "pprint.saferepr()",
        "describe": "Return a string representation of object, protected against recursive datastructures.  If the representation of object exposes a recursive entry, therecursive reference will be represented as <Recursion on typename withid=number>.  The representation is not otherwise formatted."
    },
    {
        "id": 1257,
        "name": "random.sample()",
        "describe": "Return a k length list of unique elements chosen from the population sequenceor set. Used for random sampling without replacement."
    },
    {
        "id": 1258,
        "name": "curses.savetty()",
        "describe": "Save the current state of the terminal modes in a buffer, usable byresetty()."
    },
    {
        "id": 1259,
        "name": "os.scandir()",
        "describe": "Return an iterator of os.DirEntry objects corresponding to theentries in the directory given by path. The entries are yielded inarbitrary order, and the special entries '.' and '..' are notincluded.  If a file is removed from or added to the directory aftercreating the iterator, whether an entry for that file be included isunspecified."
    },
    {
        "id": 1260,
        "name": "os.sched_get_priority_max()",
        "describe": "Get the maximum priority value for policy. policy is one of thescheduling policy constants above."
    },
    {
        "id": 1261,
        "name": "os.sched_get_priority_min()",
        "describe": "Get the minimum priority value for policy. policy is one of thescheduling policy constants above."
    },
    {
        "id": 1262,
        "name": "os.sched_getaffinity()",
        "describe": "Return the set of CPUs the process with PID pid (or the current processif zero) is restricted to."
    },
    {
        "id": 1263,
        "name": "os.sched_getparam()",
        "describe": "Return the scheduling parameters as a sched_param instance for theprocess with PID pid. A pid of 0 means the calling process."
    },
    {
        "id": 1264,
        "name": "os.sched_getscheduler()",
        "describe": "Return the scheduling policy for the process with PID pid. A pid of 0means the calling process. The result is one of the scheduling policyconstants above."
    },
    {
        "id": 1265,
        "name": "os.sched_rr_get_interval()",
        "describe": "Return the round-robin quantum in seconds for the process with PID pid. Apid of 0 means the calling process."
    },
    {
        "id": 1266,
        "name": "os.sched_setaffinity()",
        "describe": "Restrict the process with PID pid (or the current process if zero) to aset of CPUs.  mask is an iterable of integers representing the set ofCPUs to which the process should be restricted."
    },
    {
        "id": 1267,
        "name": "os.sched_setparam()",
        "describe": "Set a scheduling parameters for the process with PID pid. A pid of 0 meansthe calling process. param is a sched_param instance."
    },
    {
        "id": 1268,
        "name": "os.sched_setscheduler()",
        "describe": "Set the scheduling policy for the process with PID pid. A pid of 0 meansthe calling process. policy is one of the scheduling policy constantsabove. param is a sched_param instance."
    },
    {
        "id": 1269,
        "name": "os.sched_yield()",
        "describe": "Voluntarily relinquish the CPU."
    },
    {
        "id": 1270,
        "name": "turtle.screensize()",
        "describe": "canvwidth \u2013 positive integer, new width of canvas in pixels"
    },
    {
        "id": 1271,
        "name": "doctest.script_from_examples()",
        "describe": "Convert text with examples to a script."
    },
    {
        "id": 1272,
        "name": "hashlib.scrypt()",
        "describe": "The function provides scrypt password-based key derivation function asdefined in RFC 7914."
    },
    {
        "id": 1273,
        "name": "re.search()",
        "describe": "Scan through string looking for the first location where the regular expressionpattern produces a match, and return a corresponding match object.  Return None if no position in the string matches thepattern; note that this is different from finding a zero-length match at somepoint in the string."
    },
    {
        "id": 1274,
        "name": "random.seed()",
        "describe": "Initialize the random number generator."
    },
    {
        "id": 1275,
        "name": "select.select()",
        "describe": "This is a straightforward interface to the Unix select() system call.The first three arguments are iterables of \u2018waitable objects\u2019: eitherintegers representing file descriptors or objects with a parameterless methodnamed fileno() returning such an integer:"
    },
    {
        "id": 1276,
        "name": "os.sendfile()",
        "describe": "Copy count bytes from file descriptor in_fd to file descriptor out_fdstarting at offset.Return the number of bytes sent. When EOF is reached return 0."
    },
    {
        "id": 1277,
        "name": "socket.sendto()",
        "describe": "Send data to the socket.  The socket should not be connected to a remote socket,since the destination socket is specified by address.  The optional flagsargument has the same meaning as for recv() above.  Return the number ofbytes sent. (The format of address depends on the address family \u2014 seeabove.)"
    },
    {
        "id": 1278,
        "name": "parser.sequence2st()",
        "describe": "This function accepts a parse tree represented as a sequence and builds aninternal representation if possible.  If it can validate that the tree conformsto the Python grammar and all nodes are valid node types in the host version ofPython, an ST object is created from the internal representation and returnedto the called.  If there is a problem creating the internal representation, orif the tree cannot be validated, a ParserError exception is raised.  AnST object created this way should not be assumed to compile correctly; normalexceptions raised by compilation may still be initiated when the ST object ispassed to compilest().  This may indicate problems not related to syntax(such as a MemoryError exception), but may also be due to constructs suchas the result of parsing del f(0), which escapes the Python parser but ischecked by the bytecode compiler."
    },
    {
        "id": 1279,
        "name": "logging.setLogRecordFactory()",
        "describe": "Set a callable which is used to create a LogRecord."
    },
    {
        "id": 1280,
        "name": "logging.setLoggerClass()",
        "describe": "Tells the logging system to use the class klass when instantiating a logger.The class should define __init__() such that only a name argument isrequired, and the __init__() should call Logger.__init__(). Thisfunction is typically called before any loggers are instantiated by applicationswhich need to use custom logger behavior. After this call, as at any othertime, do not instantiate loggers directly using the subclass: continue to usethe logging.getLogger() API to get your loggers."
    },
    {
        "id": 1281,
        "name": "sys.set_asyncgen_hooks()",
        "describe": "Accepts two optional keyword arguments which are callables that accept anasynchronous generator iterator as an argument. The firstitercallable will be called when an asynchronous generator is iterated for thefirst time. The finalizer will be called when an asynchronous generatoris about to be garbage collected."
    },
    {
        "id": 1282,
        "name": "readline.set_auto_history()",
        "describe": "Enable or disable automatic calls to add_history() when readinginput via readline.  The enabled argument should be a Boolean valuethat when true, enables auto history, and that when false, disablesauto history."
    },
    {
        "id": 1283,
        "name": "os.set_blocking()",
        "describe": "Set the blocking mode of the specified file descriptor. Set theO_NONBLOCK flag if blocking is False, clear the flag otherwise."
    },
    {
        "id": 1284,
        "name": "asyncio.set_child_watcher()",
        "describe": "Set the current child watcher to watcher for the currentpolicy.  watcher must implement methods defined in theAbstractChildWatcher base class."
    },
    {
        "id": 1285,
        "name": "readline.set_completer()",
        "describe": "Set or remove the completer function.  If function is specified, it will beused as the new completer function; if omitted or None, any completerfunction already installed is removed.  The completer function is called asfunction(text, state), for state in 0, 1, 2, \u2026, until itreturns a non-string value.  It should return the next possible completionstarting with text."
    },
    {
        "id": 1286,
        "name": "readline.set_completer_delims()",
        "describe": "Set or get the word delimiters for completion.  These determine thestart of the word to be considered for completion (the completion scope).These functions access the rl_completer_word_break_charactersvariable in the underlying library."
    },
    {
        "id": 1287,
        "name": "readline.set_completion_display_matches_hook()",
        "describe": "Set or remove the completion display function.  If function isspecified, it will be used as the new completion display function;if omitted or None, any completion display function alreadyinstalled is removed.  This sets or clears therl_completion_display_matches_hook callback in theunderlying library.  The completion display function is called asfunction(substitution, [matches], longest_match_length) onceeach time matches need to be displayed."
    },
    {
        "id": 1288,
        "name": "sys.set_coroutine_origin_tracking_depth()",
        "describe": "Allows enabling or disabling coroutine origin tracking. Whenenabled, the cr_origin attribute on coroutine objects willcontain a tuple of (filename, line number, function name) tuplesdescribing the traceback where the coroutine object was created,with the most recent call first. When disabled, cr_origin willbe None."
    },
    {
        "id": 1289,
        "name": "ctypes.set_errno()",
        "describe": "Set the current value of the ctypes-private copy of the system errnovariable in the calling thread to value and return the previous value."
    },
    {
        "id": 1290,
        "name": "curses.set_escdelay()",
        "describe": "Sets the number of milliseconds to wait after reading an escape character,to distinguish between an individual escape character entered on thekeyboard from escape sequences sent by cursor and function keys."
    },
    {
        "id": 1291,
        "name": "asyncio.set_event_loop()",
        "describe": "Set loop as a current event loop for the current OS thread."
    },
    {
        "id": 1292,
        "name": "asyncio.set_event_loop_policy()",
        "describe": "Set the current process-wide policy to policy."
    },
    {
        "id": 1293,
        "name": "multiprocessing.set_executable()",
        "describe": "Sets the path of the Python interpreter to use when starting a child process.(By default sys.executable is used).  Embedders will probably need todo some thing like"
    },
    {
        "id": 1294,
        "name": "os.set_handle_inheritable()",
        "describe": "Set the \u201cinheritable\u201d flag of the specified handle."
    },
    {
        "id": 1295,
        "name": "readline.set_history_length()",
        "describe": "Set or return the desired number of lines to save in the history file.The write_history_file() function uses this value to truncatethe history file, by calling history_truncate_file() inthe underlying library.  Negative values implyunlimited history file size."
    },
    {
        "id": 1296,
        "name": "os.set_inheritable()",
        "describe": "Set the \u201cinheritable\u201d flag of the specified file descriptor."
    },
    {
        "id": 1297,
        "name": "ctypes.set_last_error()",
        "describe": "Windows only: set the current value of the ctypes-private copy of the systemLastError variable in the calling thread to value and return theprevious value."
    },
    {
        "id": 1298,
        "name": "readline.set_pre_input_hook()",
        "describe": "Set or remove the function invoked by the rl_pre_input_hookcallback of the underlying library.  If function is specified, it willbe used as the new hook function; if omitted or None, anyfunction already installed is removed.  The hook is calledwith no arguments after the first prompt has been printed and just beforereadline starts reading input characters.  This function only existsif Python was compiled for a version of the library that supports it."
    },
    {
        "id": 1299,
        "name": "multiprocessing.set_start_method()",
        "describe": "Set the method which should be used to start child processes.method can be 'fork', 'spawn' or 'forkserver'."
    },
    {
        "id": 1300,
        "name": "readline.set_startup_hook()",
        "describe": "Set or remove the function invoked by the rl_startup_hookcallback of the underlying library.  If function is specified, it willbe used as the new hook function; if omitted or None, any functionalready installed is removed.  The hook is called with noarguments just before readline prints the first prompt."
    },
    {
        "id": 1301,
        "name": "curses.set_tabsize()",
        "describe": "Sets the number of columns used by the curses library when converting a tabcharacter to spaces as it adds the tab to a window."
    },
    {
        "id": 1302,
        "name": "bdb.set_trace()",
        "describe": "Start debugging with a Bdb instance from caller\u2019s frame."
    },
    {
        "id": 1303,
        "name": "doctest.set_unittest_reportflags()",
        "describe": "Set the doctest reporting flags to use."
    },
    {
        "id": 1304,
        "name": "signal.set_wakeup_fd()",
        "describe": "Set the wakeup file descriptor to fd.  When a signal is received, thesignal number is written as a single byte into the fd.  This can be used bya library to wakeup a poll or select call, allowing the signal to be fullyprocessed."
    },
    {
        "id": 1305,
        "name": "tty.setcbreak()",
        "describe": "Change the mode of file descriptor fd to cbreak. If when is omitted, itdefaults to termios.TCSAFLUSH, and is passed totermios.tcsetattr()."
    },
    {
        "id": 1306,
        "name": "decimal.setcontext()",
        "describe": "Set the current context for the active thread to c."
    },
    {
        "id": 1307,
        "name": "dict.setdefault()",
        "describe": "If key is in the dictionary, return its value.  If not, insert keywith a value of default and return default.  default defaults toNone."
    },
    {
        "id": 1308,
        "name": "socket.setdefaulttimeout()",
        "describe": "Set the default timeout in seconds (float) for new socket objects.  Whenthe socket module is first imported, the default is None.  Seesettimeout() for possible values and their respectivemeanings."
    },
    {
        "id": 1309,
        "name": "sys.setdlopenflags()",
        "describe": "Set the flags used by the interpreter for dlopen() calls, such as whenthe interpreter loads extension modules.  Among other things, this will enable alazy resolving of symbols when importing a module, if called assys.setdlopenflags(0).  To share symbols across extension modules, call assys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag valuescan be found in the os module (RTLD_xxx constants, e.g.os.RTLD_LAZY)."
    },
    {
        "id": 1310,
        "name": "os.setegid()",
        "describe": "Set the current process\u2019s effective group id."
    },
    {
        "id": 1311,
        "name": "os.seteuid()",
        "describe": "Set the current process\u2019s effective user id."
    },
    {
        "id": 1312,
        "name": "calendar.setfirstweekday()",
        "describe": "Sets the weekday (0 is Monday, 6 is Sunday) to start each week. Thevalues MONDAY, TUESDAY, WEDNESDAY, THURSDAY,FRIDAY, SATURDAY, and SUNDAY are provided forconvenience. For example, to set the first weekday to Sunday:"
    },
    {
        "id": 1313,
        "name": "os.setgid()",
        "describe": "Set the current process\u2019 group id."
    },
    {
        "id": 1314,
        "name": "os.setgroups()",
        "describe": "Set the list of supplemental group ids associated with the current process togroups. groups must be a sequence, and each element must be an integeridentifying a group. This operation is typically available only to the superuser."
    },
    {
        "id": 1315,
        "name": "turtle.seth()",
        "describe": "to_angle \u2013 a number (integer or float)"
    },
    {
        "id": 1316,
        "name": "turtle.setheading()",
        "describe": "to_angle \u2013 a number (integer or float)"
    },
    {
        "id": 1317,
        "name": "socket.sethostname()",
        "describe": "Set the machine\u2019s hostname to name.  This will raise anOSError if you don\u2019t have enough rights."
    },
    {
        "id": 1318,
        "name": "operator.setitem()",
        "describe": "Set the value of a at index b to c."
    },
    {
        "id": 1319,
        "name": "signal.setitimer()",
        "describe": "Sets given interval timer (one of signal.ITIMER_REAL,signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specifiedby which to fire after seconds (float is accepted, different fromalarm()) and after that every interval seconds (if intervalis non-zero). The interval timer specified by which can be cleared bysetting seconds to zero."
    },
    {
        "id": 1320,
        "name": "locale.setlocale()",
        "describe": "If locale is given and not None, setlocale() modifies the localesetting for the category. The available categories are listed in the datadescription below. locale may be a string, or an iterable of two strings(language code and encoding). If it\u2019s an iterable, it\u2019s converted to a localename using the locale aliasing engine. An empty string specifies the user\u2019sdefault settings. If the modification of the locale fails, the exceptionError is raised. If successful, the new locale setting is returned."
    },
    {
        "id": 1321,
        "name": "syslog.setlogmask()",
        "describe": "Set the priority mask to maskpri and return the previous mask value.  Callsto syslog() with a priority level not set in maskpri are ignored.The default is to log all priorities.  The function LOG_MASK(pri)calculates the mask for the individual priority pri.  The functionLOG_UPTO(pri) calculates the mask for all priorities up to and includingpri."
    },
    {
        "id": 1322,
        "name": "msvcrt.setmode()",
        "describe": "Set the line-end translation mode for the file descriptor fd. To set it totext mode, flags should be os.O_TEXT; for binary, it should beos.O_BINARY."
    },
    {
        "id": 1323,
        "name": "os.setpgid()",
        "describe": "Call the system call setpgid() to set the process group id of theprocess with id pid to the process group with id pgrp.  See the Unix manualfor the semantics."
    },
    {
        "id": 1324,
        "name": "os.setpgrp()",
        "describe": "Call the system call setpgrp() or setpgrp(0, 0) depending onwhich version is implemented (if any).  See the Unix manual for the semantics."
    },
    {
        "id": 1325,
        "name": "turtle.setposition()",
        "describe": "x \u2013 a number or a pair/vector of numbers"
    },
    {
        "id": 1326,
        "name": "os.setpriority()",
        "describe": "Set program scheduling priority. The value which is one ofPRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and whois interpreted relative to which (a process identifier forPRIO_PROCESS, process group identifier for PRIO_PGRP, and auser ID for PRIO_USER). A zero value for who denotes(respectively) the calling process, the process group of the calling process,or the real user ID of the calling process.priority is a value in the range -20 to 19. The default priority is 0;lower priorities cause more favorable scheduling."
    },
    {
        "id": 1327,
        "name": "threading.setprofile()",
        "describe": "Set a profile function for all threads started from the threading module.The func will be passed to  sys.setprofile() for each thread, before itsrun() method is called."
    },
    {
        "id": 1328,
        "name": "tty.setraw()",
        "describe": "Change the mode of the file descriptor fd to raw. If when is omitted, itdefaults to termios.TCSAFLUSH, and is passed totermios.tcsetattr()."
    },
    {
        "id": 1329,
        "name": "sys.setrecursionlimit()",
        "describe": "Set the maximum depth of the Python interpreter stack to limit.  This limitprevents infinite recursion from causing an overflow of the C stack and crashingPython."
    },
    {
        "id": 1330,
        "name": "os.setregid()",
        "describe": "Set the current process\u2019s real and effective group ids."
    },
    {
        "id": 1331,
        "name": "os.setresgid()",
        "describe": "Set the current process\u2019s real, effective, and saved group ids."
    },
    {
        "id": 1332,
        "name": "os.setresuid()",
        "describe": "Set the current process\u2019s real, effective, and saved user ids."
    },
    {
        "id": 1333,
        "name": "os.setreuid()",
        "describe": "Set the current process\u2019s real and effective user ids."
    },
    {
        "id": 1334,
        "name": "resource.setrlimit()",
        "describe": "Sets new limits of consumption of resource. The limits argument must be atuple (soft, hard) of two integers describing the new limits. A value ofRLIM_INFINITY can be used to request a limit that isunlimited."
    },
    {
        "id": 1335,
        "name": "os.setsid()",
        "describe": "Call the system call setsid().  See the Unix manual for the semantics."
    },
    {
        "id": 1336,
        "name": "socket.setsockopt()",
        "describe": "Set the value of the given socket option (see the Unix manual pagesetsockopt(2)).  The needed symbolic constants are defined in thesocket module (SO_* etc.).  The value can be an integer,None or a bytes-like object representing a buffer. In the latercase it is up to the caller to ensure that the bytestring contains theproper bits (see the optional built-in module struct for a way toencode C structures as bytestrings). When value is set to None,optlen argument is required. It\u2019s equivalent to call setsockopt() Cfunction with optval=NULL and optlen=optlen."
    },
    {
        "id": 1337,
        "name": "random.setstate()",
        "describe": "state should have been obtained from a previous call to getstate(), andsetstate() restores the internal state of the generator to what it was atthe time getstate() was called."
    },
    {
        "id": 1338,
        "name": "sys.setswitchinterval()",
        "describe": "Set the interpreter\u2019s thread switch interval (in seconds).  This floating-pointvalue determines the ideal duration of the \u201ctimeslices\u201d allocated toconcurrently running Python threads.  Please note that the actual valuecan be higher, especially if long-running internal functions or methodsare used.  Also, which thread becomes scheduled at the end of the intervalis the operating system\u2019s decision.  The interpreter doesn\u2019t have itsown scheduler."
    },
    {
        "id": 1339,
        "name": "curses.setsyx()",
        "describe": "Set the virtual screen cursor to y, x. If y and x are both -1, thenleaveok is set True."
    },
    {
        "id": 1340,
        "name": "turtle.settiltangle()",
        "describe": "angle \u2013 a number"
    },
    {
        "id": 1341,
        "name": "threading.settrace()",
        "describe": "Set a trace function for all threads started from the threading module.The func will be passed to  sys.settrace() for each thread, before itsrun() method is called."
    },
    {
        "id": 1342,
        "name": "os.setuid()",
        "describe": "Set the current process\u2019s user id."
    },
    {
        "id": 1343,
        "name": "turtle.setundobuffer()",
        "describe": "size \u2013 an integer or None"
    },
    {
        "id": 1344,
        "name": "turtle.setup()",
        "describe": "Set the size and position of the main window.  Default values of argumentsare stored in the configuration dictionary and can be changed via aturtle.cfg file."
    },
    {
        "id": 1345,
        "name": "curses.setupterm()",
        "describe": "Initialize the terminal.  term is a string givingthe terminal name, or None; if omitted or None, the value of theTERM environment variable will be used.  fd is thefile descriptor to which any initialization sequences will be sent; if notsupplied or -1, the file descriptor for sys.stdout will be used."
    },
    {
        "id": 1346,
        "name": "turtle.setworldcoordinates()",
        "describe": "llx \u2013 a number, x-coordinate of lower left corner of canvas"
    },
    {
        "id": 1347,
        "name": "turtle.setx()",
        "describe": "x \u2013 a number (integer or float)"
    },
    {
        "id": 1348,
        "name": "os.setxattr()",
        "describe": "Set the extended filesystem attribute attribute on path to value.attribute must be a bytes or str with no embedded NULs (directly orindirectly through the PathLike interface). If it is a str,it is encoded with the filesystem encoding.  flags may beXATTR_REPLACE or XATTR_CREATE. If XATTR_REPLACE isgiven and the attribute does not exist, EEXISTS will be raised.If XATTR_CREATE is given and the attribute already exists, theattribute will not be created and ENODATA will be raised."
    },
    {
        "id": 1349,
        "name": "turtle.sety()",
        "describe": "y \u2013 a number (integer or float)"
    },
    {
        "id": 1350,
        "name": "turtle.shape()",
        "describe": "name \u2013 a string which is a valid shapename"
    },
    {
        "id": 1351,
        "name": "turtle.shapesize()",
        "describe": "stretch_wid \u2013 positive number"
    },
    {
        "id": 1352,
        "name": "turtle.shapetransform()",
        "describe": "t11 \u2013 a number (optional)"
    },
    {
        "id": 1353,
        "name": "turtle.shearfactor()",
        "describe": "shear \u2013 number (optional)"
    },
    {
        "id": 1354,
        "name": "asyncio.shield()",
        "describe": "Protect an awaitable objectfrom being cancelled."
    },
    {
        "id": 1355,
        "name": "textwrap.shorten()",
        "describe": "Collapse and truncate the given text to fit in the given width."
    },
    {
        "id": 1356,
        "name": "dis.show_code()",
        "describe": "Print detailed code object information for the supplied function, method,source code string or code object to file (or sys.stdout if fileis not specified)."
    },
    {
        "id": 1357,
        "name": "turtle.showturtle()",
        "describe": "Make the turtle visible."
    },
    {
        "id": 1358,
        "name": "warnings.showwarning()",
        "describe": "Write a warning to a file.  The default implementation callsformatwarning(message, category, filename, lineno, line) and writes theresulting string to file, which defaults to sys.stderr.  You may replacethis function with any callable by assigning to warnings.showwarning.line is a line of source code to be included in the warningmessage; if line is not supplied, showwarning() willtry to read the line specified by filename and lineno."
    },
    {
        "id": 1359,
        "name": "random.shuffle()",
        "describe": "Shuffle the sequence x in place."
    },
    {
        "id": 1360,
        "name": "logging.shutdown()",
        "describe": "Informs the logging system to perform an orderly shutdown by flushing andclosing all handlers. This should be called at application exit and nofurther use of the logging system should be made after this call."
    },
    {
        "id": 1361,
        "name": "signal.siginterrupt()",
        "describe": "Change system call restart behaviour: if flag is False, systemcalls will be restarted when interrupted by signal signalnum, otherwisesystem calls will be interrupted.  Returns nothing."
    },
    {
        "id": 1362,
        "name": "signal.signal()",
        "describe": "Set the handler for signal signalnum to the function handler.  handler canbe a callable Python object taking two arguments (see below), or one of thespecial values signal.SIG_IGN or signal.SIG_DFL.  The previoussignal handler will be returned (see the description of getsignal()above).  (See the Unix man page signal(2) for further information.)"
    },
    {
        "id": 1363,
        "name": "inspect.signature()",
        "describe": "Return a Signature object for the given callable:"
    },
    {
        "id": 1364,
        "name": "signal.sigpending()",
        "describe": "Examine the set of signals that are pending for delivery to the callingthread (i.e., the signals which have been raised while blocked).  Return theset of the pending signals."
    },
    {
        "id": 1365,
        "name": "signal.sigtimedwait()",
        "describe": "Like sigwaitinfo(), but takes an additional timeout argumentspecifying a timeout. If timeout is specified as 0, a poll isperformed. Returns None if a timeout occurs."
    },
    {
        "id": 1366,
        "name": "signal.sigwait()",
        "describe": "Suspend execution of the calling thread until the delivery of one of thesignals specified in the signal set sigset.  The function accepts the signal(removes it from the pending list of signals), and returns the signal number."
    },
    {
        "id": 1367,
        "name": "signal.sigwaitinfo()",
        "describe": "Suspend execution of the calling thread until the delivery of one of thesignals specified in the signal set sigset.  The function accepts thesignal and removes it from the pending list of signals. If one of thesignals in sigset is already pending for the calling thread, the functionwill return immediately with information about that signal. The signalhandler is not called for the delivered signal. The function raises anInterruptedError if it is interrupted by a signal that is not insigset."
    },
    {
        "id": 1368,
        "name": "warnings.simplefilter()",
        "describe": "Insert a simple entry into the list of warnings filter specifications.  The meaning of the function parameters is as forfilterwarnings(), but regular expressions are not needed as the filterinserted always matches any message in any module as long as the category andline number match."
    },
    {
        "id": 1369,
        "name": "math.sin()",
        "describe": "Return the sine of x radians."
    },
    {
        "id": 1370,
        "name": "functools.singledispatch()",
        "describe": "Transform a function into a single-dispatch generic function."
    },
    {
        "id": 1371,
        "name": "math.sinh()",
        "describe": "Return the hyperbolic sine of x."
    },
    {
        "id": 1372,
        "name": "ctypes.sizeof()",
        "describe": "Returns the size in bytes of a ctypes type or instance memory buffer.Does the same as the C sizeof operator."
    },
    {
        "id": 1373,
        "name": "unittest.skip()",
        "describe": "Unconditionally skip the decorated test.  reason should describe why thetest is being skipped."
    },
    {
        "id": 1374,
        "name": "unittest.skipIf()",
        "describe": "Skip the decorated test if condition is true."
    },
    {
        "id": 1375,
        "name": "unittest.skipUnless()",
        "describe": "Skip the decorated test unless condition is true."
    },
    {
        "id": 1376,
        "name": "asyncio.sleep()",
        "describe": "Block for delay seconds."
    },
    {
        "id": 1377,
        "name": "socket.socket()",
        "describe": "Create a new socket using the given address family, socket type and protocolnumber.  The address family should be AF_INET (the default),AF_INET6, AF_UNIX, AF_CAN, AF_PACKET,or AF_RDS. The socket type should be SOCK_STREAM (thedefault), SOCK_DGRAM, SOCK_RAW or perhaps one of the otherSOCK_ constants. The protocol number is usually zero and may be omittedor in the case where the address family is AF_CAN the protocolshould be one of CAN_RAW, CAN_BCM, CAN_ISOTP orCAN_J1939."
    },
    {
        "id": 1378,
        "name": "socket.socketpair()",
        "describe": "Build a pair of connected socket objects using the given address family, sockettype, and protocol number.  Address family, socket type, and protocol number areas for the socket() function above. The default family is AF_UNIXif defined on the platform; otherwise, the default is AF_INET."
    },
    {
        "id": 1379,
        "name": "list.sort()",
        "describe": "This method sorts the list in place, using only < comparisonsbetween items. Exceptions are not suppressed - if any comparison operationsfail, the entire sort operation will fail (and the list will likely be leftin a partially modified state)."
    },
    {
        "id": 1380,
        "name": "imp.source_from_cache()",
        "describe": "Given the path to a PEP 3147 file name, return the associated source codefile path.  For example, if path is/foo/bar/__pycache__/baz.cpython-32.pyc the returned path would be/foo/bar/baz.py.  path need not exist, however if it does not conformto PEP 3147 format, a ValueError is raised. Ifsys.implementation.cache_tag is not defined,NotImplementedError is raised."
    },
    {
        "id": 1381,
        "name": "pty.spawn()",
        "describe": "Spawn a process, and connect its controlling terminal with the currentprocess\u2019s standard io. This is often used to baffle programs which insist onreading from the controlling terminal. It is expected that the processspawned behind the pty will eventually terminate, and when it does spawnwill return."
    },
    {
        "id": 1382,
        "name": "os.spawnl()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1383,
        "name": "os.spawnle()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1384,
        "name": "os.spawnlp()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1385,
        "name": "os.spawnlpe()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1386,
        "name": "os.spawnv()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1387,
        "name": "os.spawnve()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1388,
        "name": "os.spawnvp()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1389,
        "name": "os.spawnvpe()",
        "describe": "Execute the program path in a new process."
    },
    {
        "id": 1390,
        "name": "turtle.speed()",
        "describe": "speed \u2013 an integer in the range 0..10 or a speedstring (see below)"
    },
    {
        "id": 1391,
        "name": "shlex.split()",
        "describe": "Split the string s using shell-like syntax. If comments is False(the default), the parsing of comments in the given string will be disabled(setting the commenters attribute of theshlex instance to the empty string).  This function operatesin POSIX mode by default, but uses non-POSIX mode if the posix argument isfalse."
    },
    {
        "id": 1392,
        "name": "str.splitlines()",
        "describe": "Return a list of the lines in the string, breaking at line boundaries.  Linebreaks are not included in the resulting list unless keepends is given andtrue."
    },
    {
        "id": 1393,
        "name": "math.sqrt()",
        "describe": "Return the square root of x."
    },
    {
        "id": 1394,
        "name": "turtle.st()",
        "describe": "Make the turtle visible."
    },
    {
        "id": 1395,
        "name": "parser.st2list()",
        "describe": "This function accepts an ST object from the caller in st and returns aPython list representing the equivalent parse tree.  The resulting listrepresentation can be used for inspection or the creation of a new parse tree inlist form.  This function does not fail so long as memory is available to buildthe list representation.  If the parse tree will only be used for inspection,st2tuple() should be used instead to reduce memory consumption andfragmentation.  When the list representation is required, this function issignificantly faster than retrieving a tuple representation and converting thatto nested lists."
    },
    {
        "id": 1396,
        "name": "parser.st2tuple()",
        "describe": "This function accepts an ST object from the caller in st and returns aPython tuple representing the equivalent parse tree.  Other than returning atuple instead of a list, this function is identical to st2list()."
    },
    {
        "id": 1397,
        "name": "inspect.stack()",
        "describe": "Return a list of frame records for the caller\u2019s stack.  The first entry in thereturned list represents the caller; the last entry represents the outermostcall on the stack."
    },
    {
        "id": 1398,
        "name": "dis.stack_effect()",
        "describe": "Compute the stack effect of opcode with argument oparg."
    },
    {
        "id": 1399,
        "name": "threading.stack_size()",
        "describe": "Return the thread stack size used when creating new threads.  The optionalsize argument specifies the stack size to be used for subsequently createdthreads, and must be 0 (use platform or configured default) or a positiveinteger value of at least 32,768 (32 KiB). If size is not specified,0 is used.  If changing the thread stack size isunsupported, a RuntimeError is raised.  If the specified stack size isinvalid, a ValueError is raised and the stack size is unmodified.  32 KiBis currently the minimum supported stack size value to guarantee sufficientstack space for the interpreter itself.  Note that some platforms may haveparticular restrictions on values for the stack size, such as requiring aminimum stack size > 32 KiB or requiring allocation in multiples of the systemmemory page size - platform documentation should be referred to for moreinformation (4 KiB pages are common; using multiples of 4096 for the stack size isthe suggested approach in the absence of more specific information)."
    },
    {
        "id": 1400,
        "name": "turtle.stamp()",
        "describe": "Stamp a copy of the turtle shape onto the canvas at the current turtleposition.  Return a stamp_id for that stamp, which can be used to deleteit by calling clearstamp(stamp_id)."
    },
    {
        "id": 1401,
        "name": "base64.standard_b64decode()",
        "describe": "Decode bytes-like object or ASCII string s using the standardBase64 alphabet and return the decoded bytes."
    },
    {
        "id": 1402,
        "name": "base64.standard_b64encode()",
        "describe": "Encode bytes-like object s using the standard Base64 alphabetand return the encoded bytes."
    },
    {
        "id": 1403,
        "name": "itertools.starmap()",
        "describe": "Make an iterator that computes the function using arguments obtained fromthe iterable.  Used instead of map() when argument parameters are alreadygrouped in tuples from a single iterable (the data has been \u201cpre-zipped\u201d).  Thedifference between map() and starmap() parallels the distinctionbetween function(a,b) and function(*c). Roughly equivalent to:"
    },
    {
        "id": 1404,
        "name": "curses.start_color()",
        "describe": "Must be called if the programmer wants to use colors, and before any other colormanipulation routine is called.  It is good practice to call this routine rightafter initscr()."
    },
    {
        "id": 1405,
        "name": "_thread.start_new_thread()",
        "describe": "Start a new thread and return its identifier.  The thread executes thefunction function with the argument list args (which must be a tuple).The optional kwargs argument specifies a dictionary of keyword arguments."
    },
    {
        "id": 1406,
        "name": "asyncio.start_server()",
        "describe": "Start a socket server."
    },
    {
        "id": 1407,
        "name": "asyncio.start_unix_server()",
        "describe": "Start a Unix socket server."
    },
    {
        "id": 1408,
        "name": "os.startfile()",
        "describe": "Start a file with its associated application."
    },
    {
        "id": 1409,
        "name": "str.startswith()",
        "describe": "Return True if string starts with the prefix, otherwise return False.prefix can also be a tuple of prefixes to look for.  With optional start,test string beginning at that position.  With optional end, stop comparingstring at that position."
    },
    {
        "id": 1410,
        "name": "os.stat()",
        "describe": "Get the status of a file or a file descriptor. Perform the equivalent of astat() system call on the given path. path may be specified aseither a string or bytes \u2013 directly or indirectly through the PathLikeinterface \u2013 or as an open file descriptor. Return a stat_resultobject."
    },
    {
        "id": 1411,
        "name": "os.statvfs()",
        "describe": "Perform a statvfs() system call on the given path.  The return value isan object whose attributes describe the filesystem on the given path, andcorrespond to the members of the statvfs structure, namely:f_bsize, f_frsize, f_blocks, f_bfree,f_bavail, f_files, f_ffree, f_favail,f_flag, f_namemax, f_fsid."
    },
    {
        "id": 1412,
        "name": "statistics.stdev()",
        "describe": "Return the sample standard deviation (the square root of the samplevariance).  See variance() for arguments and other details."
    },
    {
        "id": 1413,
        "name": "locale.str()",
        "describe": "Formats a floating point number using the same format as the built-in functionstr(float), but takes the decimal point into account."
    },
    {
        "id": 1414,
        "name": "locale.strcoll()",
        "describe": "Compares two strings according to the current LC_COLLATE setting. Asany other compare function, returns a negative, or a positive value, or 0,depending on whether string1 collates before or after string2 or is equal toit."
    },
    {
        "id": 1415,
        "name": "os.strerror()",
        "describe": "Return the error message corresponding to the error code in code.On platforms where strerror() returns NULL when given an unknownerror number, ValueError is raised."
    },
    {
        "id": 1416,
        "name": "time.strftime()",
        "describe": "Convert a tuple or struct_time representing a time as returned bygmtime() or localtime() to a string as specified by the formatargument.  If t is not provided, the current time as returned bylocaltime() is used.  format must be a string.  ValueError israised if any field in t is outside of the allowed range."
    },
    {
        "id": 1417,
        "name": "codecs.strict_errors()",
        "describe": "Implements the 'strict' error handling: each encoding ordecoding error raises a UnicodeError."
    },
    {
        "id": 1418,
        "name": "ctypes.string_at()",
        "describe": "This function returns the C string starting at memory address address as a bytesobject. If size is specified, it is used as size, otherwise the string is assumedto be zero-terminated."
    },
    {
        "id": 1419,
        "name": "str.strip()",
        "describe": "Return a copy of the string with the leading and trailing characters removed.The chars argument is a string specifying the set of characters to be removed.If omitted or None, the chars argument defaults to removing whitespace.The chars argument is not a prefix or suffix; rather, all combinations of itsvalues are stripped:"
    },
    {
        "id": 1420,
        "name": "time.strptime()",
        "describe": "Parse a string representing a time according to a format.  The return valueis a struct_time as returned by gmtime() orlocaltime()."
    },
    {
        "id": 1421,
        "name": "signal.strsignal()",
        "describe": "Return the system description of the signal signalnum, such as\u201cInterrupt\u201d, \u201cSegmentation fault\u201d, etc. Returns None if the signalis not recognized."
    },
    {
        "id": 1422,
        "name": "locale.strxfrm()",
        "describe": "Transforms a string to one that can be used in locale-awarecomparisons.  For example, strxfrm(s1) < strxfrm(s2) isequivalent to strcoll(s1, s2) < 0.  This function can be usedwhen the same string is compared repeatedly, e.g. when collating asequence of strings."
    },
    {
        "id": 1423,
        "name": "re.sub()",
        "describe": "Return the string obtained by replacing the leftmost non-overlapping occurrencesof pattern in string by the replacement repl.  If the pattern isn\u2019t found,string is returned unchanged.  repl can be a string or a function; if it isa string, any backslash escapes in it are processed.  That is, \\n isconverted to a single newline character, \\r is converted to a carriage return, andso forth.  Unknown escapes of ASCII letters are reserved for future use andtreated as errors.  Other unknown escapes such as \\& are left alone.Backreferences, suchas \\6, are replaced with the substring matched by group 6 in the pattern.For example:"
    },
    {
        "id": 1424,
        "name": "re.subn()",
        "describe": "Perform the same operation as sub(), but return a tuple (new_string,number_of_subs_made)."
    },
    {
        "id": 1425,
        "name": "window.subpad()",
        "describe": "Return a sub-window, whose upper-left corner is at (begin_y, begin_x), andwhose width/height is ncols/nlines."
    },
    {
        "id": 1426,
        "name": "window.subwin()",
        "describe": "Return a sub-window, whose upper-left corner is at (begin_y, begin_x), andwhose width/height is ncols/nlines."
    },
    {
        "id": 1427,
        "name": "parser.suite()",
        "describe": "The suite() function parses the parameter source as if it were an inputto compile(source, 'file.py', 'exec').  If the parse succeeds, an ST objectis created to hold the internal parse tree representation, otherwise anappropriate exception is raised."
    },
    {
        "id": 1428,
        "name": "ipaddress.summarize_address_range()",
        "describe": "Return an iterator of the summarized network range given the first and lastIP addresses.  first is the first IPv4Address orIPv6Address in the range and last is the last IPv4Addressor IPv6Address in the range.  A TypeError is raised iffirst or last are not IP addresses or are not of the same version.  AValueError is raised if last is not greater than first or iffirst address version is not 4 or 6."
    },
    {
        "id": 1429,
        "name": "contextlib.suppress()",
        "describe": "Return a context manager that suppresses any of the specified exceptionsif they occur in the body of a with statement and then resumes executionwith the first statement following the end of the with statement."
    },
    {
        "id": 1430,
        "name": "str.swapcase()",
        "describe": "Return a copy of the string with uppercase characters converted to lowercase andvice versa. Note that it is not necessarily true thats.swapcase().swapcase() == s."
    },
    {
        "id": 1431,
        "name": "os.symlink()",
        "describe": "Create a symbolic link pointing to src named dst."
    },
    {
        "id": 1432,
        "name": "frozenset.symmetric_difference()",
        "describe": "Return a new set with elements in either the set or other but not both."
    },
    {
        "id": 1433,
        "name": "frozenset.symmetric_difference_update()",
        "describe": "Update the set, keeping only elements found in either set, but not in both."
    },
    {
        "id": 1434,
        "name": "symtable.symtable()",
        "describe": "Return the toplevel SymbolTable for the Python source code.filename is the name of the file containing the code.  compile_type islike the mode argument to compile()."
    },
    {
        "id": 1435,
        "name": "os.sync()",
        "describe": "Force write of everything to disk."
    },
    {
        "id": 1436,
        "name": "os.sysconf()",
        "describe": "Return integer-valued system configuration values. If the configuration valuespecified by name isn\u2019t defined, -1 is returned.  The comments regardingthe name parameter for confstr() apply here as well; the dictionary thatprovides information on the known names is given by sysconf_names."
    },
    {
        "id": 1437,
        "name": "syslog.syslog()",
        "describe": "Send the string message to the system logger.  A trailing newline is addedif necessary.  Each message is tagged with a priority composed of afacility and a level.  The optional priority argument, which defaultsto LOG_INFO, determines the message priority.  If the facility isnot encoded in priority using logical-or (LOG_INFO | LOG_USER), thevalue given in the openlog() call is used."
    },
    {
        "id": 1438,
        "name": "platform.system()",
        "describe": "Returns the system/OS name, such as 'Linux', 'Darwin', 'Java','Windows'. An empty string is returned if the value cannot be determined."
    },
    {
        "id": 1439,
        "name": "platform.system_alias()",
        "describe": "Returns (system, release, version) aliased to common marketing names usedfor some systems.  It also does some reordering of the information in some caseswhere it would otherwise cause confusion."
    },
    {
        "id": 1440,
        "name": "itertools.takewhile()",
        "describe": "Make an iterator that returns elements from the iterable as long as thepredicate is true.  Roughly equivalent to:"
    },
    {
        "id": 1441,
        "name": "math.tan()",
        "describe": "Return the tangent of x radians."
    },
    {
        "id": 1442,
        "name": "math.tanh()",
        "describe": "Return the hyperbolic tangent of x."
    },
    {
        "id": 1443,
        "name": "termios.tcdrain()",
        "describe": "Wait until all output written to file descriptor fd has been transmitted."
    },
    {
        "id": 1444,
        "name": "termios.tcflow()",
        "describe": "Suspend or resume input or output on file descriptor fd.  The actionargument can be TCOOFF to suspend output, TCOON to restartoutput, TCIOFF to suspend input, or TCION to restart input."
    },
    {
        "id": 1445,
        "name": "termios.tcflush()",
        "describe": "Discard queued data on file descriptor fd.  The queue selector specifieswhich queue: TCIFLUSH for the input queue, TCOFLUSH for theoutput queue, or TCIOFLUSH for both queues."
    },
    {
        "id": 1446,
        "name": "termios.tcgetattr()",
        "describe": "Return a list containing the tty attributes for file descriptor fd, asfollows: [iflag, oflag, cflag, lflag, ispeed, ospeed, cc] where cc is alist of the tty special characters (each a string of length 1, except theitems with indices VMIN and VTIME, which are integers whenthese fields are defined).  The interpretation of the flags and the speeds aswell as the indexing in the cc array must be done using the symbolicconstants defined in the termios module."
    },
    {
        "id": 1447,
        "name": "os.tcgetpgrp()",
        "describe": "Return the process group associated with the terminal given by fd (an openfile descriptor as returned by os.open())."
    },
    {
        "id": 1448,
        "name": "termios.tcsendbreak()",
        "describe": "Send a break on file descriptor fd.  A zero duration sends a break for0.25\u20130.5 seconds; a nonzero duration has a system dependent meaning."
    },
    {
        "id": 1449,
        "name": "termios.tcsetattr()",
        "describe": "Set the tty attributes for file descriptor fd from the attributes, which isa list like the one returned by tcgetattr().  The when argumentdetermines when the attributes are changed: TCSANOW to changeimmediately, TCSADRAIN to change after transmitting all queued output,or TCSAFLUSH to change after transmitting all queued output anddiscarding all queued input."
    },
    {
        "id": 1450,
        "name": "os.tcsetpgrp()",
        "describe": "Set the process group associated with the terminal given by fd (an open filedescriptor as returned by os.open()) to pg."
    },
    {
        "id": 1451,
        "name": "itertools.tee()",
        "describe": "Return n independent iterators from a single iterable."
    },
    {
        "id": 1452,
        "name": "curses.termattrs()",
        "describe": "Return a logical OR of all video attributes supported by the terminal.  Thisinformation is useful when a curses program needs complete control over theappearance of the screen."
    },
    {
        "id": 1453,
        "name": "curses.termname()",
        "describe": "Return the value of the environment variable TERM, as a bytes object,truncated to 14 characters."
    },
    {
        "id": 1454,
        "name": "cgi.test()",
        "describe": "Robust test CGI script, usable as main program. Writes minimal HTTP headers andformats all information provided to the script in HTML form."
    },
    {
        "id": 1455,
        "name": "doctest.testfile()",
        "describe": "All arguments except filename are optional, and should be specified in keywordform."
    },
    {
        "id": 1456,
        "name": "doctest.testmod()",
        "describe": "All arguments are optional, and all except for m should be specified inkeyword form."
    },
    {
        "id": 1457,
        "name": "doctest.testsource()",
        "describe": "Convert the doctest for an object to a script."
    },
    {
        "id": 1458,
        "name": "cgitb.text()",
        "describe": "This function handles the exception described by info (a 3-tuple containingthe result of sys.exc_info()), formatting its traceback as text andreturning the result as a string. The optional argument context is thenumber of lines of context to display around the current line of source codein the traceback; this defaults to 5."
    },
    {
        "id": 1459,
        "name": "gettext.textdomain()",
        "describe": "Change or query the current global domain.  If domain is None, then thecurrent global domain is returned, otherwise the global domain is set todomain, which is returned."
    },
    {
        "id": 1460,
        "name": "turtle.textinput()",
        "describe": "title \u2013 string"
    },
    {
        "id": 1461,
        "name": "time.thread_time()",
        "describe": "Return the value (in fractional seconds) of the sum of the system and userCPU time of the current thread.  It does not include time elapsed duringsleep.  It is thread-specific by definition.  The reference point of thereturned value is undefined, so that only the difference between the resultsof two calls in the same thread is valid."
    },
    {
        "id": 1462,
        "name": "time.thread_time_ns()",
        "describe": "Similar to thread_time() but return time as nanoseconds."
    },
    {
        "id": 1463,
        "name": "curses.tigetflag()",
        "describe": "Return the value of the Boolean capability corresponding to the terminfocapability name capname as an integer.  Return the value -1 if capname is not aBoolean capability, or 0 if it is canceled or absent from the terminaldescription."
    },
    {
        "id": 1464,
        "name": "curses.tigetnum()",
        "describe": "Return the value of the numeric capability corresponding to the terminfocapability name capname as an integer.  Return the value -2 if capname is not anumeric capability, or -1 if it is canceled or absent from the terminaldescription."
    },
    {
        "id": 1465,
        "name": "curses.tigetstr()",
        "describe": "Return the value of the string capability corresponding to the terminfocapability name capname as a bytes object.  Return None if capnameis not a terminfo \u201cstring capability\u201d, or is canceled or absent from theterminal description."
    },
    {
        "id": 1466,
        "name": "turtle.tilt()",
        "describe": "angle \u2013 a number"
    },
    {
        "id": 1467,
        "name": "turtle.tiltangle()",
        "describe": "angle \u2013 a number (optional)"
    },
    {
        "id": 1468,
        "name": "time.time()",
        "describe": "Return the time in seconds since the epoch as a floating pointnumber. The specific date of the epoch and the handling ofleap seconds is platform dependent.On Windows and most Unix systems, the epoch is January 1, 1970,00:00:00 (UTC) and leap seconds are not counted towards the timein seconds since the epoch. This is commonly referred to asUnix time.To find out what the epoch is on a given platform, look atgmtime(0)."
    },
    {
        "id": 1469,
        "name": "time.time_ns()",
        "describe": "Similar to time() but returns time as an integer number of nanosecondssince the epoch."
    },
    {
        "id": 1470,
        "name": "calendar.timegm()",
        "describe": "An unrelated but handy function that takes a time tuple such as returned bythe gmtime() function in the time module, and returns thecorresponding Unix timestamp value, assuming an epoch of 1970, and the POSIXencoding.  In fact, time.gmtime() and timegm() are each others\u2019inverse."
    },
    {
        "id": 1471,
        "name": "timeit.timeit()",
        "describe": "Create a Timer instance with the given statement, setup code andtimer function and run its timeit() method with number executions.The optional globals argument specifies a namespace in which to execute thecode."
    },
    {
        "id": 1472,
        "name": "os.times()",
        "describe": "Returns the current global process times.The return value is an object with five attributes:"
    },
    {
        "id": 1473,
        "name": "turtle.title()",
        "describe": "titlestring \u2013 a string that is shown in the titlebar of the turtlegraphics window"
    },
    {
        "id": 1474,
        "name": "int.to_bytes()",
        "describe": "Return an array of bytes representing an integer."
    },
    {
        "id": 1475,
        "name": "asyncio.to_thread()",
        "describe": "Asynchronously run function func in a separate thread."
    },
    {
        "id": 1476,
        "name": "memoryview.tobytes()",
        "describe": "Return the data in the buffer as a bytestring.  This is equivalent tocalling the bytes constructor on the memoryview."
    },
    {
        "id": 1477,
        "name": "secrets.token_bytes()",
        "describe": "Return a random byte string containing nbytes number of bytes.If nbytes is None or not supplied, a reasonable default isused."
    },
    {
        "id": 1478,
        "name": "secrets.token_hex()",
        "describe": "Return a random text string, in hexadecimal.  The string has nbytesrandom bytes, each byte converted to two hex digits.  If nbytes isNone or not supplied, a reasonable default is used."
    },
    {
        "id": 1479,
        "name": "secrets.token_urlsafe()",
        "describe": "Return a random URL-safe text string, containing nbytes randombytes.  The text is Base64 encoded, so on average each byte resultsin approximately 1.3 characters.  If nbytes is None or notsupplied, a reasonable default is used."
    },
    {
        "id": 1480,
        "name": "tokenize.tokenize()",
        "describe": "The tokenize() generator requires one argument, readline, whichmust be a callable object which provides the same interface as theio.IOBase.readline() method of file objects.  Each call to thefunction should return one line of input as bytes."
    },
    {
        "id": 1481,
        "name": "memoryview.tolist()",
        "describe": "Return the data in the buffer as a list of elements."
    },
    {
        "id": 1482,
        "name": "audioop.tomono()",
        "describe": "Convert a stereo fragment to a mono fragment.  The left channel is multiplied bylfactor and the right channel by rfactor before adding the two channels togive a mono signal."
    },
    {
        "id": 1483,
        "name": "memoryview.toreadonly()",
        "describe": "Return a readonly version of the memoryview object.  The originalmemoryview object is unchanged."
    },
    {
        "id": 1484,
        "name": "audioop.tostereo()",
        "describe": "Generate a stereo fragment from a mono fragment.  Each pair of samples in thestereo fragment are computed from the mono sample, whereby left channel samplesare multiplied by lfactor and right channel samples by rfactor."
    },
    {
        "id": 1485,
        "name": "functools.total_ordering()",
        "describe": "Given a class defining one or more rich comparison ordering methods, thisclass decorator supplies the rest.  This simplifies the effort involvedin specifying all of the possible rich comparison operations:"
    },
    {
        "id": 1486,
        "name": "turtle.towards()",
        "describe": "x \u2013 a number or a pair/vector of numbers or a turtle instance"
    },
    {
        "id": 1487,
        "name": "curses.tparm()",
        "describe": "Instantiate the bytes object str with the supplied parameters, where str shouldbe a parameterized string obtained from the terminfo database.  E.g.tparm(tigetstr(\"cup\"), 5, 3) could result in b'\\033[6;4H', the exactresult depending on terminal type."
    },
    {
        "id": 1488,
        "name": "inspect.trace()",
        "describe": "Return a list of frame records for the stack between the current frame and theframe in which an exception currently being handled was raised in.  The firstentry in the list represents the caller; the last entry represents where theexception was raised."
    },
    {
        "id": 1489,
        "name": "turtle.tracer()",
        "describe": "n \u2013 nonnegative integer"
    },
    {
        "id": 1490,
        "name": "fnmatch.translate()",
        "describe": "Return the shell-style pattern converted to a regular expression forusing with re.match()."
    },
    {
        "id": 1491,
        "name": "gettext.translation()",
        "describe": "Return a *Translations instance based on the domain, localedir,and languages, which are first passed to find() to get a list of theassociated .mo file paths.  Instances with identical .mo filenames are cached.  The actual class instantiated is class_ ifprovided, otherwise GNUTranslations.  The class\u2019s constructor musttake a single file object argument.  If provided, codeset will changethe charset used to encode translated strings in thelgettext() and lngettext()methods."
    },
    {
        "id": 1492,
        "name": "random.triangular()",
        "describe": "Return a random floating point number N such that low <= N <= high andwith the specified mode between those bounds.  The low and high boundsdefault to zero and one.  The mode argument defaults to the midpointbetween the bounds, giving a symmetric distribution."
    },
    {
        "id": 1493,
        "name": "operator.truediv()",
        "describe": "Return a / b where 2/3 is .66 rather than 0.  This is also known as\u201ctrue\u201d division."
    },
    {
        "id": 1494,
        "name": "math.trunc()",
        "describe": "Return the Real value x truncated to anIntegral (usually an integer). Delegates tox.__trunc__()."
    },
    {
        "id": 1495,
        "name": "os.truncate()",
        "describe": "Truncate the file corresponding to path, so that it is at mostlength bytes in size."
    },
    {
        "id": 1496,
        "name": "operator.truth()",
        "describe": "Return True if obj is true, and False otherwise.  This isequivalent to using the bool constructor."
    },
    {
        "id": 1497,
        "name": "os.ttyname()",
        "describe": "Return a string which specifies the terminal device associated withfile descriptor fd.  If fd is not associated with a terminal device, anexception is raised."
    },
    {
        "id": 1498,
        "name": "parser.tuple2st()",
        "describe": "This is the same function as sequence2st().  This entry point ismaintained for backward compatibility."
    },
    {
        "id": 1499,
        "name": "turtle.turtles()",
        "describe": "Return the list of turtles on the screen."
    },
    {
        "id": 1500,
        "name": "turtle.turtlesize()",
        "describe": "stretch_wid \u2013 positive number"
    },
    {
        "id": 1501,
        "name": "typing.type_check_only()",
        "describe": "Decorator to mark a class or function to be unavailable at runtime."
    },
    {
        "id": 1502,
        "name": "curses.typeahead()",
        "describe": "Specify that the file descriptor fd be used for typeahead checking.  If fdis -1, then no typeahead checking is done."
    },
    {
        "id": 1503,
        "name": "time.tzset()",
        "describe": "Reset the time conversion rules used by the library routines. The environmentvariable TZ specifies how this is done. It will also set the variablestzname (from the TZ environment variable), timezone (non-DSTseconds West of UTC), altzone (DST seconds west of UTC) and daylight(to 0 if this timezone does not have any daylight saving time rules, or tononzero if there is a time, past, present or future when daylight saving timeapplies)."
    },
    {
        "id": 1504,
        "name": "audioop.ulaw2lin()",
        "describe": "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.u-LAW encoding always uses 8 bits samples, so width refers only to the samplewidth of the output fragment here."
    },
    {
        "id": 1505,
        "name": "math.ulp()",
        "describe": "Return the value of the least significant bit of the float x:"
    },
    {
        "id": 1506,
        "name": "os.umask()",
        "describe": "Set the current numeric umask and return the previous umask."
    },
    {
        "id": 1507,
        "name": "platform.uname()",
        "describe": "Fairly portable uname interface. Returns a namedtuple()containing six attributes: system, node, release,version, machine, and processor."
    },
    {
        "id": 1508,
        "name": "curses.unctrl()",
        "describe": "Return a bytes object which is a printable representation of the character ch.Control characters are represented as a caret followed by the character, forexample as b'^C'. Printing characters are left as they are."
    },
    {
        "id": 1509,
        "name": "turtle.undo()",
        "describe": "Undo (repeatedly) the last turtle action(s).  Number of availableundo actions is determined by the size of the undobuffer."
    },
    {
        "id": 1510,
        "name": "turtle.undobufferentries()",
        "describe": "Return number of entries in the undobuffer."
    },
    {
        "id": 1511,
        "name": "html.unescape()",
        "describe": "Convert all named and numeric character references (e.g. &gt;,&#62;, &#x3e;) in the string s to the corresponding Unicodecharacters.  This function uses the rules defined by the HTML 5 standardfor both valid and invalid character references, and the list ofHTML 5 named character references."
    },
    {
        "id": 1512,
        "name": "curses.unget_wch()",
        "describe": "Push ch so the next get_wch() will return it."
    },
    {
        "id": 1513,
        "name": "curses.ungetch()",
        "describe": "Push ch so the next getch() will return it."
    },
    {
        "id": 1514,
        "name": "curses.ungetmouse()",
        "describe": "Push a KEY_MOUSE event onto the input queue, associating the givenstate data with it."
    },
    {
        "id": 1515,
        "name": "msvcrt.ungetwch()",
        "describe": "Wide char variant of ungetch(), accepting a Unicode value."
    },
    {
        "id": 1516,
        "name": "binascii.unhexlify()",
        "describe": "Return the binary data represented by the hexadecimal string hexstr.  Thisfunction is the inverse of b2a_hex(). hexstr must contain an even numberof hexadecimal digits (which can be upper or lower case), otherwise anError exception is raised."
    },
    {
        "id": 1517,
        "name": "difflib.unified_diff()",
        "describe": "Compare a and b (lists of strings); return a delta (a generatorgenerating the delta lines) in unified diff format."
    },
    {
        "id": 1518,
        "name": "random.uniform()",
        "describe": "Return a random floating point number N such that a <= N <= b fora <= b and b <= N <= a for b < a."
    },
    {
        "id": 1519,
        "name": "frozenset.union()",
        "describe": "Return a new set with elements from the set and all others."
    },
    {
        "id": 1520,
        "name": "os.unlink()",
        "describe": "Remove (delete) the file path.  This function is semanticallyidentical to remove(); the unlink name is itstraditional Unix name.  Please see the documentation forremove() for further information."
    },
    {
        "id": 1521,
        "name": "struct.unpack()",
        "describe": "Unpack from the buffer buffer (presumably packed by pack(format, ...))according to the format string format.  The result is a tuple even if itcontains exactly one item.  The buffer\u2019s size in bytes must match thesize required by the format, as reflected by calcsize()."
    },
    {
        "id": 1522,
        "name": "shutil.unpack_archive()",
        "describe": "Unpack an archive. filename is the full path of the archive."
    },
    {
        "id": 1523,
        "name": "struct.unpack_from()",
        "describe": "Unpack from buffer starting at position offset, according to the formatstring format.  The result is a tuple even if it contains exactly oneitem.  The buffer\u2019s size in bytes, starting at position offset, must be atleast the size required by the format, as reflected by calcsize()."
    },
    {
        "id": 1524,
        "name": "ast.unparse()",
        "describe": "Unparse an ast.AST object and generate a string with codethat would produce an equivalent ast.AST object if parsedback with ast.parse()."
    },
    {
        "id": 1525,
        "name": "sys.unraisablehook()",
        "describe": "Handle an unraisable exception."
    },
    {
        "id": 1526,
        "name": "faulthandler.unregister()",
        "describe": "Unregister a user signal: uninstall the handler of the signum signalinstalled by register(). Return True if the signal was registered,False otherwise."
    },
    {
        "id": 1527,
        "name": "shutil.unregister_archive_format()",
        "describe": "Remove the archive format name from the list of supported formats."
    },
    {
        "id": 1528,
        "name": "csv.unregister_dialect()",
        "describe": "Delete the dialect associated with name from the dialect registry.  AnError is raised if name is not a registered dialect name."
    },
    {
        "id": 1529,
        "name": "shutil.unregister_unpack_format()",
        "describe": "Unregister an unpack format. name is the name of the format."
    },
    {
        "id": 1530,
        "name": "os.unsetenv()",
        "describe": "Unset (delete) the environment variable named key. Such changes to theenvironment affect subprocesses started with os.system(), popen() orfork() and execv()."
    },
    {
        "id": 1531,
        "name": "tokenize.untokenize()",
        "describe": "Converts tokens back into Python source code.  The iterable must returnsequences with at least two elements, the token type and the token string.Any additional sequence elements are ignored."
    },
    {
        "id": 1532,
        "name": "inspect.unwrap()",
        "describe": "Get the object wrapped by func. It follows the chain of __wrapped__attributes returning the last object in the chain."
    },
    {
        "id": 1533,
        "name": "turtle.up()",
        "describe": "Pull the pen up \u2013 no drawing when moving."
    },
    {
        "id": 1534,
        "name": "curses.update_lines_cols()",
        "describe": "Update LINES and COLS. Useful for detecting manual screen resize."
    },
    {
        "id": 1535,
        "name": "functools.update_wrapper()",
        "describe": "Update a wrapper function to look like the wrapped function. The optionalarguments are tuples to specify which attributes of the original function areassigned directly to the matching attributes on the wrapper function and whichattributes of the wrapper function are updated with the corresponding attributesfrom the original function. The default values for these arguments are themodule level constants WRAPPER_ASSIGNMENTS (which assigns to the wrapperfunction\u2019s __module__, __name__, __qualname__, __annotations__and __doc__, the documentation string) and WRAPPER_UPDATES (whichupdates the wrapper function\u2019s __dict__, i.e. the instance dictionary)."
    },
    {
        "id": 1536,
        "name": "str.upper()",
        "describe": "Return a copy of the string with all the cased characters 4 converted touppercase.  Note that s.upper().isupper() might be False if scontains uncased characters or if the Unicode category of the resultingcharacter(s) is not \u201cLu\u201d (Letter, uppercase), but e.g. \u201cLt\u201d (Letter,titlecase)."
    },
    {
        "id": 1537,
        "name": "os.urandom()",
        "describe": "Return a string of size random bytes suitable for cryptographic use."
    },
    {
        "id": 1538,
        "name": "base64.urlsafe_b64decode()",
        "describe": "Decode bytes-like object or ASCII string susing the URL- and filesystem-safealphabet, which substitutes - instead of + and _ instead of/ in the standard Base64 alphabet, and return the decodedbytes."
    },
    {
        "id": 1539,
        "name": "base64.urlsafe_b64encode()",
        "describe": "Encode bytes-like object s using theURL- and filesystem-safe alphabet, whichsubstitutes - instead of + and _ instead of / in thestandard Base64 alphabet, and return the encoded bytes.  The resultcan still contain =."
    },
    {
        "id": 1540,
        "name": "curses.use_default_colors()",
        "describe": "Allow use of default values for colors on terminals supporting this feature. Usethis to support transparency in your application.  The default color is assignedto the color number -1. After calling this function,  init_pair(x,curses.COLOR_RED, -1) initializes, for instance, color pair x to a redforeground color on the default background."
    },
    {
        "id": 1541,
        "name": "curses.use_env()",
        "describe": "If used, this function should be called before initscr() or newterm arecalled.  When flag is False, the values of lines and columns specified in theterminfo database will be used, even if environment variables LINESand COLUMNS (used by default) are set, or if curses is running in awindow (in which case default behavior would be to use the window size ifLINES and COLUMNS are not set)."
    },
    {
        "id": 1542,
        "name": "os.utime()",
        "describe": "Set the access and modified times of the file specified by path."
    },
    {
        "id": 1543,
        "name": "uuid.uuid1()",
        "describe": "Generate a UUID from a host ID, sequence number, and the current time. If nodeis not given, getnode() is used to obtain the hardware address. Ifclock_seq is given, it is used as the sequence number; otherwise a random14-bit sequence number is chosen."
    },
    {
        "id": 1544,
        "name": "uuid.uuid3()",
        "describe": "Generate a UUID based on the MD5 hash of a namespace identifier (which is aUUID) and a name (which is a string)."
    },
    {
        "id": 1545,
        "name": "uuid.uuid4()",
        "describe": "Generate a random UUID."
    },
    {
        "id": 1546,
        "name": "uuid.uuid5()",
        "describe": "Generate a UUID based on the SHA-1 hash of a namespace identifier (which is aUUID) and a name (which is a string)."
    },
    {
        "id": 1547,
        "name": "ipaddress.v4_int_to_packed()",
        "describe": "Represent an address as 4 packed bytes in network (big-endian) order.address is an integer representation of an IPv4 IP address.  AValueError is raised if the integer is negative or too large to be anIPv4 IP address."
    },
    {
        "id": 1548,
        "name": "ipaddress.v6_int_to_packed()",
        "describe": "Represent an address as 16 packed bytes in network (big-endian) order.address is an integer representation of an IPv6 IP address.  AValueError is raised if the integer is negative or too large to be anIPv6 IP address."
    },
    {
        "id": 1549,
        "name": "signal.valid_signals()",
        "describe": "Return the set of valid signal numbers on this platform.  This can beless than range(1, NSIG) if some signals are reserved by the systemfor internal use."
    },
    {
        "id": 1550,
        "name": "dict.values()",
        "describe": "Return a new view of the dictionary\u2019s values.  See thedocumentation of view objects."
    },
    {
        "id": 1551,
        "name": "statistics.variance()",
        "describe": "Return the sample variance of data, an iterable of at least two real-valuednumbers.  Variance, or second moment about the mean, is a measure of thevariability (spread or dispersion) of data.  A large variance indicates thatthe data is spread out; a small variance indicates it is clustered closelyaround the mean."
    },
    {
        "id": 1552,
        "name": "ensurepip.version()",
        "describe": "Returns a string specifying the bundled version of pip that will beinstalled when bootstrapping an environment."
    },
    {
        "id": 1553,
        "name": "window.vline()",
        "describe": "Display a vertical line starting at (y, x) with length n consisting of thecharacter ch."
    },
    {
        "id": 1554,
        "name": "random.vonmisesvariate()",
        "describe": "mu is the mean angle, expressed in radians between 0 and 2*pi, and kappais the concentration parameter, which must be greater than or equal to zero.  Ifkappa is equal to zero, this distribution reduces to a uniform random angleover the range 0 to 2*pi."
    },
    {
        "id": 1555,
        "name": "asyncio.wait()",
        "describe": "Run awaitable objects in the awsiterable concurrently and block until the condition specifiedby return_when."
    },
    {
        "id": 1556,
        "name": "os.wait3()",
        "describe": "Similar to waitpid(), except no process id argument is given and a3-element tuple containing the child\u2019s process id, exit status indication,and resource usage information is returned.  Refer toresource.getrusage() for details on resource usageinformation.  The option argument is the same as that provided towaitpid() and wait4()."
    },
    {
        "id": 1557,
        "name": "os.wait4()",
        "describe": "Similar to waitpid(), except a 3-element tuple, containing the child\u2019sprocess id, exit status indication, and resource usage information is returned.Refer to resource.getrusage() for details onresource usage information.  The arguments to wait4() are the sameas those provided to waitpid()."
    },
    {
        "id": 1558,
        "name": "asyncio.wait_for()",
        "describe": "Wait for the aw awaitableto complete with a timeout."
    },
    {
        "id": 1559,
        "name": "os.waitid()",
        "describe": "Wait for the completion of one or more child processes.idtype can be P_PID, P_PGID, P_ALL, orP_PIDFD on Linux.id specifies the pid to wait on.options is constructed from the ORing of one or more of WEXITED,WSTOPPED or WCONTINUED and additionally may be ORed withWNOHANG or WNOWAIT. The return value is an objectrepresenting the data contained in the siginfo_t structure, namely:si_pid, si_uid, si_signo, si_status,si_code or None if WNOHANG is specified and there are nochildren in a waitable state."
    },
    {
        "id": 1560,
        "name": "os.waitpid()",
        "describe": "The details of this function differ on Unix and Windows."
    },
    {
        "id": 1561,
        "name": "os.waitstatus_to_exitcode()",
        "describe": "Convert a wait status to an exit code."
    },
    {
        "id": 1562,
        "name": "ast.walk()",
        "describe": "Recursively yield all descendant nodes in the tree starting at node(including node itself), in no specified order.  This is useful if you onlywant to modify nodes in place and don\u2019t care about the context."
    },
    {
        "id": 1563,
        "name": "pkgutil.walk_packages()",
        "describe": "Yields ModuleInfo for all modules recursively onpath, or, if path is None, all accessible modules."
    },
    {
        "id": 1564,
        "name": "traceback.walk_stack()",
        "describe": "Walk a stack following f.f_back from the given frame, yielding the frameand line number for each frame. If f is None, the current stack isused. This helper is used with StackSummary.extract()."
    },
    {
        "id": 1565,
        "name": "traceback.walk_tb()",
        "describe": "Walk a traceback following tb_next yielding the frame and line numberfor each frame. This helper is used with StackSummary.extract()."
    },
    {
        "id": 1566,
        "name": "warnings.warn()",
        "describe": "Issue a warning, or maybe ignore it or raise an exception.  The categoryargument, if given, must be a warning category class; itdefaults to UserWarning.  Alternatively, message can be a Warning instance,in which case category will be ignored and message.__class__ will be used.In this case, the message text will be str(message). This function raises anexception if the particular warning issued is changed into an error by thewarnings filter.  The stacklevel argument can be used by wrapperfunctions written in Python, like this:"
    },
    {
        "id": 1567,
        "name": "warnings.warn_explicit()",
        "describe": "This is a low-level interface to the functionality of warn(), passing inexplicitly the message, category, filename and line number, and optionally themodule name and the registry (which should be the __warningregistry__dictionary of the module).  The module name defaults to the filename with.py stripped; if no registry is passed, the warning is never suppressed.message must be a string and category a subclass of Warning ormessage may be a Warning instance, in which case category will beignored."
    },
    {
        "id": 1568,
        "name": "logging.warning()",
        "describe": "Logs a message with level WARNING on the root logger. The argumentsare interpreted as for debug()."
    },
    {
        "id": 1569,
        "name": "calendar.weekday()",
        "describe": "Returns the day of the week (0 is Monday) for year (1970\u2013\u2026),month (1\u201312), day (1\u201331)."
    },
    {
        "id": 1570,
        "name": "calendar.weekheader()",
        "describe": "Return a header containing abbreviated weekday names. n specifies the width incharacters for one weekday."
    },
    {
        "id": 1571,
        "name": "random.weibullvariate()",
        "describe": "Weibull distribution.  alpha is the scale parameter and beta is the shapeparameter."
    },
    {
        "id": 1572,
        "name": "sndhdr.what()",
        "describe": "Determines the type of sound data stored in the file filename usingwhathdr().  If it succeeds, returns a namedtuple as described above, otherwiseNone is returned."
    },
    {
        "id": 1573,
        "name": "sndhdr.whathdr()",
        "describe": "Determines the type of sound data stored in a file based on the file  header.The name of the file is given by filename.  This function returns a namedtuple asdescribed above on success, or None."
    },
    {
        "id": 1574,
        "name": "shutil.which()",
        "describe": "Return the path to an executable which would be run if the given cmd wascalled.  If no cmd would be called, return None."
    },
    {
        "id": 1575,
        "name": "dbm.whichdb()",
        "describe": "This function attempts to guess which of the several simple database modulesavailable \u2014 dbm.gnu, dbm.ndbm or dbm.dumb \u2014 shouldbe used to open a given file."
    },
    {
        "id": 1576,
        "name": "turtle.width()",
        "describe": "width \u2013 a positive number"
    },
    {
        "id": 1577,
        "name": "platform.win32_edition()",
        "describe": "Returns a string representing the current Windows edition.  Possiblevalues include but are not limited to 'Enterprise', 'IoTUAP','ServerStandard', and 'nanoserver'."
    },
    {
        "id": 1578,
        "name": "platform.win32_is_iot()",
        "describe": "Return True if the Windows edition returned by win32_edition()is recognized as an IoT edition."
    },
    {
        "id": 1579,
        "name": "platform.win32_ver()",
        "describe": "Get additional version information from the Windows Registry and return a tuple(release, version, csd, ptype) referring to OS release, version number,CSD level (service pack) and OS type (multi/single processor)."
    },
    {
        "id": 1580,
        "name": "turtle.window_height()",
        "describe": "Return the height of the turtle window."
    },
    {
        "id": 1581,
        "name": "turtle.window_width()",
        "describe": "Return the width of the turtle window."
    },
    {
        "id": 1582,
        "name": "BaseException.with_traceback()",
        "describe": "This method sets tb as the new traceback for the exception and returnsthe exception object.  It is usually used in exception handling code likethis:"
    },
    {
        "id": 1583,
        "name": "textwrap.wrap()",
        "describe": "Wraps the single paragraph in text (a string) so every line is at mostwidth characters long.  Returns a list of output lines, without finalnewlines."
    },
    {
        "id": 1584,
        "name": "asyncio.wrap_future()",
        "describe": "Wrap a concurrent.futures.Future object in aasyncio.Future object."
    },
    {
        "id": 1585,
        "name": "ssl.wrap_socket()",
        "describe": "Takes an instance sock of socket.socket, and returns an instanceof ssl.SSLSocket, a subtype of socket.socket, which wrapsthe underlying socket in an SSL context.  sock must be aSOCK_STREAM socket; other socket types are unsupported."
    },
    {
        "id": 1586,
        "name": "curses.wrapper()",
        "describe": "Initialize curses and call another callable object, func, which should be therest of your curses-using application.  If the application raises an exception,this function will restore the terminal to a sane state before re-raising theexception and generating a traceback.  The callable object func is then passedthe main window \u2018stdscr\u2019 as its first argument, followed by any other argumentspassed to wrapper().  Before calling func, wrapper() turns oncbreak mode, turns off echo, enables the terminal keypad, and initializes colorsif the terminal has color support.  On exit (whether normally or by exception)it restores cooked mode, turns on echo, and disables the terminal keypad."
    },
    {
        "id": 1587,
        "name": "functools.wraps()",
        "describe": "This is a convenience function for invoking update_wrapper() as afunction decorator when defining a wrapper function.  It is equivalent topartial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated).For example:"
    },
    {
        "id": 1588,
        "name": "turtle.write()",
        "describe": "arg \u2013 object to be written to the TurtleScreen"
    },
    {
        "id": 1589,
        "name": "turtle.write_docstringdict()",
        "describe": "filename \u2013 a string, used as filename"
    },
    {
        "id": 1590,
        "name": "readline.write_history_file()",
        "describe": "Save the history list to a readline history file, overwriting anyexisting file.  The default filename is ~/.history.  This callswrite_history() in the underlying library."
    },
    {
        "id": 1591,
        "name": "csv.writer()",
        "describe": "Return a writer object responsible for converting the user\u2019s data into delimitedstrings on the given file-like object.  csvfile can be any object with awrite() method.  If csvfile is a file object, it should be opened withnewline='' 1.  An optional dialectparameter can be given which is used to define a set of parameters specific to aparticular CSV dialect.  It may be an instance of a subclass of theDialect class or one of the strings returned by thelist_dialects() function.  The other optional fmtparams keyword argumentscan be given to override individual formatting parameters in the currentdialect.  For full details about the dialect and formatting parameters, seesection Dialects and Formatting Parameters. To make itas easy as possible to interface with modules which implement the DB API, thevalue None is written as the empty string.  While this isn\u2019t areversible transformation, it makes it easier to dump SQL NULL data values toCSV files without preprocessing the data returned from a cursor.fetch* call.All other non-string data are stringified with str() before being written."
    },
    {
        "id": 1592,
        "name": "os.writev()",
        "describe": "Write the contents of buffers to file descriptor fd. buffers must bea sequence of bytes-like objects. Buffers areprocessed in array order. Entire contents of the first buffer is writtenbefore proceeding to the second, and so on."
    },
    {
        "id": 1593,
        "name": "ctypes.wstring_at()",
        "describe": "This function returns the wide character string starting at memory addressaddress as a string.  If size is specified, it is used as the number ofcharacters of the string, otherwise the string is assumed to bezero-terminated."
    },
    {
        "id": 1594,
        "name": "turtle.xcor()",
        "describe": "Return the turtle\u2019s x coordinate."
    },
    {
        "id": 1595,
        "name": "codecs.xmlcharrefreplace_errors()",
        "describe": "Implements the 'xmlcharrefreplace' error handling (for encoding withtext encodings only): theunencodable character is replaced by an appropriate XML character reference."
    },
    {
        "id": 1596,
        "name": "operator.xor()",
        "describe": "Return the bitwise exclusive or of a and b."
    },
    {
        "id": 1597,
        "name": "turtle.ycor()",
        "describe": "Return the turtle\u2019s y coordinate."
    },
    {
        "id": 1598,
        "name": "colorsys.yiq_to_rgb()",
        "describe": "Convert the color from YIQ coordinates to RGB coordinates."
    },
    {
        "id": 1599,
        "name": "str.zfill()",
        "describe": "Return a copy of the string left filled with ASCII '0' digits tomake a string of length width. A leading sign prefix ('+'/'-')is handled by inserting the padding after the sign character ratherthan before. The original string is returned if width is less thanor equal to len(s)."
    },
    {
        "id": 1600,
        "name": "itertools.zip_longest()",
        "describe": "Make an iterator that aggregates elements from each of the iterables. If theiterables are of uneven length, missing values are filled-in with fillvalue.Iteration continues until the longest iterable is exhausted.  Roughly equivalent to:"
    }
]